{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n\nvar AccountKeyLegacy = require('./accountKeyLegacy');\n\nvar AccountKeyPublic = require('./accountKeyPublic');\n\nvar AccountKeyFail = require('./accountKeyFail');\n\nvar AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig');\n\nvar AccountKeyRoleBased = require('./accountKeyRoleBased');\n/**\n * Representing an AccountKeyDecoder which can decode RLP-encoded accountKey string.\n * @class\n */\n\n\nvar AccountKeyDecoder =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AccountKeyDecoder() {\n    _classCallCheck(this, AccountKeyDecoder);\n  }\n\n  _createClass(AccountKeyDecoder, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes an RLP-encoded account key string.\n     *\n     * @param {string} rlpEncodedKey An RLP-encoded account key string.\n     * @return {Account}\n     */\n    value: function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\n        return AccountKeyLegacy.decode(rlpEncodedKey);\n      }\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\n        return AccountKeyPublic.decode(rlpEncodedKey);\n      }\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\n        return AccountKeyFail.decode(rlpEncodedKey);\n      }\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n        return AccountKeyWeightedMultiSig.decode(rlpEncodedKey);\n      }\n\n      if (rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) {\n        return AccountKeyRoleBased.decode(rlpEncodedKey);\n      }\n\n      throw new Error(\"Invalid RLP-encoded account key string: \".concat(rlpEncodedKey));\n    }\n  }]);\n\n  return AccountKeyDecoder;\n}();\n\nmodule.exports = AccountKeyDecoder;","map":null,"metadata":{},"sourceType":"script"}