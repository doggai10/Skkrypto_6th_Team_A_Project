{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Hash = require('eth-lib/lib/hash');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar TransactionHasher = require('../transactionHasher/transactionHasher');\n\nvar AbstractTransaction = require('./abstractTransaction');\n\nvar _require = require('../transactionHelper/transactionHelper'),\n    refineSignatures = _require.refineSignatures,\n    typeDetectionFromRLPEncoding = _require.typeDetectionFromRLPEncoding;\n\nvar Keyring = require('../../../caver-wallet/src/keyring/keyringFactory');\n\nvar AbstractKeyring = require('../../../caver-wallet/src/keyring/abstractKeyring');\n\nvar _require2 = require('../../../caver-wallet/src/keyring/keyringHelper'),\n    KEY_ROLE = _require2.KEY_ROLE;\n\nvar utils = require('../../../caver-utils/src');\n\nvar SignatureData = require('../../../caver-wallet/src/keyring/signatureData');\n/**\n * Abstract class that implements common logic for each fee delegated transaction type.\n * @class\n */\n\n\nvar AbstractFeeDelegatedTransaction =\n/*#__PURE__*/\nfunction (_AbstractTransaction) {\n  \"use strict\";\n\n  _inherits(AbstractFeeDelegatedTransaction, _AbstractTransaction);\n\n  /**\n   * Abstract class that implements common logic for each fee-delegated transaction type.\n   * In this constructor, feePayer and feePayerSignatures are set as transaction member variables.\n   *\n   * @constructor\n   * @param {string} typeString - The type string of transaction.\n   * @param {object} createTxObj - The parameters to create an instance of transaction.\n   */\n  function AbstractFeeDelegatedTransaction(typeString, createTxObj) {\n    var _this;\n\n    _classCallCheck(this, AbstractFeeDelegatedTransaction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AbstractFeeDelegatedTransaction).call(this, typeString, createTxObj));\n    _this.feePayer = createTxObj.feePayer;\n    _this.feePayerSignatures = createTxObj.feePayerSignatures || [];\n    return _this;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(AbstractFeeDelegatedTransaction, [{\n    key: \"signAsFeePayer\",\n\n    /**\n     * Signs to the transaction with private key(s) in `key` as a fee payer.\n     * @async\n     * @param {Keyring|string} key - The instance of Keyring, private key string or KlaytnWalletKey string.\n     * @param {number} [index] - The index of private key to use. If index is undefined, all private keys in keyring will be used.\n     * @param {function} [hasher] - The function to get the transaction hash.\n     * @return {Transaction}\n     */\n    value: function () {\n      var _signAsFeePayer = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(key, index) {\n        var hasher,\n            keyring,\n            hash,\n            sig,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                hasher = _args.length > 2 && _args[2] !== undefined ? _args[2] : TransactionHasher.getHashForFeePayerSignature;\n\n                // User parameter input cases\n                // (key) / (key index) / (key hasher) / (key index hasher)\n                if (_.isFunction(index)) {\n                  hasher = index;\n                  index = undefined;\n                }\n\n                keyring = key;\n\n                if (_.isString(key)) {\n                  keyring = Keyring.createFromPrivateKey(key);\n                }\n\n                if (keyring instanceof AbstractKeyring) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Unsupported key type. The key parameter of the signAsFeePayer must be a single private key string, KlaytnWalletKey string, or Keyring instance.\");\n\n              case 6:\n                if (!this.feePayer || this.feePayer === '0x') this.feePayer = keyring.address;\n\n                if (!(this.feePayer.toLowerCase() !== keyring.address.toLowerCase())) {\n                  _context.next = 9;\n                  break;\n                }\n\n                throw new Error(\"The feePayer address of the transaction is different with the address of the keyring to use.\");\n\n              case 9:\n                _context.next = 11;\n                return this.fillTransaction();\n\n              case 11:\n                hash = hasher(this);\n                sig = keyring.sign(hash, this.chainId, KEY_ROLE.roleFeePayerKey, index);\n                this.appendFeePayerSignatures(sig);\n                return _context.abrupt(\"return\", this);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function signAsFeePayer(_x, _x2) {\n        return _signAsFeePayer.apply(this, arguments);\n      }\n\n      return signAsFeePayer;\n    }()\n    /**\n     * Appends feePayerSignatures to the transaction.\n     *\n     * @param {SignatureData|Array.<SignatureData>|Array.<string>|Array.<Array.<string>>} signatures - An array of feePayerSignatures to append to the transaction.\n     *                                                      One feePayerSignature can be defined in the form of a one-dimensional array or two-dimensional array,\n     *                                                      and more than one feePayerSignatures should be defined in the form of a two-dimensional array.\n     */\n\n  }, {\n    key: \"appendFeePayerSignatures\",\n    value: function appendFeePayerSignatures(signatures) {\n      var sig = signatures;\n      if (_.isString(sig)) sig = utils.resolveSignature(sig);\n      if (sig instanceof SignatureData) sig = [sig];\n      if (!_.isArray(sig)) throw new Error(\"Failed to append signatures: invalid signatures format \".concat(sig));\n      if (_.isString(sig[0])) sig = [sig];\n      this.feePayerSignatures = this.feePayerSignatures.concat(sig);\n    }\n    /**\n     * Combines RLP-encoded transactions (rawTransaction) to the transaction from RLP-encoded transaction strings and returns a single transaction with all signatures combined.\n     * When combining the signatures into a transaction instance,\n     * an error is thrown if the decoded transaction contains different value except signatures.\n     *\n     * @param {Array.<string>} rlpEncodedTxs - An array of RLP-encoded transaction strings.\n     * @return {string}\n     */\n\n  }, {\n    key: \"combineSignedRawTransactions\",\n    value: function combineSignedRawTransactions(rlpEncodedTxs) {\n      if (!_.isArray(rlpEncodedTxs)) throw new Error(\"The parameter must be an array of RLP encoded transaction strings.\"); // If the signatures are empty, there may be an undefined member variable.\n      // In this case, the empty information is filled with the decoded result.\n\n      var fillVariables = false;\n      if (utils.isEmptySig(this.signatures) || utils.isEmptySig(this.feePayerSignatures)) fillVariables = true;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = rlpEncodedTxs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var encoded = _step.value;\n          var type = typeDetectionFromRLPEncoding(encoded);\n          if (this.type !== type) throw new Error(\"Transaction type mismatch: Signatures from different transactions cannot be combined.\");\n          var decoded = this.constructor.decode(encoded); // Signatures can only be combined for the same transaction.\n          // Therefore, compare whether the decoded transaction is the same as this.\n\n          for (var k in decoded) {\n            if (k === '_signatures' || k === '_feePayerSignatures') continue;\n\n            if (k === '_feePayer') {\n              if ((decoded[k] !== '0x' || this[k] === '0x') && fillVariables) this[k] = decoded[k];\n              if (decoded[k] === '0x') continue;\n            }\n\n            if (this[k] === undefined && fillVariables) this[k] = decoded[k];\n            var differentTxError = \"Transactions containing different information cannot be combined.\"; // Compare with the RLP-encoded accountKey string, because 'account' is an object.\n\n            if (k === '_account') {\n              if (this[k].getRLPEncodingAccountKey() !== decoded[k].getRLPEncodingAccountKey()) throw new Error(differentTxError);\n              continue;\n            }\n\n            if (this[k] !== decoded[k]) throw new Error(differentTxError);\n          }\n\n          this.appendSignatures(decoded.signatures);\n          this.appendFeePayerSignatures(decoded.feePayerSignatures);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return this.getRLPEncoding();\n    }\n    /**\n     * Returns a senderTxHash of transaction\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getSenderTxHash\",\n    value: function getSenderTxHash() {\n      var rlpEncoded = this.getRLPEncoding();\n      var type = rlpEncoded.slice(0, 4);\n      var typeDetached = \"0x\".concat(rlpEncoded.slice(4));\n      var data = RLP.decode(typeDetached);\n      return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2));\n    }\n    /**\n     * Returns an RLP-encoded transaction string for making signature as a fee payer\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getRLPEncodingForFeePayerSignature\",\n    value: function getRLPEncodingForFeePayerSignature() {\n      return RLP.encode([this.getCommonRLPEncodingForSignature(), this.feePayer, Bytes.fromNat(this.chainId), '0x', '0x']);\n    }\n  }, {\n    key: \"feePayer\",\n    get: function get() {\n      return this._feePayer;\n    },\n    set: function set(f) {\n      if (f === undefined) f = '0x';\n      if (f !== '0x' && !utils.isAddress(f)) throw new Error(\"Invalid address of fee payer: \".concat(f));\n      this._feePayer = f.toLowerCase();\n    }\n    /**\n     * @type {Array.<Array.<string>>}\n     */\n\n  }, {\n    key: \"feePayerSignatures\",\n    get: function get() {\n      return this._feePayerSignatures;\n    },\n    set: function set(sigs) {\n      this._feePayerSignatures = refineSignatures(sigs);\n    }\n  }]);\n\n  return AbstractFeeDelegatedTransaction;\n}(AbstractTransaction);\n\nmodule.exports = AbstractFeeDelegatedTransaction;","map":null,"metadata":{},"sourceType":"script"}