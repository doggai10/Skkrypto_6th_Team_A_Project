{"ast":null,"code":"/* eslint-disable no-unused-vars */\n\n/* eslint-disable class-methods-use-this */\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst utils = require('../../../caver-utils/src');\n/**\n * representing a Keyring which includes `address` and `private keys` by roles.\n * @class\n */\n\n\nclass AbstractKeyring {\n  /**\n   * creates a keyring.\n   * @param {string} address - The address of keyring.\n   */\n  constructor(address) {\n    this.address = address;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get address() {\n    return this._address;\n  }\n\n  set address(addressInput) {\n    if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`);\n    this._address = utils.addHexPrefix(addressInput).toLowerCase();\n  }\n  /**\n   * signs with transactionHash with a key and returns signature(s).\n   * This method has to be overrided in classes which extends AbstractKeyring.\n   *\n   * @return {Array.<string>|Array.<Array.<string>>}\n   */\n\n\n  sign(transactionHash, chainId, role, index) {\n    throw new Error(`Not implemented.`);\n  }\n  /**\n   * signs with hashed message and returns result object that includes `signatures`, `message` and `messageHash`.\n   * This method has to be overrided in classes which extends AbstractKeyring.\n   *\n   * @return {object}\n   */\n\n\n  signMessage(message, role, index) {\n    throw new Error(`Not implemented.`);\n  }\n  /**\n   * encrypts a keyring and returns a keystore v4 object.\n   * This method has to be overrided in classes which extends AbstractKeyring.\n   *\n   * @return {object}\n   */\n\n\n  encrypt(password, options = {}) {\n    throw new Error(`Not implemented.`);\n  }\n  /**\n   * returns a copied singleKeyring instance.\n   * This method has to be overrided in classes which extends AbstractKeyring.\n   *\n   * @return {AbstractKeyring}\n   */\n\n\n  copy() {\n    throw new Error(`Not implemented.`);\n  }\n  /**\n   * returns KlaytnWalletKey format. If keyring uses more than one private key, this function will throw error.\n   *\n   * @return {string}\n   */\n\n\n  getKlaytnWalletKey() {\n    throw new Error(`Not supported for this class.`);\n  }\n  /**\n   * encrypts a keyring and returns a keystore v3 object.\n   *\n   * @param {string} password The password to be used for keyring encryption. The encrypted key store can be decrypted with this password.\n   * @param {object} options The options to use when encrypt a keyring. See `keyring.encrypt` for more detail about options.\n   * @return {object}\n   */\n\n\n  encryptV3(password, options) {\n    throw new Error(`Not supported for this class. Use 'keyring.encrypt(password)'.`);\n  }\n  /**\n   * returns true if keyring has decoupled key.\n   *\n   * @return {boolean}\n   */\n\n\n  isDecoupled() {\n    return true;\n  }\n\n}\n\nmodule.exports = AbstractKeyring;","map":null,"metadata":{},"sourceType":"script"}