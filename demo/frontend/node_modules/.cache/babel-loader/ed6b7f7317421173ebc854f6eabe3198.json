{"ast":null,"code":"var _possibleConstructorReturn = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _assertThisInitialized = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar BaseKIP7 = require('./kip7');\n\nvar BaseKIP17 = require('./kip17');\n\nvar core = require('../../caver-core');\n\nvar _require = require('./kctHelper'),\n    validateDeployParameterForKIP7 = _require.validateDeployParameterForKIP7,\n    validateDeployParameterForKIP17 = _require.validateDeployParameterForKIP17,\n    kip7ByteCode = _require.kip7ByteCode,\n    kip17ByteCode = _require.kip17ByteCode;\n\nvar KCT =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function KCT() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, KCT);\n\n    var _this = this; // sets _requestmanager\n\n\n    core.packageInit(this, args); // overwrite package setRequestManager\n\n    var setRequestManager = this.setRequestManager;\n\n    this.setRequestManager = function (manager) {\n      setRequestManager(manager);\n      _this.kip7._requestManager = _this._requestManager;\n      _this.kip7.currentProvider = _this._provider;\n      _this.kip17._requestManager = _this._requestManager;\n      _this.kip17.currentProvider = _this._provider;\n      return true;\n    }; // overwrite setProvider\n\n\n    var setProvider = this.setProvider;\n\n    this.setProvider = function () {\n      setProvider.apply(_this, arguments);\n\n      _this.setRequestManager(_this._requestManager);\n    }; // Define KIP7 class for caver-kct\n    // In this class, keyrings will be used instead of accounts\n\n\n    var KIP7 =\n    /*#__PURE__*/\n    function (_BaseKIP) {\n      _inherits(KIP7, _BaseKIP);\n\n      _createClass(KIP7, null, [{\n        key: \"deploy\",\n        value: function deploy(tokenInfo, deployer) {\n          validateDeployParameterForKIP7(tokenInfo);\n          var name = tokenInfo.name,\n              symbol = tokenInfo.symbol,\n              decimals = tokenInfo.decimals,\n              initialSupply = tokenInfo.initialSupply;\n          var kip7 = new KIP7();\n          return kip7.deploy({\n            data: kip7ByteCode,\n            arguments: [name, symbol, decimals, initialSupply]\n          }).send({\n            from: deployer,\n            gas: 4000000,\n            value: 0\n          });\n        }\n      }]);\n\n      function KIP7(tokenAddress, abi) {\n        var _this2;\n\n        _classCallCheck(this, KIP7);\n\n        _this2 = _possibleConstructorReturn(this, _getPrototypeOf(KIP7).call(this, tokenAddress, abi));\n\n        var self = _assertThisInitialized(_this2); // eslint-disable-line no-shadow\n\n\n        var setRequestManager = _this.setRequestManager; // eslint-disable-line no-shadow\n\n        _this.setRequestManager = function () {\n          setRequestManager.apply(_this, arguments);\n          core.packageInit(self, [_this]);\n        };\n\n        _this2.setKeyrings(args[0].wallet);\n\n        return _this2;\n      }\n\n      return KIP7;\n    }(BaseKIP7);\n\n    this.kip7 = KIP7; // Define KIP7 class for caver-kct\n    // In this class, keyrings will be used instead of accounts\n\n    var KIP17 =\n    /*#__PURE__*/\n    function (_BaseKIP2) {\n      _inherits(KIP17, _BaseKIP2);\n\n      _createClass(KIP17, null, [{\n        key: \"deploy\",\n        value: function deploy(tokenInfo, deployer) {\n          validateDeployParameterForKIP17(tokenInfo);\n          var name = tokenInfo.name,\n              symbol = tokenInfo.symbol;\n          var kip17 = new KIP17();\n          return kip17.deploy({\n            data: kip17ByteCode,\n            arguments: [name, symbol]\n          }).send({\n            from: deployer,\n            gas: 6600000,\n            value: 0\n          });\n        }\n      }]);\n\n      function KIP17(tokenAddress, abi) {\n        var _this3;\n\n        _classCallCheck(this, KIP17);\n\n        _this3 = _possibleConstructorReturn(this, _getPrototypeOf(KIP17).call(this, tokenAddress, abi));\n\n        var self = _assertThisInitialized(_this3); // eslint-disable-line no-shadow\n\n\n        var setRequestManager = _this.setRequestManager; // eslint-disable-line no-shadow\n\n        _this.setRequestManager = function () {\n          setRequestManager.apply(_this, arguments);\n          core.packageInit(self, [_this]);\n        };\n\n        _this3.setKeyrings(args[0].wallet);\n\n        return _this3;\n      }\n\n      return KIP17;\n    }(BaseKIP17);\n\n    this.kip17 = KIP17;\n  }\n\n  return KCT;\n}();\n\nmodule.exports = KCT;","map":null,"metadata":{},"sourceType":"script"}