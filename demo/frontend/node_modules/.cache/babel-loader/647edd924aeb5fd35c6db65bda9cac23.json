{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar BigNumber = require('bignumber.js');\n\nvar Contract = require('../../caver-contract');\n\nvar _require = require('./kctHelper'),\n    validateDeployParameterForKIP17 = _require.validateDeployParameterForKIP17,\n    kip17JsonInterface = _require.kip17JsonInterface,\n    kip17ByteCode = _require.kip17ByteCode,\n    determineSendParams = _require.determineSendParams,\n    formatParamForUint256 = _require.formatParamForUint256;\n\nvar _require2 = require('../../caver-utils/src'),\n    toBuffer = _require2.toBuffer,\n    isHexStrict = _require2.isHexStrict,\n    toHex = _require2.toHex;\n\nvar _require3 = require('../../caver-utils/src'),\n    isAddress = _require3.isAddress;\n\nvar KIP17 =\n/*#__PURE__*/\nfunction (_Contract) {\n  \"use strict\";\n\n  _inherits(KIP17, _Contract);\n\n  _createClass(KIP17, null, [{\n    key: \"deploy\",\n\n    /**\n     * deploy deploys a KIP-17 token contract to Klaytn network.\n     * `const deployedContract = await caver.klay.KIP17.deploy({\n     *      name: 'TokenName',\n     *      symbol: 'TKN',\n     *  }, '0x{address in hex}')`\n     *\n     * @method deploy\n     * @param {Object} tokenInfo The object that defines the name and symbol of the token to deploy.\n     * @param {String} deployer The address of the account to deploy the KIP-17 token contract.\n     * @return {Object}\n     */\n    value: function deploy(tokenInfo, deployer) {\n      validateDeployParameterForKIP17(tokenInfo);\n      var name = tokenInfo.name,\n          symbol = tokenInfo.symbol;\n      var kip17 = new KIP17();\n      return kip17.deploy({\n        data: kip17ByteCode,\n        arguments: [name, symbol]\n      }).send({\n        from: deployer,\n        gas: 6600000,\n        value: 0\n      });\n    }\n  }]);\n\n  function KIP17(tokenAddress) {\n    var abi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kip17JsonInterface;\n\n    _classCallCheck(this, KIP17);\n\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(KIP17).call(this, abi, tokenAddress));\n  }\n\n  _createClass(KIP17, [{\n    key: \"clone\",\n    value: function clone() {\n      var tokenAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.address;\n      return new this.constructor(tokenAddress, this.options.jsonInterface);\n    }\n  }, {\n    key: \"supportsInterface\",\n    value: function () {\n      var _supportsInterface = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(interfaceId) {\n        var isSupported;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.methods.supportsInterface(interfaceId).call();\n\n              case 2:\n                isSupported = _context.sent;\n                return _context.abrupt(\"return\", isSupported);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function supportsInterface(_x) {\n        return _supportsInterface.apply(this, arguments);\n      }\n\n      return supportsInterface;\n    }()\n    /**\n     * name returns the name of the token.\n     *\n     * @method name\n     * @return {String}\n     */\n\n  }, {\n    key: \"name\",\n    value: function () {\n      var _name = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var name;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.methods.name().call();\n\n              case 2:\n                name = _context2.sent;\n                return _context2.abrupt(\"return\", name);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function name() {\n        return _name.apply(this, arguments);\n      }\n\n      return name;\n    }()\n    /**\n     * symbol returns the symbol of the token.\n     *\n     * @method symbol\n     * @return {String}\n     */\n\n  }, {\n    key: \"symbol\",\n    value: function () {\n      var _symbol = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var symbol;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.methods.symbol().call();\n\n              case 2:\n                symbol = _context3.sent;\n                return _context3.abrupt(\"return\", symbol);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function symbol() {\n        return _symbol.apply(this, arguments);\n      }\n\n      return symbol;\n    }()\n    /**\n     * tokenURI returns the uri of the token.\n     *\n     * @method tokenURI\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {String}\n     */\n\n  }, {\n    key: \"tokenURI\",\n    value: function () {\n      var _tokenURI = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(tokenId) {\n        var tokenURI;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.methods.tokenURI(formatParamForUint256(tokenId)).call();\n\n              case 2:\n                tokenURI = _context4.sent;\n                return _context4.abrupt(\"return\", tokenURI);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function tokenURI(_x2) {\n        return _tokenURI.apply(this, arguments);\n      }\n\n      return tokenURI;\n    }()\n    /**\n     * totalSupply returns the total amount of tokens stored by the contract.\n     *\n     * @method totalSupply\n     * @return {BigNumber}\n     */\n\n  }, {\n    key: \"totalSupply\",\n    value: function () {\n      var _totalSupply = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var totalSupply;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.methods.totalSupply().call();\n\n              case 2:\n                totalSupply = _context5.sent;\n                return _context5.abrupt(\"return\", new BigNumber(totalSupply));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function totalSupply() {\n        return _totalSupply.apply(this, arguments);\n      }\n\n      return totalSupply;\n    }()\n    /**\n     * tokenOfOwnerByIndex returns the token id at a given index of the tokens list of the requested owner.\n     *\n     * @method tokenOfOwnerByIndex\n     * @param {String} owner The address of the account whose token you want to query.\n     * @param {BigNumber|String|Number} index The index of the token to be searched among the tokens owned by a owner account.\n     * @return {BigNumber}\n     */\n\n  }, {\n    key: \"tokenOfOwnerByIndex\",\n    value: function () {\n      var _tokenOfOwnerByIndex = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(owner, index) {\n        var token;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call();\n\n              case 2:\n                token = _context6.sent;\n                return _context6.abrupt(\"return\", new BigNumber(token));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function tokenOfOwnerByIndex(_x3, _x4) {\n        return _tokenOfOwnerByIndex.apply(this, arguments);\n      }\n\n      return tokenOfOwnerByIndex;\n    }()\n    /**\n     * tokenByIndex returns the token id at a given index of all the tokens in this contract.\n     *\n     * @method tokenByIndex\n     * @param {BigNumber|String|Number} index The index of the token to query.\n     * @return {BigNumber}\n     */\n\n  }, {\n    key: \"tokenByIndex\",\n    value: function () {\n      var _tokenByIndex = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(index) {\n        var token;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.methods.tokenByIndex(formatParamForUint256(index)).call();\n\n              case 2:\n                token = _context7.sent;\n                return _context7.abrupt(\"return\", new BigNumber(token));\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function tokenByIndex(_x5) {\n        return _tokenByIndex.apply(this, arguments);\n      }\n\n      return tokenByIndex;\n    }()\n    /**\n     * balanceOf returns the balance of the specified address.\n     * The balance of an account in KIP-17 means that the total number of NFT(Non Fungible Token) owned by the account.\n     *\n     * @method balanceOf\n     * @param {String} account The address of the account whose number of tokens you want to see.\n     * @return {BigNumber}\n     */\n\n  }, {\n    key: \"balanceOf\",\n    value: function () {\n      var _balanceOf = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(account) {\n        var balance;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.methods.balanceOf(account).call();\n\n              case 2:\n                balance = _context8.sent;\n                return _context8.abrupt(\"return\", new BigNumber(balance));\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function balanceOf(_x6) {\n        return _balanceOf.apply(this, arguments);\n      }\n\n      return balanceOf;\n    }()\n    /**\n     * ownerOf returns the owner of the specified token id.\n     *\n     * @method ownerOf\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {BigNumber}\n     */\n\n  }, {\n    key: \"ownerOf\",\n    value: function () {\n      var _ownerOf = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9(tokenId) {\n        var owner;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.methods.ownerOf(formatParamForUint256(tokenId)).call();\n\n              case 2:\n                owner = _context9.sent;\n                return _context9.abrupt(\"return\", owner);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function ownerOf(_x7) {\n        return _ownerOf.apply(this, arguments);\n      }\n\n      return ownerOf;\n    }()\n    /**\n     * getApproved returns the approved address for a token id, or zero if no address set.\n     *\n     * @method getApproved\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"getApproved\",\n    value: function () {\n      var _getApproved = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10(tokenId) {\n        var isApproved;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.methods.getApproved(formatParamForUint256(tokenId)).call();\n\n              case 2:\n                isApproved = _context10.sent;\n                return _context10.abrupt(\"return\", isApproved);\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getApproved(_x8) {\n        return _getApproved.apply(this, arguments);\n      }\n\n      return getApproved;\n    }()\n    /**\n     * isApprovedForAll returns true if an operator is approved by a given owner.\n     *\n     * @method isApprovedForAll\n     * @param {String} owner The id of the token.\n     * @param {String} operator The id of the token.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isApprovedForAll\",\n    value: function () {\n      var _isApprovedForAll = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee11(owner, operator) {\n        var isApprovedForAll;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.methods.isApprovedForAll(owner, operator).call();\n\n              case 2:\n                isApprovedForAll = _context11.sent;\n                return _context11.abrupt(\"return\", isApprovedForAll);\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function isApprovedForAll(_x9, _x10) {\n        return _isApprovedForAll.apply(this, arguments);\n      }\n\n      return isApprovedForAll;\n    }()\n    /**\n     * isMinter returns whether the account is minter or not.\n     *\n     * @method isMinter\n     * @param {String} account The address of the account you want to check minter or not.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isMinter\",\n    value: function () {\n      var _isMinter = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee12(account) {\n        var isMinter;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.methods.isMinter(account).call();\n\n              case 2:\n                isMinter = _context12.sent;\n                return _context12.abrupt(\"return\", isMinter);\n\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function isMinter(_x11) {\n        return _isMinter.apply(this, arguments);\n      }\n\n      return isMinter;\n    }()\n    /**\n     * paused returns whether or not the token contract's transaction is paused.\n     *\n     * @method paused\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"paused\",\n    value: function () {\n      var _paused = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee13() {\n        var isPaused;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.methods.paused().call();\n\n              case 2:\n                isPaused = _context13.sent;\n                return _context13.abrupt(\"return\", isPaused);\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function paused() {\n        return _paused.apply(this, arguments);\n      }\n\n      return paused;\n    }()\n    /**\n     * isPauser returns whether the account is pauser or not.\n     *\n     * @method isPauser\n     * @param {String} account The address of the account you want to check pauser or not.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isPauser\",\n    value: function () {\n      var _isPauser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee14(account) {\n        var isPauser;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.methods.isPauser(account).call();\n\n              case 2:\n                isPauser = _context14.sent;\n                return _context14.abrupt(\"return\", isPauser);\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function isPauser(_x12) {\n        return _isPauser.apply(this, arguments);\n      }\n\n      return isPauser;\n    }()\n    /**\n     * approve sets approval with another address to transfer the given token id.\n     *\n     * @method approve\n     * @param {String} to The address of the account to use on behalf of owner for the tokenId.\n     * @param {BigNumber|String|Number} tokenId The id of token the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"approve\",\n    value: function () {\n      var _approve = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee15(to, tokenId) {\n        var sendParam,\n            executableObj,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                sendParam = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};\n                executableObj = this.methods.approve(to, formatParamForUint256(tokenId));\n                _context15.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context15.sent;\n                return _context15.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function approve(_x13, _x14) {\n        return _approve.apply(this, arguments);\n      }\n\n      return approve;\n    }()\n    /**\n     * setApprovalForAll sets or unsets the approval of a given operator.\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     *\n     * @method setApprovalForAll\n     * @param {String} to The address of an account to allow/forbid for transfer of all tokens owned by the owner on behalf of the owner.\n     * @param {Boolean} approved Whether to allow sending tokens on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"setApprovalForAll\",\n    value: function () {\n      var _setApprovalForAll = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee16(to, approved) {\n        var sendParam,\n            executableObj,\n            _args16 = arguments;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                sendParam = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};\n                executableObj = this.methods.setApprovalForAll(to, approved);\n                _context16.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context16.sent;\n                return _context16.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function setApprovalForAll(_x15, _x16) {\n        return _setApprovalForAll.apply(this, arguments);\n      }\n\n      return setApprovalForAll;\n    }()\n    /**\n     * transferFrom transfers the ownership of a given token id to another address.\n     *\n     * @method transferFrom\n     * @param {String} from The address of the owner or approved of the given token.\n     * @param {String} to The address of the account to receive the token.\n     * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"transferFrom\",\n    value: function () {\n      var _transferFrom = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee17(from, to, tokenId) {\n        var sendParam,\n            executableObj,\n            _args17 = arguments;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                sendParam = _args17.length > 3 && _args17[3] !== undefined ? _args17[3] : {};\n                executableObj = this.methods.transferFrom(from, to, formatParamForUint256(tokenId));\n                _context17.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context17.sent;\n                return _context17.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function transferFrom(_x17, _x18, _x19) {\n        return _transferFrom.apply(this, arguments);\n      }\n\n      return transferFrom;\n    }()\n    /**\n     * safeTransferFrom safely transfers the ownership of a given token id to another address.\n     *\n     * @method safeTransferFrom\n     * @param {String} from The address of the owner or approved of the given token.\n     * @param {String} to The address of the account to receive the token.\n     * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"safeTransferFrom\",\n    value: function () {\n      var _safeTransferFrom = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee18(from, to, tokenId, data) {\n        var sendParam,\n            executableObj,\n            _args18 = arguments;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                sendParam = _args18.length > 4 && _args18[4] !== undefined ? _args18[4] : {};\n\n                if (!(data && _.isObject(data))) {\n                  _context18.next = 7;\n                  break;\n                }\n\n                if (!(data.gas !== undefined || data.from !== undefined)) {\n                  _context18.next = 7;\n                  break;\n                }\n\n                if (!(Object.keys(sendParam).length > 0)) {\n                  _context18.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid parameters\");\n\n              case 5:\n                sendParam = data;\n                data = undefined;\n\n              case 7:\n                if (data && !_.isBuffer(data)) {\n                  if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                  data = toBuffer(data);\n                }\n\n                executableObj = data ? this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data) : this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId));\n                _context18.next = 11;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 11:\n                sendParam = _context18.sent;\n                return _context18.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 13:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function safeTransferFrom(_x20, _x21, _x22, _x23) {\n        return _safeTransferFrom.apply(this, arguments);\n      }\n\n      return safeTransferFrom;\n    }()\n    /**\n     * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method addMinter\n     * @param {String} account The address of account to add as minter.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"addMinter\",\n    value: function () {\n      var _addMinter = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee19(account) {\n        var sendParam,\n            executableObj,\n            _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                sendParam = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n                executableObj = this.methods.addMinter(account);\n                _context19.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context19.sent;\n                return _context19.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function addMinter(_x24) {\n        return _addMinter.apply(this, arguments);\n      }\n\n      return addMinter;\n    }()\n    /**\n     * renounceMinter renounces privilege of MinterRole.\n     * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n     *\n     * @method renounceMinter\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"renounceMinter\",\n    value: function () {\n      var _renounceMinter = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee20() {\n        var sendParam,\n            executableObj,\n            _args20 = arguments;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                sendParam = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : {};\n                executableObj = this.methods.renounceMinter();\n                _context20.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context20.sent;\n                return _context20.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function renounceMinter() {\n        return _renounceMinter.apply(this, arguments);\n      }\n\n      return renounceMinter;\n    }()\n    /**\n     * mint creates token and assigns them to account, increasing the total supply.\n     *\n     * @method mint\n     * @param {String} to The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} tokenId The id of token to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"mint\",\n    value: function () {\n      var _mint = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee21(to, tokenId) {\n        var sendParam,\n            executableObj,\n            _args21 = arguments;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                sendParam = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : {};\n                executableObj = this.methods.mint(to, formatParamForUint256(tokenId));\n                _context21.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context21.sent;\n                return _context21.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function mint(_x25, _x26) {\n        return _mint.apply(this, arguments);\n      }\n\n      return mint;\n    }()\n    /**\n     * mintWithTokenURI creates token with uri and assigns them to account, increasing the total supply.\n     *\n     * @method mintWithTokenURI\n     * @param {String} to The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} tokenId The id of token to mint.\n     * @param {String} tokenURI The uri of token to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"mintWithTokenURI\",\n    value: function () {\n      var _mintWithTokenURI = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee22(to, tokenId, tokenURI) {\n        var sendParam,\n            executableObj,\n            _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                sendParam = _args22.length > 3 && _args22[3] !== undefined ? _args22[3] : {};\n                executableObj = this.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI);\n                _context22.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context22.sent;\n                return _context22.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function mintWithTokenURI(_x27, _x28, _x29) {\n        return _mintWithTokenURI.apply(this, arguments);\n      }\n\n      return mintWithTokenURI;\n    }()\n    /**\n     * burn destroys a specific KIP-17 token.\n     *\n     * @method burn\n     * @param {BigNumber|String|Number} tokenId The id of token to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"burn\",\n    value: function () {\n      var _burn = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee23(tokenId) {\n        var sendParam,\n            executableObj,\n            _args23 = arguments;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                sendParam = _args23.length > 1 && _args23[1] !== undefined ? _args23[1] : {};\n                executableObj = this.methods.burn(formatParamForUint256(tokenId));\n                _context23.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context23.sent;\n                return _context23.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function burn(_x30) {\n        return _burn.apply(this, arguments);\n      }\n\n      return burn;\n    }()\n    /**\n     * pause triggers stopped state that stops sending tokens in emergency situation.\n     * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n     *\n     * @method pause\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"pause\",\n    value: function () {\n      var _pause = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee24() {\n        var sendParam,\n            executableObj,\n            _args24 = arguments;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                sendParam = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};\n                executableObj = this.methods.pause();\n                _context24.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context24.sent;\n                return _context24.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function pause() {\n        return _pause.apply(this, arguments);\n      }\n\n      return pause;\n    }()\n    /**\n     * unpause sets amount as the allowance of spender over the caller’s tokens.\n     * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n     *\n     * @method unpause\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"unpause\",\n    value: function () {\n      var _unpause = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee25() {\n        var sendParam,\n            executableObj,\n            _args25 = arguments;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                sendParam = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};\n                executableObj = this.methods.unpause();\n                _context25.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context25.sent;\n                return _context25.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function unpause() {\n        return _unpause.apply(this, arguments);\n      }\n\n      return unpause;\n    }()\n    /**\n     * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n     * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n     *\n     * @method addPauser\n     * @param {String} account The address of account to add as pauser.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"addPauser\",\n    value: function () {\n      var _addPauser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee26(account) {\n        var sendParam,\n            executableObj,\n            _args26 = arguments;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                sendParam = _args26.length > 1 && _args26[1] !== undefined ? _args26[1] : {};\n                executableObj = this.methods.addPauser(account);\n                _context26.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context26.sent;\n                return _context26.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function addPauser(_x31) {\n        return _addPauser.apply(this, arguments);\n      }\n\n      return addPauser;\n    }()\n    /**\n     * renouncePauser renounces privilege of PauserRole.\n     * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n     *\n     * @method renouncePauser\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n\n  }, {\n    key: \"renouncePauser\",\n    value: function () {\n      var _renouncePauser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee27() {\n        var sendParam,\n            executableObj,\n            _args27 = arguments;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                sendParam = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : {};\n                executableObj = this.methods.renouncePauser();\n                _context27.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context27.sent;\n                return _context27.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function renouncePauser() {\n        return _renouncePauser.apply(this, arguments);\n      }\n\n      return renouncePauser;\n    }()\n  }]);\n\n  return KIP17;\n}(Contract);\n\nmodule.exports = KIP17;","map":null,"metadata":{},"sourceType":"script"}