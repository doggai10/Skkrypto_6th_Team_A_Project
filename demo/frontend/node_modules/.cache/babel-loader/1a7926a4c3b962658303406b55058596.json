{"ast":null,"code":"var _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Hash = require('eth-lib/lib/hash');\n\nvar TransactionHasher = require('../transactionHasher/transactionHasher');\n\nvar utils = require('../../../caver-utils');\n\nvar Keyring = require('../../../caver-wallet/src/keyring/keyringFactory');\n\nvar AbstractKeyring = require('../../../caver-wallet/src/keyring/abstractKeyring');\n\nvar _require = require('../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    refineSignatures = _require.refineSignatures,\n    typeDetectionFromRLPEncoding = _require.typeDetectionFromRLPEncoding;\n\nvar _require2 = require('../../../caver-wallet/src/keyring/keyringHelper'),\n    KEY_ROLE = _require2.KEY_ROLE;\n\nvar _require3 = require('../../../caver-core-helpers/src/validateFunction'),\n    validateParams = _require3.validateParams;\n\nvar SignatureData = require('../../../caver-wallet/src/keyring/signatureData');\n/**\n * Abstract class that implements common logic for each transaction type.\n * @class\n */\n\n\nvar AbstractTransaction =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  /**\n   * Abstract class that implements common logic for each transaction type.\n   * In this constructor, type, tag, nonce, gasPrice, chainId, gas and signatures are set as transaction member variables.\n   *\n   * @constructor\n   * @param {string} typeString - The type string of transaction.\n   * @param {object} createTxObj - The parameters to create a transaction instance.\n   */\n  function AbstractTransaction(typeString, createTxObj) {\n    _classCallCheck(this, AbstractTransaction);\n\n    this._type = typeString;\n    createTxObj.type = typeString;\n    var err = validateParams(createTxObj);\n    if (err) throw err;\n    this.from = createTxObj.from;\n    this.gas = createTxObj.gas; // The variables below are values that the user does not need to pass to the parameter.\n\n    if (createTxObj.nonce !== undefined) this.nonce = createTxObj.nonce;\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n    if (createTxObj.chainId !== undefined) this.chainId = createTxObj.chainId;\n    this.signatures = createTxObj.signatures || [];\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(AbstractTransaction, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     *\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      throw new Error(\"Not implemented.\");\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      throw new Error(\"Not implemented.\");\n    }\n    /**\n     * Signs to the transaction with private key(s) in the `key`.\n     * @async\n     * @param {Keyring|string} key - The instance of Keyring, private key string or KlaytnWalletKey string.\n     * @param {number} [index] - The index of private key to use. If index is undefined, all private keys in keyring will be used.\n     * @param {function} [hasher] - The function to get hash of transaction. In order to use a custom hasher, the index must be defined.\n     * @return {Transaction}\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(key, index) {\n        var hasher,\n            keyring,\n            hash,\n            role,\n            sig,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                hasher = _args.length > 2 && _args[2] !== undefined ? _args[2] : TransactionHasher.getHashForSignature;\n\n                // User parameter input cases\n                // (key) / (key index) / (key hasher) / (key index hasher)\n                if (_.isFunction(index)) {\n                  hasher = index;\n                  index = undefined;\n                }\n\n                keyring = key;\n\n                if (_.isString(key)) {\n                  keyring = Keyring.createFromPrivateKey(key);\n                }\n\n                if (keyring instanceof AbstractKeyring) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Unsupported key type. The key must be a single private key string, KlaytnWalletKey string, or Keyring instance.\");\n\n              case 6:\n                if (!(this.type === TX_TYPE_STRING.TxTypeLegacyTransaction && keyring.isDecoupled())) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"A legacy transaction cannot be signed with a decoupled keyring.\");\n\n              case 8:\n                if (!this.from || this.from === '0x') this.from = keyring.address;\n\n                if (!(this.from.toLowerCase() !== keyring.address.toLowerCase())) {\n                  _context.next = 11;\n                  break;\n                }\n\n                throw new Error(\"The from address of the transaction is different with the address of the keyring to use.\");\n\n              case 11:\n                _context.next = 13;\n                return this.fillTransaction();\n\n              case 13:\n                hash = hasher(this);\n                role = this.type.includes('AccountUpdate') ? KEY_ROLE.roleAccountUpdateKey : KEY_ROLE.roleTransactionKey;\n                sig = keyring.sign(hash, this.chainId, role, index);\n                this.appendSignatures(sig);\n                return _context.abrupt(\"return\", this);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function sign(_x, _x2) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n    /**\n     * Appends signatures to the transaction.\n     *\n     * @param {SignatureData|Array.<SignatureData>|Array.<string>|Array.<Array.<string>>} signatures - An array of signatures to append to the transaction.\n     *                                                      One signature can be defined in the form of a one-dimensional array or two-dimensional array,\n     *                                                      and more than one signatures should be defined in the form of a two-dimensional array.\n     */\n\n  }, {\n    key: \"appendSignatures\",\n    value: function appendSignatures(signatures) {\n      var sig = signatures;\n      if (_.isString(sig)) sig = utils.resolveSignature(sig);\n      if (sig instanceof SignatureData) sig = [sig];\n      if (!_.isArray(sig)) throw new Error(\"Failed to append signatures: invalid signatures format \".concat(sig));\n      if (_.isString(sig[0])) sig = [sig];\n      this.signatures = this.signatures.concat(sig);\n    }\n    /**\n     * Combines RLP-encoded transactions (rawTransaction) to the transaction from RLP-encoded transaction strings and returns a single transaction with all signatures combined.\n     * When combining the signatures into a transaction instance,\n     * an error is thrown if the decoded transaction contains different value except signatures.\n     *\n     * @param {Array.<string>} rlpEncodedTxs - An array of RLP-encoded transaction strings.\n     * @return {string}\n     */\n\n  }, {\n    key: \"combineSignedRawTransactions\",\n    value: function combineSignedRawTransactions(rlpEncodedTxs) {\n      if (!_.isArray(rlpEncodedTxs)) throw new Error(\"The parameter must be an array of RLP-encoded transaction strings.\"); // If the signatures are empty, there may be an undefined member variable.\n      // In this case, the empty information is filled with the decoded result.\n\n      var fillVariables = false;\n      if (utils.isEmptySig(this.signatures)) fillVariables = true;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = rlpEncodedTxs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var encoded = _step.value;\n          var type = typeDetectionFromRLPEncoding(encoded);\n          if (this.type !== type) throw new Error(\"Transaction type mismatch: Signatures from different transactions cannot be combined.\");\n          var decoded = this.constructor.decode(encoded); // Signatures can only be combined for the same transaction.\n          // Therefore, compare whether the decoded transaction is the same as this.\n\n          for (var k in decoded) {\n            if (k === '_signatures' || k === '_feePayerSignatures') continue;\n            if (this[k] === undefined && fillVariables) this[k] = decoded[k];\n            var differentTxError = \"Transactions containing different information cannot be combined.\"; // Compare with the RLP-encoded accountKey string, because 'account' is an object.\n\n            if (k === '_account') {\n              if (this[k].getRLPEncodingAccountKey() !== decoded[k].getRLPEncodingAccountKey()) throw new Error(differentTxError);\n              continue;\n            }\n\n            if (this[k] !== decoded[k]) throw new Error(differentTxError);\n          }\n\n          this.appendSignatures(decoded.signatures);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return this.getRLPEncoding();\n    }\n    /**\n     * Returns RawTransaction(RLP-encoded transaction string)\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getRawTransaction\",\n    value: function getRawTransaction() {\n      return this.getRLPEncoding();\n    }\n    /**\n     * Returns a hash string of transaction\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getTransactionHash\",\n    value: function getTransactionHash() {\n      return Hash.keccak256(this.getRLPEncoding());\n    }\n    /**\n     * Returns a senderTxHash of transaction\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getSenderTxHash\",\n    value: function getSenderTxHash() {\n      return this.getTransactionHash();\n    }\n    /**\n     * Returns an RLP-encoded transaction string for making signature\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getRLPEncodingForSignature\",\n    value: function getRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      if (this.chainId === undefined) throw new Error(\"chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.\");\n      return RLP.encode([this.getCommonRLPEncodingForSignature(), Bytes.fromNat(this.chainId), '0x', '0x']);\n    }\n    /**\n     * Fills empty optional transaction properties(gasPrice, nonce, chainId).\n     */\n\n  }, {\n    key: \"fillTransaction\",\n    value: function () {\n      var _fillTransaction = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _ref, _ref2, chainId, gasPrice, nonce;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all([isNot(this.chainId) ? AbstractTransaction._klaytnCall.getChainId() : this.chainId, isNot(this.gasPrice) ? AbstractTransaction._klaytnCall.getGasPrice() : this.gasPrice, isNot(this.nonce) ? AbstractTransaction._klaytnCall.getTransactionCount(this.from, 'pending') : this.nonce]);\n\n              case 2:\n                _ref = _context2.sent;\n                _ref2 = _slicedToArray(_ref, 3);\n                chainId = _ref2[0];\n                gasPrice = _ref2[1];\n                nonce = _ref2[2];\n                this.chainId = chainId;\n                this.gasPrice = gasPrice;\n                this.nonce = nonce;\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fillTransaction() {\n        return _fillTransaction.apply(this, arguments);\n      }\n\n      return fillTransaction;\n    }()\n    /**\n     * Checks that member variables that can be defined by the user are defined.\n     * If there is an undefined variable, an error occurs.\n     */\n\n  }, {\n    key: \"validateOptionalValues\",\n    value: function validateOptionalValues() {\n      if (this.gasPrice === undefined) throw new Error(\"gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.\");\n      if (this.nonce === undefined) throw new Error(\"nonce is undefined. Define nonce in transaction or use 'transaction.fillTransaction' to fill values.\");\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"from\",\n    get: function get() {\n      return this._from;\n    },\n    set: function set(address) {\n      if (this.type === TX_TYPE_STRING.TxTypeLegacyTransaction && address === '0x') {\n        this._from = address.toLowerCase();\n      } else {\n        if (!utils.isAddress(address)) throw new Error(\"Invalid address \".concat(address));\n        this._from = address.toLowerCase();\n      }\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"nonce\",\n    get: function get() {\n      return this._nonce;\n    },\n    set: function set(n) {\n      this._nonce = utils.numberToHex(n);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"gas\",\n    get: function get() {\n      return this._gas;\n    },\n    set: function set(g) {\n      this._gas = utils.numberToHex(g);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"gasPrice\",\n    get: function get() {\n      return this._gasPrice;\n    },\n    set: function set(g) {\n      this._gasPrice = utils.numberToHex(g);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this._chainId;\n    },\n    set: function set(ch) {\n      this._chainId = utils.toHex(ch);\n    }\n    /**\n     * @type {Array<string>|Array.<Array<string>>}\n     */\n\n  }, {\n    key: \"signatures\",\n    get: function get() {\n      return this._signatures;\n    },\n    set: function set(sigs) {\n      this._signatures = refineSignatures(sigs, this.type === TX_TYPE_STRING.TxTypeLegacyTransaction);\n    }\n  }]);\n\n  return AbstractTransaction;\n}();\n\nvar isNot = function isNot(value) {\n  return _.isUndefined(value) || _.isNull(value);\n};\n\nmodule.exports = AbstractTransaction;","map":null,"metadata":{},"sourceType":"script"}