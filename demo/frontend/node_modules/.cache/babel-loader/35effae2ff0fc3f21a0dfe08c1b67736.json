{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-requestmanager/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar _ = require('lodash');\n\nvar errors = require('../../caver-core-helpers').errors;\n\nvar middleware = require('../../caver-middleware');\n\nvar Jsonrpc = require('./jsonrpc.js');\n\nvar BatchManager = require('./batch.js');\n\nvar RequestManager = function RequestManager(provider, net) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider, net);\n  this.subscriptions = {};\n};\n\nRequestManager.providers = {\n  WebsocketProvider: require('../caver-providers-ws'),\n  HttpProvider: require('../caver-providers-http'),\n  IpcProvider: require('../caver-providers-ipc')\n};\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object} p\n */\n\nRequestManager.prototype.setProvider = function (p, net) {\n  var _this = this;\n\n  if (p && typeof p === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(p)) {\n      p = new this.providers.HttpProvider(p); // WS\n    } else if (/^ws(s)?:\\/\\//i.test(p)) {\n      p = new this.providers.WebsocketProvider(p); // IPC\n    } else if (p && typeof net === 'object' && typeof net.connect === 'function') {\n      p = new this.providers.IpcProvider(p, net);\n    } else if (p) {\n      throw new Error(\"Can't autodetect provider for \\\"\".concat(p, \"\\\"\"));\n    }\n  }\n\n  if (this.provider) {\n    this.clearSubscriptions();\n  }\n\n  this.provider = p || null; // listen to incoming notifications\n\n  if (this.provider && this.provider.on) {\n    this.provider.on('data', function requestManagerNotification(result, deprecatedResult) {\n      result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n      // check for result.method, to prevent old providers errors to pass as result\n\n      if (result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {\n        _this.subscriptions[result.params.subscription].callback(null, result.params.result);\n      }\n    }); // TODO add error, end, timeout, connect??\n    // this.provider.on('error', function requestManagerNotification(result){\n    //     Object.keys(_this.subscriptions).forEach(function(id){\n    //         if(_this.subscriptions[id].callback)\n    //             _this.subscriptions[id].callback(err);\n    //     });\n    // }\n  }\n\n  return this;\n};\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\n\n\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toPayload(data.method, data.params);\n  var isMiddlewareExist = middleware.getMiddlewares().length !== 0;\n  if (!isMiddlewareExist) return sendRPC(this.provider)(payload); // Attach outbound middleware\n\n  middleware.applyMiddleware(payload, 'outbound', sendRPC(this.provider));\n\n  function sendRPC(provider) {\n    return function (p) {\n      provider[provider.sendAsync ? 'sendAsync' : 'send'](p, function (err, result) {\n        // Attach inbound middleware\n        if (isMiddlewareExist) middleware.applyMiddleware(p, 'inbound');\n        /**\n         * result = json rpc response object\n         * {\n         *  jsonrpc: '2.0'\n         *  result: ...,\n         *  id: ...,\n         *  error: ...,\n         * }\n         *\n         * Reference: https://www.jsonrpc.org/specification\n         */\n\n        if (result && result.id && p.id !== result.id) {\n          return callback(new Error(\"Wrong response id \\\"\".concat(result.id, \"\\\" (expected: \\\"\").concat(p.id, \"\\\") in \").concat(JSON.stringify(p))));\n        }\n\n        if (err) {\n          return callback(err);\n        }\n\n        if (result && result.error) {\n          return callback(errors.ErrorResponse(result));\n        }\n\n        if (!Jsonrpc.isValidResponse(result)) {\n          return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n      });\n    };\n  }\n};\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\n\n\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!_.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n\n    callback(null, results);\n  });\n};\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {String} id           the subscription id\n * @param {String} name         the subscription name\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\n\n\nRequestManager.prototype.addSubscription = function (id, name, type, callback) {\n  if (this.provider.on) {\n    this.subscriptions[id] = {\n      callback: callback,\n      type: type,\n      name: name\n    };\n  } else {\n    throw new Error(\"The provider doesn't support subscriptions: \".concat(this.provider.constructor.name));\n  }\n};\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\n\n\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  var _this = this;\n\n  if (this.subscriptions[id]) {\n    this.send({\n      method: \"\".concat(this.subscriptions[id].type, \"_unsubscribe\"),\n      params: [id]\n    }, callback); // remove subscription\n\n    delete _this.subscriptions[id];\n  }\n};\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\n\n\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  var _this = this; // uninstall all subscriptions\n\n\n  Object.keys(this.subscriptions).forEach(function (id) {\n    if (!keepIsSyncing || _this.subscriptions[id].name !== 'syncing') {\n      _this.removeSubscription(id);\n    }\n  }); //  reset notification callbacks etc.\n\n  if (this.provider.reset) {\n    this.provider.reset();\n  }\n};\n\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":null,"metadata":{},"sourceType":"script"}