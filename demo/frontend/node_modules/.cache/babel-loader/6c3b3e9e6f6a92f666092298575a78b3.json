{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nvar AccountKeyPublic = require('./accountKeyPublic');\n\nvar AccountKeyMultiSig = require('./accountKeyMultiSig');\n\nvar utils = require('../../../../caver-utils');\n\nvar AccountKeyRoleBased =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AccountKeyRoleBased() {\n    var keyObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AccountKeyRoleBased);\n\n    if (keyObj instanceof AccountKeyRoleBased) keyObj = keyObj.keys;\n    if (typeof keyObj !== 'object') throw new Error('RoleBasedKey should be created with Object');\n    validateKeyObject(keyObj);\n    this._transactionKey = makeAccountKey(keyObj.transactionKey);\n    this._updateKey = makeAccountKey(keyObj.updateKey);\n    this._feePayerKey = makeAccountKey(keyObj.feePayerKey);\n    this.type = AccountKeyEnum.ACCOUNT_KEY_ROLEBASED;\n  }\n\n  _createClass(AccountKeyRoleBased, [{\n    key: \"toPublicKey\",\n    value: function toPublicKey(toPublicKeyFunc) {\n      var returnObject = {};\n      if (this._transactionKey !== undefined) returnObject.transactionKey = this._transactionKey.toPublicKey(toPublicKeyFunc);\n      if (this._updateKey !== undefined) returnObject.updateKey = this._updateKey.toPublicKey(toPublicKeyFunc);\n      if (this._feePayerKey !== undefined) returnObject.feePayerKey = this._feePayerKey.toPublicKey(toPublicKeyFunc);\n      return returnObject;\n    }\n  }, {\n    key: \"update\",\n    value: function update(keys) {\n      // In the case of AccountKeyRoleBased, the key that does not update is not defined.\n      // To handle this case, when updating, only update the key for the defined role.\n      if (keys._transactionKey) this._transactionKey = keys._transactionKey;\n      if (keys._updateKey) this._updateKey = keys._updateKey;\n      if (keys._feePayerKey) this._feePayerKey = keys._feePayerKey;\n    }\n  }, {\n    key: \"defaultKey\",\n    get: function get() {\n      var definedKey = this._transactionKey ? this._transactionKey : this._updateKey ? this._updateKey : this._feePayerKey ? this._feePayerKey : undefined;\n      if (!definedKey) throw new Error('There is no key defined in AccountKeyRoleBased.');\n      return definedKey.defaultKey;\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      var keys = {};\n      if (this._transactionKey !== undefined) keys.transactionKey = this._transactionKey.keys;\n      if (this._updateKey !== undefined) keys.updateKey = this._updateKey.keys;\n      if (this._feePayerKey !== undefined) keys.feePayerKey = this._feePayerKey.keys;\n      return keys;\n    }\n  }, {\n    key: \"transactionKey\",\n    get: function get() {\n      if (!this._transactionKey) return undefined;\n      return this._transactionKey.keys;\n    }\n  }, {\n    key: \"updateKey\",\n    get: function get() {\n      if (!this._updateKey) return undefined;\n      return this._updateKey.keys;\n    }\n  }, {\n    key: \"feePayerKey\",\n    get: function get() {\n      if (!this._feePayerKey) return undefined;\n      return this._feePayerKey.keys;\n    }\n  }]);\n\n  return AccountKeyRoleBased;\n}();\n\nfunction makeAccountKey(key) {\n  if (key === undefined) return undefined;\n  if (Array.isArray(key) || key instanceof AccountKeyMultiSig) return new AccountKeyMultiSig(key);\n  if (typeof key !== 'string') throw new Error('Invalid account key type');\n  return new AccountKeyPublic(key);\n}\n\nfunction validateKeyObject(keyObject) {\n  var key = Object.keys(keyObject);\n  if (key.length === 0) throw new Error('Failed to create AccountKeyRoleBased: empty object');\n  key.map(function (role) {\n    if (!utils.isValidRole(role)) throw new Error(\"Failed to create AccountKeyRoleBased. Invalid role is defined : \".concat(role));\n\n    if (Array.isArray(keyObject[role])) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = keyObject[role][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var p = _step.value;\n          var parsed = utils.parsePrivateKey(p);\n          p = parsed.privateKey;\n          if (!utils.isValidPrivateKey(p)) throw new Error(\"Failed to create AccountKeyRoleBased. Invalid private key : \".concat(p));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } else if (!utils.isValidPrivateKey(keyObject[role])) throw new Error(\"Failed to create AccountKeyRoleBased. Invalid private key : \".concat(keyObject[role]));\n  });\n}\n\nmodule.exports = AccountKeyRoleBased;","map":null,"metadata":{},"sourceType":"script"}