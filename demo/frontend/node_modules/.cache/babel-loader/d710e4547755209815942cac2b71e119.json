{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar utils = require('../../../caver-utils/src');\n\nvar SignatureData = require('../../../caver-wallet/src/keyring/signatureData');\n\nvar TX_TYPE_STRING = {\n  TxTypeLegacyTransaction: 'TxTypeLegacyTransaction',\n  TxTypeValueTransfer: 'TxTypeValueTransfer',\n  TxTypeFeeDelegatedValueTransfer: 'TxTypeFeeDelegatedValueTransfer',\n  TxTypeFeeDelegatedValueTransferWithRatio: 'TxTypeFeeDelegatedValueTransferWithRatio',\n  TxTypeValueTransferMemo: 'TxTypeValueTransferMemo',\n  TxTypeFeeDelegatedValueTransferMemo: 'TxTypeFeeDelegatedValueTransferMemo',\n  TxTypeFeeDelegatedValueTransferMemoWithRatio: 'TxTypeFeeDelegatedValueTransferMemoWithRatio',\n  TxTypeAccountUpdate: 'TxTypeAccountUpdate',\n  TxTypeFeeDelegatedAccountUpdate: 'TxTypeFeeDelegatedAccountUpdate',\n  TxTypeFeeDelegatedAccountUpdateWithRatio: 'TxTypeFeeDelegatedAccountUpdateWithRatio',\n  TxTypeSmartContractDeploy: 'TxTypeSmartContractDeploy',\n  TxTypeFeeDelegatedSmartContractDeploy: 'TxTypeFeeDelegatedSmartContractDeploy',\n  TxTypeFeeDelegatedSmartContractDeployWithRatio: 'TxTypeFeeDelegatedSmartContractDeployWithRatio',\n  TxTypeSmartContractExecution: 'TxTypeSmartContractExecution',\n  TxTypeFeeDelegatedSmartContractExecution: 'TxTypeFeeDelegatedSmartContractExecution',\n  TxTypeFeeDelegatedSmartContractExecutionWithRatio: 'TxTypeFeeDelegatedSmartContractExecutionWithRatio',\n  TxTypeCancel: 'TxTypeCancel',\n  TxTypeFeeDelegatedCancel: 'TxTypeFeeDelegatedCancel',\n  TxTypeFeeDelegatedCancelWithRatio: 'TxTypeFeeDelegatedCancelWithRatio',\n  TxTypeChainDataAnchoring: 'TxTypeChainDataAnchoring',\n  TxTypeFeeDelegatedChainDataAnchoring: 'TxTypeFeeDelegatedChainDataAnchoring',\n  TxTypeFeeDelegatedChainDataAnchoringWithRatio: 'TxTypeFeeDelegatedChainDataAnchoringWithRatio'\n};\nvar TX_TYPE_TAG = {\n  TxTypeLegacyTransaction: '',\n  '': TX_TYPE_STRING.TxTypeLegacyTransaction,\n  TxTypeValueTransfer: '0x08',\n  '0x08': TX_TYPE_STRING.TxTypeValueTransfer,\n  TxTypeFeeDelegatedValueTransfer: '0x09',\n  '0x09': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer,\n  TxTypeFeeDelegatedValueTransferWithRatio: '0x0a',\n  '0x0a': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio,\n  TxTypeValueTransferMemo: '0x10',\n  '0x10': TX_TYPE_STRING.TxTypeValueTransferMemo,\n  TxTypeFeeDelegatedValueTransferMemo: '0x11',\n  '0x11': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo,\n  TxTypeFeeDelegatedValueTransferMemoWithRatio: '0x12',\n  '0x12': TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio,\n  TxTypeAccountUpdate: '0x20',\n  '0x20': TX_TYPE_STRING.TxTypeAccountUpdate,\n  TxTypeFeeDelegatedAccountUpdate: '0x21',\n  '0x21': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate,\n  TxTypeFeeDelegatedAccountUpdateWithRatio: '0x22',\n  '0x22': TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio,\n  TxTypeSmartContractDeploy: '0x28',\n  '0x28': TX_TYPE_STRING.TxTypeSmartContractDeploy,\n  TxTypeFeeDelegatedSmartContractDeploy: '0x29',\n  '0x29': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy,\n  TxTypeFeeDelegatedSmartContractDeployWithRatio: '0x2a',\n  '0x2a': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio,\n  TxTypeSmartContractExecution: '0x30',\n  '0x30': TX_TYPE_STRING.TxTypeSmartContractExecution,\n  TxTypeFeeDelegatedSmartContractExecution: '0x31',\n  '0x31': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution,\n  TxTypeFeeDelegatedSmartContractExecutionWithRatio: '0x32',\n  '0x32': TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio,\n  TxTypeCancel: '0x38',\n  '0x38': TX_TYPE_STRING.TxTypeCancel,\n  TxTypeFeeDelegatedCancel: '0x39',\n  '0x39': TX_TYPE_STRING.TxTypeFeeDelegatedCancel,\n  TxTypeFeeDelegatedCancelWithRatio: '0x3a',\n  '0x3a': TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio,\n  TxTypeChainDataAnchoring: '0x48',\n  '0x48': TX_TYPE_STRING.TxTypeChainDataAnchoring,\n  TxTypeFeeDelegatedChainDataAnchoring: '0x49',\n  '0x49': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring,\n  TxTypeFeeDelegatedChainDataAnchoringWithRatio: '0x4a',\n  '0x4a': TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio\n};\nvar CODE_FORMAT = {\n  EVM: '0x0'\n};\n/**\n * Returns transaction type number.\n *\n * @param {string} type - A transaction type string.\n * @return {number}\n */\n\nvar getTypeInt = function getTypeInt(type) {\n  return utils.hexToNumber(TX_TYPE_TAG[type]);\n};\n/**\n * Refines the array containing signatures.\n * - Removes duplicate signatures.\n * - Removes the default empty signature(['0x01', '0x', '0x']) included with other signatures.\n * - For an empty signature array, return an array containing the default empty signature(['0x01', '0x', '0x']).\n *\n * @param {Array.<string>|Array.<Array.<string>>|SignatureData|Array.<SignatureData>} sigArray - A signature or an array of signatures.\n * @param {boolean} [isLegacy] - Whether 'LegacyTransaction' or not.\n * @return {SignatureData|Array.<SignatureData>}\n */\n\n\nvar refineSignatures = function refineSignatures(sigArray) {\n  var isLegacy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var set = new Set();\n  var result = [];\n  var arrayOfSignatures = sigArray;\n\n  if (!_.isArray(sigArray) && sigArray instanceof SignatureData) {\n    arrayOfSignatures = [sigArray];\n  } else if (_.isArray(sigArray) && _.isString(sigArray[0])) {\n    arrayOfSignatures = [sigArray];\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arrayOfSignatures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var sig = _step.value;\n      var signatureData = new SignatureData(sig);\n\n      if (!signatureData.isEmpty()) {\n        var sigString = sig.toString();\n\n        if (!set.has(sigString)) {\n          set.add(sigString, true);\n          result.push(signatureData);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (result.length === 0) result = [SignatureData.emtpySig];\n  if (isLegacy && result.length > 1) throw new Error(\"\".concat(TX_TYPE_STRING.TxTypeLegacyTransaction, \" cannot have multiple sigantures.\"));\n  return !isLegacy ? result : result[0];\n};\n/**\n * Returns transaction type string.\n *\n * @param {string} rlpEncoded - An RLP-encoded transaction string.\n * @return {string}\n */\n\n\nvar typeDetectionFromRLPEncoding = function typeDetectionFromRLPEncoding(rlpEncoded) {\n  var typeTag = utils.addHexPrefix(rlpEncoded).slice(0, 4);\n  return TX_TYPE_TAG[typeTag] ? TX_TYPE_TAG[typeTag] : TX_TYPE_STRING.TxTypeLegacyTransaction;\n};\n/**\n * Returns code format tag string.\n *\n * @param {string|number} cf - The code format.\n * @return {string}\n */\n\n\nvar getCodeFormatTag = function getCodeFormatTag(cf) {\n  if (cf === undefined) return CODE_FORMAT.EVM;\n\n  switch (cf) {\n    case 0:\n    case '0x':\n    case '0x0':\n    case 'EVM':\n      return CODE_FORMAT.EVM;\n  }\n\n  throw new Error(\"Unsupported code format : \".concat(cf));\n};\n\nmodule.exports = {\n  TX_TYPE_STRING: TX_TYPE_STRING,\n  TX_TYPE_TAG: TX_TYPE_TAG,\n  CODE_FORMAT: CODE_FORMAT,\n  refineSignatures: refineSignatures,\n  typeDetectionFromRLPEncoding: typeDetectionFromRLPEncoding,\n  getCodeFormatTag: getCodeFormatTag,\n  getTypeInt: getTypeInt\n};","map":null,"metadata":{},"sourceType":"script"}