{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractTransaction = require('../abstractTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar Account = require('../../../../caver-account/src');\n\nvar utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeAccountUpdate)) throw new Error(\"Cannot decode to AccountUpdate. The prefix must be \".concat(TX_TYPE_TAG.TxTypeAccountUpdate, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 6),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      from = _RLP$decode2[3],\n      rlpEncodedKey = _RLP$decode2[4],\n      signatures = _RLP$decode2[5];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from: from,\n    rlpEncodedKey: rlpEncodedKey,\n    signatures: signatures\n  };\n}\n/**\n * Represents an account update transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypeaccountupdate to see more detail.\n * @class\n */\n\n\nvar AccountUpdate =\n/*#__PURE__*/\nfunction (_AbstractTransaction) {\n  \"use strict\";\n\n  _inherits(AccountUpdate, _AbstractTransaction);\n\n  _createClass(AccountUpdate, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns an AccountUpdate transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded account update transaction.\n     * @return {AccountUpdate}\n     */\n    value: function decode(rlpEncoded) {\n      var decoded = _decode(rlpEncoded);\n\n      decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey);\n      return new AccountUpdate(decoded);\n    }\n    /**\n     * Creates an account update transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create an AccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     */\n\n  }]);\n\n  function AccountUpdate(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, AccountUpdate);\n\n    if (_.isString(createTxObj)) {\n      createTxObj = _decode(createTxObj);\n      createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey);\n    }\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountUpdate).call(this, TX_TYPE_STRING.TxTypeAccountUpdate, createTxObj));\n    _this.account = createTxObj.account;\n    return _this;\n  }\n  /**\n   * @type {Account}\n   */\n\n\n  _createClass(AccountUpdate, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeAccountUpdate + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey(), signatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeAccountUpdate, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey()]);\n    }\n  }, {\n    key: \"account\",\n    get: function get() {\n      return this._account;\n    },\n    set: function set(acct) {\n      if (!(acct instanceof Account)) throw new Error(\"Invalid account. 'account' should be instance of 'Account'.\");\n      if (this.from.toLowerCase() !== acct.address.toLowerCase()) throw new Error(\"Transaction from address(\".concat(this.from.toLowerCase(), \") and account address(\").concat(acct.address, \") do not match.\"));\n      this._account = acct;\n    }\n  }]);\n\n  return AccountUpdate;\n}(AbstractTransaction);\n\nmodule.exports = AccountUpdate;","map":null,"metadata":{},"sourceType":"script"}