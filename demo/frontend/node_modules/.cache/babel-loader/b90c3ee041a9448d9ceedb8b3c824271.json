{"ast":null,"code":"/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nconst AccountKeyPublic = require('./accountKeyPublic');\n\nconst AccountKeyMultiSig = require('./accountKeyMultiSig');\n\nconst utils = require('../../../../caver-utils');\n\nclass AccountKeyRoleBased {\n  constructor(keyObj = {}) {\n    if (keyObj instanceof AccountKeyRoleBased) keyObj = keyObj.keys;\n    if (typeof keyObj !== 'object') throw new Error('RoleBasedKey should be created with Object');\n    validateKeyObject(keyObj);\n    this._transactionKey = makeAccountKey(keyObj.transactionKey);\n    this._updateKey = makeAccountKey(keyObj.updateKey);\n    this._feePayerKey = makeAccountKey(keyObj.feePayerKey);\n    this.type = AccountKeyEnum.ACCOUNT_KEY_ROLEBASED;\n  }\n\n  get defaultKey() {\n    const definedKey = this._transactionKey ? this._transactionKey : this._updateKey ? this._updateKey : this._feePayerKey ? this._feePayerKey : undefined;\n    if (!definedKey) throw new Error('There is no key defined in AccountKeyRoleBased.');\n    return definedKey.defaultKey;\n  }\n\n  get keys() {\n    const keys = {};\n    if (this._transactionKey !== undefined) keys.transactionKey = this._transactionKey.keys;\n    if (this._updateKey !== undefined) keys.updateKey = this._updateKey.keys;\n    if (this._feePayerKey !== undefined) keys.feePayerKey = this._feePayerKey.keys;\n    return keys;\n  }\n\n  get transactionKey() {\n    if (!this._transactionKey) return undefined;\n    return this._transactionKey.keys;\n  }\n\n  get updateKey() {\n    if (!this._updateKey) return undefined;\n    return this._updateKey.keys;\n  }\n\n  get feePayerKey() {\n    if (!this._feePayerKey) return undefined;\n    return this._feePayerKey.keys;\n  }\n\n  toPublicKey(toPublicKeyFunc) {\n    const returnObject = {};\n    if (this._transactionKey !== undefined) returnObject.transactionKey = this._transactionKey.toPublicKey(toPublicKeyFunc);\n    if (this._updateKey !== undefined) returnObject.updateKey = this._updateKey.toPublicKey(toPublicKeyFunc);\n    if (this._feePayerKey !== undefined) returnObject.feePayerKey = this._feePayerKey.toPublicKey(toPublicKeyFunc);\n    return returnObject;\n  }\n\n  update(keys) {\n    // In the case of AccountKeyRoleBased, the key that does not update is not defined.\n    // To handle this case, when updating, only update the key for the defined role.\n    if (keys._transactionKey) this._transactionKey = keys._transactionKey;\n    if (keys._updateKey) this._updateKey = keys._updateKey;\n    if (keys._feePayerKey) this._feePayerKey = keys._feePayerKey;\n  }\n\n}\n\nfunction makeAccountKey(key) {\n  if (key === undefined) return undefined;\n  if (Array.isArray(key) || key instanceof AccountKeyMultiSig) return new AccountKeyMultiSig(key);\n  if (typeof key !== 'string') throw new Error('Invalid account key type');\n  return new AccountKeyPublic(key);\n}\n\nfunction validateKeyObject(keyObject) {\n  const key = Object.keys(keyObject);\n  if (key.length === 0) throw new Error('Failed to create AccountKeyRoleBased: empty object');\n  key.map(role => {\n    if (!utils.isValidRole(role)) throw new Error(`Failed to create AccountKeyRoleBased. Invalid role is defined : ${role}`);\n\n    if (Array.isArray(keyObject[role])) {\n      for (let p of keyObject[role]) {\n        const parsed = utils.parsePrivateKey(p);\n        p = parsed.privateKey;\n        if (!utils.isValidPrivateKey(p)) throw new Error(`Failed to create AccountKeyRoleBased. Invalid private key : ${p}`);\n      }\n    } else if (!utils.isValidPrivateKey(keyObject[role])) throw new Error(`Failed to create AccountKeyRoleBased. Invalid private key : ${keyObject[role]}`);\n  });\n}\n\nmodule.exports = AccountKeyRoleBased;","map":null,"metadata":{},"sourceType":"script"}