{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/* eslint-disable class-methods-use-this */\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar lodash = require('lodash');\n\nvar fs = require('fs');\n\nvar IPFSAPI = require('ipfs-api');\n\nvar multihash = require('multihashes');\n/**\n * Representing a class for uploading and loading files to IPFS.\n * @class\n */\n\n\nvar IPFS =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  /**\n   * Create an IPFS.\n   * @param {string} host The host url.\n   * @param {number} port The port number to use.\n   * @param {boolean} ssl With or without SSL.\n   */\n  function IPFS(host, port, ssl) {\n    _classCallCheck(this, IPFS);\n\n    if (host !== undefined && port !== undefined && ssl !== undefined) {\n      this.setIPFSNode(host, port, ssl);\n    }\n  }\n  /**\n   * sets a IPFS Node\n   *\n   * @param {string} host The host url.\n   * @param {number} port The port number to use.\n   * @param {boolean} ssl With or without SSL.\n   * @return {void}\n   */\n\n\n  _createClass(IPFS, [{\n    key: \"setIPFSNode\",\n    value: function setIPFSNode(host, port, ssl) {\n      var protocol = ssl ? 'https' : 'http';\n      this.ipfs = new IPFSAPI({\n        host: host,\n        port: port,\n        protocol: protocol\n      });\n    }\n    /**\n     * adds a file to IPFS\n     *\n     * @param {string|Buffer} data The file path string or file contents.\n     * @return {string}\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var ret;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.ipfs) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Please set IPFS Node through 'caver.ipfs.setIPFSNode'.\");\n\n              case 2:\n                // Read file\n                if (lodash.isString(data)) data = fs.readFileSync(data);\n\n                if (lodash.isBuffer(data)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid data: \".concat(data));\n\n              case 5:\n                _context.next = 7;\n                return this.ipfs.add(data);\n\n              case 7:\n                ret = _context.sent;\n                return _context.abrupt(\"return\", ret[0].hash);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * gets a file from IPFS\n     *\n     * @param {string} hash The file hash string.\n     * @return {Buffer}\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(hash) {\n        var ret;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.ipfs) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Please set IPFS Node through 'caver.ipfs.setIPFSNode'.\");\n\n              case 2:\n                _context2.next = 4;\n                return this.ipfs.cat(hash);\n\n              case 4:\n                ret = _context2.sent;\n                return _context2.abrupt(\"return\", ret);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x2) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * converts a hash to hex format.\n     *\n     * @param {string} hash The file hash string.\n     * @return {string}\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex(hash) {\n      var buf = multihash.fromB58String(hash);\n      return \"0x\".concat(multihash.toHexString(buf));\n    }\n    /**\n     * converts from a hex format.\n     *\n     * @param {string} hash The file hash string in hex format.\n     * @return {string}\n     */\n\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(contentHash) {\n      var hex = contentHash.substring(2);\n      var buf = multihash.fromHexString(hex);\n      return multihash.toB58String(buf);\n    }\n  }]);\n\n  return IPFS;\n}();\n\nmodule.exports = IPFS;","map":null,"metadata":{},"sourceType":"script"}