{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n/**\n * Representing an options for AccountKeyWeightedMultiSig.\n * This class will define threshold and weights.\n * @class\n */\n\n\nvar WeightedMultiSigOptions =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  _createClass(WeightedMultiSigOptions, null, [{\n    key: \"fromObject\",\n\n    /**\n     * Creates an instance of WeightedMultiSigOptions.\n     * @param {object} options - An object which defines 'threshold' and 'weights'.\n     * @return {WeightedMultiSigOptions}\n     */\n    value: function fromObject(options) {\n      // To support the previous options format(threshold and weight)\n      if (options.weight && !options.weights) {\n        options.weights = options.weight;\n        delete options.weight;\n      } // Returns empty WeightedMultiSigOptions if options not define threshold and weights like '{}'\n\n\n      if (options.threshold === undefined && options.weights === undefined) return new WeightedMultiSigOptions();\n      if (options.threshold === undefined || options.weights === undefined) throw new Error(\"Invalid object for creating WeightedMultiSigOptions. 'threshold' and 'weights' should be defined.\");\n      return new WeightedMultiSigOptions(options.threshold, options.weights);\n    }\n    /**\n     * Creates an instance of WeightedMultiSigOptions.\n     * @param {number} threshold - a threshold\n     * @param {Array.<number>} weights - an array of weight of key\n     */\n\n  }]);\n\n  function WeightedMultiSigOptions(threshold, weights) {\n    _classCallCheck(this, WeightedMultiSigOptions);\n\n    if (threshold !== undefined && weights === undefined || threshold === undefined && weights !== undefined) {\n      throw new Error(\"For creating an WeightedMultiSigOptions, 'threshold' and 'weights' should be defined.\");\n    }\n\n    if (threshold !== undefined) this.threshold = threshold;\n    if (weights !== undefined) this.weights = weights;\n  }\n  /**\n   * @type {number}\n   */\n\n\n  _createClass(WeightedMultiSigOptions, [{\n    key: \"isEmpty\",\n\n    /**\n     * Returns 'true' if WeightedMultiSigOptions is empty.\n     * @return {Boolean}\n     */\n    value: function isEmpty() {\n      return this.threshold === undefined && this.weights === undefined;\n    }\n  }, {\n    key: \"threshold\",\n    get: function get() {\n      return this._threshold;\n    },\n    set: function set(th) {\n      if (!_.isNumber(th)) throw new Error(\"The threshold must be number type.\");\n      if (!validateWeightedSum(th, this.weights)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n      this._threshold = th;\n    }\n    /**\n     * @type {Array.<number>}\n     */\n\n  }, {\n    key: \"weights\",\n    get: function get() {\n      return this._weights;\n    },\n    set: function set(weightArr) {\n      if (!_.isArray(weightArr)) throw new Error(\"weight should be an array that stores the weight of each public key.\");\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = weightArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var w = _step.value;\n          if (!_.isNumber(w)) throw new Error(\"The weight of each key must be number type.\");\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (!validateWeightedSum(this.threshold, weightArr)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n      this._weights = weightArr;\n    }\n  }]);\n\n  return WeightedMultiSigOptions;\n}();\n/**\n * validates threshold and sum of weights.\n * @param {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\n * @param {Array.<number>} weights - An array of weights.\n * @return {Boolean}\n */\n\n\nfunction validateWeightedSum(threshold, weights) {\n  if (threshold === undefined || weights === undefined) return true;\n  var weightSum = 0;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = weights[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var w = _step2.value;\n      weightSum += w;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  if (threshold > weightSum) return false;\n  return true;\n}\n\nmodule.exports = WeightedMultiSigOptions;","map":null,"metadata":{},"sourceType":"script"}