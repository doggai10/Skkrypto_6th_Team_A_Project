{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nvar MAX_MULTISIG_KEY_LENGTH = 10;\n\nvar AccountKeyMultiSig =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AccountKeyMultiSig(keys) {\n    _classCallCheck(this, AccountKeyMultiSig);\n\n    if (keys instanceof AccountKeyMultiSig) keys = keys.keys;\n    if (!Array.isArray(keys)) throw new Error('To create AccountKeyMultiSig, an array of private key strings is required.');\n    if (keys.length === 0) throw new Error('Empty array.');\n    if (keys.length > MAX_MULTISIG_KEY_LENGTH) throw new Error(\"The maximum number of keys is \".concat(MAX_MULTISIG_KEY_LENGTH, \".\"));\n    if (isDuple(keys)) throw new Error('There is a duplicate key.');\n    this._keys = keys;\n    this.type = AccountKeyEnum.ACCOUNT_KEY_MULTISIG;\n  }\n\n  _createClass(AccountKeyMultiSig, [{\n    key: \"toPublicKey\",\n    value: function toPublicKey(toPublicKeyFunc) {\n      var keys = [];\n\n      for (var i = 0; i < this._keys.length; i++) {\n        var key = this._keys[i];\n        keys.push(toPublicKeyFunc(key));\n      }\n\n      return keys;\n    }\n  }, {\n    key: \"update\",\n    value: function update(keys) {\n      this._keys = keys.keys;\n    }\n  }, {\n    key: \"defaultKey\",\n    get: function get() {\n      return this._keys[0];\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"transactionKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"updateKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"feePayerKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }]);\n\n  return AccountKeyMultiSig;\n}();\n\nfunction isDuple(keys) {\n  var map = new Map();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      if (map.get(key) !== undefined) return true;\n      map.set(key, true);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = AccountKeyMultiSig;","map":null,"metadata":{},"sourceType":"script"}