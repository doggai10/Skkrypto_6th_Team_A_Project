{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n/**\n * Representing an AccountKeyLegacy.\n * @class\n */\n\n\nvar AccountKeyLegacy =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AccountKeyLegacy() {\n    _classCallCheck(this, AccountKeyLegacy);\n  }\n\n  _createClass(AccountKeyLegacy, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns an RLP-encoded AccountKeyLegacy string.\n     * @return {string}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    value: function getRLPEncoding() {\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG;\n    }\n  }], [{\n    key: \"decode\",\n\n    /**\n     * Decodes an RLP-encoded AccountKeyLegacy string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyLegacy string.\n     * @return {AccountKeyLegacy}\n     */\n    value: function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) throw new Error(\"Cannot decode to AccountKeyLegacy. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG, \": \").concat(rlpEncodedKey));\n      return new AccountKeyLegacy();\n    }\n  }]);\n\n  return AccountKeyLegacy;\n}();\n\nmodule.exports = AccountKeyLegacy;","map":null,"metadata":{},"sourceType":"script"}