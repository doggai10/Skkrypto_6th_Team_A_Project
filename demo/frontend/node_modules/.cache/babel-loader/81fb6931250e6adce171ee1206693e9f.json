{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring)) throw new Error(\"Cannot decode to FeeDelegatedChainDataAnchoring. The prefix must be \".concat(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 8),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      from = _RLP$decode2[3],\n      input = _RLP$decode2[4],\n      signatures = _RLP$decode2[5],\n      feePayer = _RLP$decode2[6],\n      feePayerSignatures = _RLP$decode2[7];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from: from,\n    input: input,\n    signatures: signatures,\n    feePayer: feePayer,\n    feePayerSignatures: feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedchaindataanchoring to see more detail.\n * @class\n */\n\n\nvar FeeDelegatedChainDataAnchoring =\n/*#__PURE__*/\nfunction (_AbstractFeeDelegated) {\n  \"use strict\";\n\n  _inherits(FeeDelegatedChainDataAnchoring, _AbstractFeeDelegated);\n\n  _createClass(FeeDelegatedChainDataAnchoring, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedChainDataAnchoring transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated chain data anchoring transaction.\n     * @return {FeeDelegatedChainDataAnchoring}\n     */\n    value: function decode(rlpEncoded) {\n      return new FeeDelegatedChainDataAnchoring(_decode(rlpEncoded));\n    }\n    /**\n     * Creates a fee delegated chain data anchoring transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n\n  }]);\n\n  function FeeDelegatedChainDataAnchoring(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, FeeDelegatedChainDataAnchoring);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeeDelegatedChainDataAnchoring).call(this, TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring, createTxObj));\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    _this.input = createTxObj.input || createTxObj.data;\n    return _this;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(FeeDelegatedChainDataAnchoring, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      var feePayerSignatures = this.feePayerSignatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input, signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input]);\n    }\n  }, {\n    key: \"input\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(input) {\n      if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n      this._input = utils.addHexPrefix(input);\n    }\n  }]);\n\n  return FeeDelegatedChainDataAnchoring;\n}(AbstractFeeDelegatedTransaction);\n\nmodule.exports = FeeDelegatedChainDataAnchoring;","map":null,"metadata":{},"sourceType":"script"}