{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/demo/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar AbstractKeyring = require('./abstractKeyring');\n\nvar utils = require('../../../caver-utils');\n\nvar PrivateKey = require('./privateKey');\n\nvar _require = require('./keyringHelper'),\n    KEY_ROLE = _require.KEY_ROLE;\n\nvar Account = require('../../../caver-account');\n\nvar _require2 = require('./keyringHelper'),\n    validateForSigning = _require2.validateForSigning,\n    validateIndexWithKeys = _require2.validateIndexWithKeys,\n    encryptKey = _require2.encryptKey,\n    formatEncrypted = _require2.formatEncrypted;\n/**\n * representing a Keyring which includes `address` and a `private key`.\n * @class\n */\n\n\nvar SingleKeyring =\n/*#__PURE__*/\nfunction (_AbstractKeyring) {\n  \"use strict\";\n\n  _inherits(SingleKeyring, _AbstractKeyring);\n\n  /**\n   * creates a SingleKeyring.\n   * @param {string} address - The address of keyring.\n   * @param {string|PrivateKey} key - The key to use in SingleKeyring.\n   */\n  function SingleKeyring(address, key) {\n    var _this;\n\n    _classCallCheck(this, SingleKeyring);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SingleKeyring).call(this, address));\n    _this.key = key;\n    return _this;\n  }\n  /**\n   * @type {PrivateKey}\n   */\n\n\n  _createClass(SingleKeyring, [{\n    key: \"getPublicKey\",\n\n    /**\n     * returns public key string.\n     *\n     * @return {string}\n     */\n    value: function getPublicKey() {\n      return this.key.getPublicKey();\n    }\n    /**\n     * returns a copied singleKeyring instance\n     *\n     * @return {SingleKeyring}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new SingleKeyring(this.address, this.key);\n    }\n    /**\n     * signs with transactionHash with a key and returns signature(s).\n     *\n     * @param {string} transactionHash The hash of transaction.\n     * @param {string|number} chainId The chainId specific to the network.\n     * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n     * @param {number} [index] The index of the key to be used. If index is undefined, all private keys in keyring will be used.\n     * @return {Array.<string>|Array.<Array.<string>>}\n     */\n\n  }, {\n    key: \"sign\",\n    value: function sign(transactionHash, chainId, role, index) {\n      validateForSigning(transactionHash, chainId);\n      var key = this.getKeyByRole(role);\n\n      if (index !== undefined) {\n        validateIndexWithKeys(index, 1);\n        return key.sign(transactionHash, chainId);\n      }\n\n      return [key.sign(transactionHash, chainId)];\n    }\n    /**\n     * signs with hashed message and returns result object that includes `signatures`, `message` and `messageHash`\n     *\n     * @param {string} message The message string to sign.\n     * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n     * @param {number} [index] The index of the key to be used.\n     * @return {object}\n     */\n\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message, role, index) {\n      if (role === undefined) throw new Error(\"role should be defined for signMessage. Please use 'caver.wallet.keyring.role'.\");\n      var messageHash = utils.hashMessage(message);\n      var key = this.getKeyByRole(role);\n      var signatures = [];\n\n      if (index !== undefined) {\n        validateIndexWithKeys(index, 1);\n      }\n\n      signatures.push(key.signMessage(messageHash));\n      return {\n        messageHash: messageHash,\n        signatures: signatures,\n        message: message\n      };\n    }\n    /**\n     * returns keys by role. If the key of the role passed as parameter is empty, the default key is returned.\n     *\n     * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n     * @return {Array.<PrivateKey>}\n     */\n\n  }, {\n    key: \"getKeyByRole\",\n    value: function getKeyByRole(role) {\n      if (role === undefined) throw new Error(\"role should be defined.\");\n      if (role >= KEY_ROLE.roleLast || role < 0) throw new Error(\"Invalid role number: \".concat(role));\n      return this.key;\n    }\n    /**\n     * returns KlaytnWalletKey format. If keyring uses more than one private key, this function will throw error.\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getKlaytnWalletKey\",\n    value: function getKlaytnWalletKey() {\n      return \"\".concat(this.key.privateKey, \"0x00\").concat(this.address);\n    }\n    /**\n     * returns an instance of Account.\n     *\n     * @return {Account}\n     */\n\n  }, {\n    key: \"toAccount\",\n    value: function toAccount() {\n      if (!this.key) throw new Error(\"Failed to create Account instance: Empty key in keyring.\");\n      var publicKey = this.getPublicKey();\n      return Account.createWithAccountKeyPublic(this.address, publicKey);\n    }\n    /**\n     * encrypts a keyring and returns a keystore v4 object.\n     *\n     * @param {string} password The password to be used for encryption. The encrypted key store can be decrypted with this password.\n     * @param {object} options The options to use when encrypt a keyring. Also address can be defined specifically in options object.\n     * @return {object}\n     */\n\n    /**\n     * options can include below\n     * {\n     *   salt: ...,\n     *   iv: ...,\n     *   kdf: ...,\n     *   dklen: ...,\n     *   c: ...,\n     *   n: ...,\n     *   r: ...,\n     *   p: ...,\n     *   cipher: ...,\n     *   uuid: ...,\n     *   cipher: ...,\n     * }\n     */\n\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(password) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var keyring = [];\n      keyring = encryptKey(this.key, password, options);\n      return formatEncrypted(4, this.address, keyring, options);\n    }\n    /**\n     * encrypts a keyring and returns a keystore v3 object.\n     *\n     * @param {string} password The password to be used for keyring encryption. The encrypted key store can be decrypted with this password.\n     * @param {object} options The options to use when encrypt a keyring. See `keyring.encrypt` for more detail about options.\n     * @return {object}\n     */\n\n  }, {\n    key: \"encryptV3\",\n    value: function encryptV3(password, options) {\n      options = options || {};\n      var crypto = encryptKey(this.key, password, options)[0];\n      return formatEncrypted(3, this.address, crypto, options);\n    }\n    /**\n     * returns true if keyring has decoupled key.\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isDecoupled\",\n    value: function isDecoupled() {\n      return this.address.toLowerCase() !== this.key.getDerivedAddress().toLowerCase();\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      return this._key;\n    },\n    set: function set(keyInput) {\n      if (keyInput === null) {\n        this._key = null;\n        return;\n      }\n\n      this._key = keyInput instanceof PrivateKey ? keyInput : new PrivateKey(keyInput);\n    }\n  }]);\n\n  return SingleKeyring;\n}(AbstractKeyring);\n\nmodule.exports = SingleKeyring;","map":null,"metadata":{},"sourceType":"script"}