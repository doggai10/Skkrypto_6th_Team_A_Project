{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar _require = require('../../caver-core-requestmanager'),\n    Manager = _require.Manager,\n    BatchManager = _require.BatchManager;\n\nvar formatters = require('../../caver-core-helpers').formatters;\n\nvar Method = require('../../caver-core-method');\n\nvar utils = require('../../caver-utils'); // TODO : clarify what extend do\n// eslint-disable-next-line no-unused-vars\n\n\nvar extend = function extend(pkg) {\n  var ex = function ex(extension) {\n    var extendedObject = pkg;\n\n    if (extension.property) {\n      extendedObject = pkg[extension.property] = pkg[extension.property] || {};\n    }\n\n    if (extension.methods) {\n      extension.methods.forEach(function (method) {\n        if (!(method instanceof Method)) {\n          method = new Method(method);\n        }\n\n        method.attachToObject(extendedObject);\n        method.setRequestManager(pkg._requestManager);\n      });\n    }\n\n    return pkg;\n  };\n\n  ex.formatters = formatters;\n  ex.utils = utils;\n  ex.Method = Method;\n  return ex;\n};\n\nmodule.exports = {\n  packageInit: function packageInit(pkg, args) {\n    if (!pkg) throw new Error('You need to instantiate using the \"new\" keyword.'); // make property of pkg._provider, which can properly set providers\n\n    Object.defineProperty(pkg, 'currentProvider', {\n      get: function get() {\n        return pkg._provider;\n      },\n      set: function set(value) {\n        return pkg.setProvider(value);\n      },\n      enumerable: true,\n      configurable: true\n    }); // inherit from parent package or create a new RequestManager\n\n    if (args[0] && args[0]._requestManager) {\n      pkg._requestManager = args[0]._requestManager;\n    } else {\n      pkg._requestManager = new Manager(args[0], args[1]);\n    }\n\n    pkg.providers = Manager.providers;\n    pkg._provider = pkg._requestManager.provider; // add SETPROVIDER function (don't overwrite if already existing)\n\n    if (!pkg.setProvider) {\n      pkg.setProvider = function (provider, net) {\n        pkg._requestManager.setProvider(provider, net);\n\n        pkg._provider = pkg._requestManager.provider;\n        return true;\n      };\n    }\n\n    pkg.setRequestManager = function (manager) {\n      pkg._requestManager = manager;\n      pkg._provider = manager.provider;\n    }; // attach batch request creation\n\n\n    pkg.BatchRequest = BatchManager.bind(null, pkg._requestManager);\n  },\n  providers: Manager.providers\n};","map":null,"metadata":{},"sourceType":"script"}