{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n/**\n * Representing an AccountKeyPublic.\n * @class\n */\n\n\nvar AccountKeyPublic = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(AccountKeyPublic, null, [{\n    key: \"decode\",\n\n    /**\n     * Decodes an RLP-encoded AccountKeyPublic string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\n     * @return {AccountKeyPublic}\n     */\n    value: function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) throw new Error(\"Cannot decode to AccountKeyPublic. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG, \": \").concat(rlpEncodedKey));\n      var publicKey = RLP.decode(\"0x\".concat(rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)));\n      return new AccountKeyPublic(publicKey);\n    }\n    /**\n     * Creates AccountKeyPublic instance from x, y point\n     * @param {string} x - The x point.\n     * @param {string} y - The y point.\n     * @return {AccountKeyPublic}\n     */\n\n  }, {\n    key: \"fromXYPoint\",\n    value: function fromXYPoint(x, y) {\n      var xPoint = utils.leftPad(utils.stripHexPrefix(x), 64);\n      var yPoint = utils.leftPad(utils.stripHexPrefix(y), 64);\n      var pubKey = \"0x\".concat(xPoint + yPoint);\n      return new AccountKeyPublic(pubKey);\n    }\n    /**\n     * Creates AccountKeyPublic instance from public key string\n     * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\n     * @return {AccountKeyPublic}\n     */\n\n  }, {\n    key: \"fromPublicKey\",\n    value: function fromPublicKey(pubKey) {\n      return new AccountKeyPublic(pubKey);\n    }\n    /**\n     * Creates an instance of AccountKeyPublic.\n     * @param {string} publicKey - a public key\n     */\n\n  }]);\n\n  function AccountKeyPublic(publicKey) {\n    _classCallCheck(this, AccountKeyPublic);\n\n    this.publicKey = publicKey;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(AccountKeyPublic, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns an RLP-encoded AccountKeyPublic string.\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      var compressedPublicKey = utils.compressPublicKey(this.publicKey);\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2);\n    }\n    /**\n     * Returns the x and y coordinates of publicKey.\n     * @return {Array.<string>}\n     */\n\n  }, {\n    key: \"getXYPoint\",\n    value: function getXYPoint() {\n      return utils.xyPointFromPublicKey(this.publicKey);\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._publicKey;\n    },\n    set: function set(p) {\n      if (!utils.isValidPublicKey(p)) throw new Error(\"Invalid public key: \".concat(p));\n      this._publicKey = utils.addHexPrefix(p);\n    }\n  }]);\n\n  return AccountKeyPublic;\n}();\n\nmodule.exports = AccountKeyPublic;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyPublic.js"],"names":["RLP","require","utils","ACCOUNT_KEY_TAG","AccountKeyPublic","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_PUBLIC_TAG","Error","publicKey","decode","slice","length","x","y","xPoint","leftPad","stripHexPrefix","yPoint","pubKey","compressedPublicKey","compressPublicKey","encode","xyPointFromPublicKey","_publicKey","p","isValidPublicKey","module","exports"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;eAC4BA,OAAO,CAAC,oBAAD,C;IAA3BE,e,YAAAA,e;AAER;AACA;AACA;AACA;;;IACMC,gB;;;;;;AACF;AACJ;AACA;AACA;AACA;2BACkBC,a,EAAe;AACzBA,MAAAA,aAAa,GAAGH,KAAK,CAACI,YAAN,CAAmBD,aAAnB,CAAhB;AACA,UAAI,CAACA,aAAa,CAACE,UAAd,CAAyBJ,eAAe,CAACK,sBAAzC,CAAL,EACI,MAAM,IAAIC,KAAJ,iEACuDN,eAAe,CAACK,sBADvE,eACkGH,aADlG,EAAN;AAIJ,UAAMK,SAAS,GAAGV,GAAG,CAACW,MAAJ,aAAgBN,aAAa,CAACO,KAAd,CAAoBT,eAAe,CAACK,sBAAhB,CAAuCK,MAA3D,CAAhB,EAAlB;AACA,aAAO,IAAIT,gBAAJ,CAAqBM,SAArB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;gCACuBI,C,EAAGC,C,EAAG;AACrB,UAAMC,MAAM,GAAGd,KAAK,CAACe,OAAN,CAAcf,KAAK,CAACgB,cAAN,CAAqBJ,CAArB,CAAd,EAAuC,EAAvC,CAAf;AACA,UAAMK,MAAM,GAAGjB,KAAK,CAACe,OAAN,CAAcf,KAAK,CAACgB,cAAN,CAAqBH,CAArB,CAAd,EAAuC,EAAvC,CAAf;AACA,UAAMK,MAAM,eAAQJ,MAAM,GAAGG,MAAjB,CAAZ;AACA,aAAO,IAAIf,gBAAJ,CAAqBgB,MAArB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;;kCACyBA,M,EAAQ;AACzB,aAAO,IAAIhB,gBAAJ,CAAqBgB,MAArB,CAAP;AACH;AAED;AACJ;AACA;AACA;;;;AACI,4BAAYV,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;AAED;AACJ;AACA;;;;;;AAUI;AACJ;AACA;AACA;qCACqB;AACb,UAAMW,mBAAmB,GAAGnB,KAAK,CAACoB,iBAAN,CAAwB,KAAKZ,SAA7B,CAA5B;AACA,aAAOP,eAAe,CAACK,sBAAhB,GAAyCR,GAAG,CAACuB,MAAJ,CAAWF,mBAAX,EAAgCT,KAAhC,CAAsC,CAAtC,CAAhD;AACH;AAED;AACJ;AACA;AACA;;;;iCACiB;AACT,aAAOV,KAAK,CAACsB,oBAAN,CAA2B,KAAKd,SAAhC,CAAP;AACH;;;wBAxBe;AACZ,aAAO,KAAKe,UAAZ;AACH,K;sBAEaC,C,EAAG;AACb,UAAI,CAACxB,KAAK,CAACyB,gBAAN,CAAuBD,CAAvB,CAAL,EAAgC,MAAM,IAAIjB,KAAJ,+BAAiCiB,CAAjC,EAAN;AAChC,WAAKD,UAAL,GAAkBvB,KAAK,CAACI,YAAN,CAAmBoB,CAAnB,CAAlB;AACH;;;;;;AAoBLE,MAAM,CAACC,OAAP,GAAiBzB,gBAAjB","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst utils = require('../../../caver-utils')\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\n\n/**\n * Representing an AccountKeyPublic.\n * @class\n */\nclass AccountKeyPublic {\n    /**\n     * Decodes an RLP-encoded AccountKeyPublic string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\n     * @return {AccountKeyPublic}\n     */\n    static decode(rlpEncodedKey) {\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG))\n            throw new Error(\n                `Cannot decode to AccountKeyPublic. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG}: ${rlpEncodedKey}`\n            )\n\n        const publicKey = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)}`)\n        return new AccountKeyPublic(publicKey)\n    }\n\n    /**\n     * Creates AccountKeyPublic instance from x, y point\n     * @param {string} x - The x point.\n     * @param {string} y - The y point.\n     * @return {AccountKeyPublic}\n     */\n    static fromXYPoint(x, y) {\n        const xPoint = utils.leftPad(utils.stripHexPrefix(x), 64)\n        const yPoint = utils.leftPad(utils.stripHexPrefix(y), 64)\n        const pubKey = `0x${xPoint + yPoint}`\n        return new AccountKeyPublic(pubKey)\n    }\n\n    /**\n     * Creates AccountKeyPublic instance from public key string\n     * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\n     * @return {AccountKeyPublic}\n     */\n    static fromPublicKey(pubKey) {\n        return new AccountKeyPublic(pubKey)\n    }\n\n    /**\n     * Creates an instance of AccountKeyPublic.\n     * @param {string} publicKey - a public key\n     */\n    constructor(publicKey) {\n        this.publicKey = publicKey\n    }\n\n    /**\n     * @type {string}\n     */\n    get publicKey() {\n        return this._publicKey\n    }\n\n    set publicKey(p) {\n        if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`)\n        this._publicKey = utils.addHexPrefix(p)\n    }\n\n    /**\n     * Returns an RLP-encoded AccountKeyPublic string.\n     * @return {string}\n     */\n    getRLPEncoding() {\n        const compressedPublicKey = utils.compressPublicKey(this.publicKey)\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2)\n    }\n\n    /**\n     * Returns the x and y coordinates of publicKey.\n     * @return {Array.<string>}\n     */\n    getXYPoint() {\n        return utils.xyPointFromPublicKey(this.publicKey)\n    }\n}\n\nmodule.exports = AccountKeyPublic\n"]},"metadata":{},"sourceType":"script"}