{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar AccountKeyPublic = require('../accountKey/accountKeyPublic');\n\nvar AccountKeyMultiSig = require('../accountKey/accountKeyMultiSig');\n\nvar AccountKeyRoleBased = require('../accountKey/accountKeyRoleBased');\n\nvar isAddress = require('../../../../caver-utils/src/utils').isAddress;\n\nvar addHexPrefix = require('../../../../caver-utils').addHexPrefix;\n\nvar Account = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(Account, null, [{\n    key: \"fromObject\",\n    value: function fromObject(obj) {\n      return new Account(obj.address, new AccountKeyPublic(obj.privateKey));\n    }\n  }, {\n    key: \"isAccountKey\",\n    value: function isAccountKey(accountKey) {\n      var isAccountKey = false;\n      if (accountKey instanceof AccountKeyPublic) isAccountKey = true;\n      if (accountKey instanceof AccountKeyMultiSig) isAccountKey = true;\n      if (accountKey instanceof AccountKeyRoleBased) isAccountKey = true;\n      return isAccountKey;\n    }\n  }]);\n\n  function Account(address, accountKey) {\n    _classCallCheck(this, Account);\n\n    if (!address || !accountKey) throw new Error('Failed to create Account. address and accountKey are needed to create Account.');\n    if (!isAddress(address)) throw new Error(\"Invalid address : \".concat(address));\n    if (!Account.isAccountKey(accountKey)) throw new Error('Invalid accountKey.');\n    address = addHexPrefix(address);\n    Object.defineProperty(this, 'address', {\n      get: function get() {\n        return address;\n      },\n      set: function set(addressInput) {\n        if (!isAddress(addressInput)) throw new Error(\"Invalid address : \".concat(addressInput));\n        address = addHexPrefix(addressInput);\n      },\n      enumerable: true\n    });\n    Object.defineProperty(this, 'accountKey', {\n      get: function get() {\n        return accountKey;\n      },\n      set: function set(accountKeyInput) {\n        if (!Account.isAccountKey(accountKeyInput) && accountKeyInput !== null) throw new Error('Invalid accountKey.');\n\n        if (accountKey === null || accountKeyInput === null) {\n          accountKey = accountKeyInput;\n        } else if (accountKey.type !== accountKeyInput.type) {\n          accountKey = accountKeyInput;\n        } else {\n          accountKey.update(accountKeyInput);\n        }\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(this, 'privateKey', {\n      get: function get() {\n        return this.accountKey.defaultKey;\n      },\n      set: function set() {\n        throw new Error('The privateKey cannot be modified. The privateKey is set to default key of accountKey, so update accountKey to modify the privateKey.');\n      },\n      enumerable: true\n    });\n  }\n\n  _createClass(Account, [{\n    key: \"toPublicKey\",\n    value: function toPublicKey(toPublicKeyFunc) {\n      return this.accountKey.toPublicKey(toPublicKeyFunc);\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return this.accountKey.keys;\n    }\n  }, {\n    key: \"accountKeyType\",\n    get: function get() {\n      return this.accountKey.type;\n    }\n  }, {\n    key: \"transactionKey\",\n    get: function get() {\n      return this.accountKey.transactionKey;\n    }\n  }, {\n    key: \"updateKey\",\n    get: function get() {\n      return this.accountKey.updateKey;\n    }\n  }, {\n    key: \"feePayerKey\",\n    get: function get() {\n      return this.accountKey.feePayerKey;\n    }\n  }]);\n\n  return Account;\n}();\n\nmodule.exports = Account;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/account/account.js"],"names":["AccountKeyPublic","require","AccountKeyMultiSig","AccountKeyRoleBased","isAddress","addHexPrefix","Account","obj","address","privateKey","accountKey","isAccountKey","Error","Object","defineProperty","get","set","addressInput","enumerable","accountKeyInput","type","update","configurable","defaultKey","toPublicKeyFunc","toPublicKey","keys","transactionKey","updateKey","feePayerKey","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst AccountKeyPublic = require('../accountKey/accountKeyPublic')\nconst AccountKeyMultiSig = require('../accountKey/accountKeyMultiSig')\nconst AccountKeyRoleBased = require('../accountKey/accountKeyRoleBased')\nconst isAddress = require('../../../../caver-utils/src/utils').isAddress\nconst addHexPrefix = require('../../../../caver-utils').addHexPrefix\n\nclass Account {\n    static fromObject(obj) {\n        return new Account(obj.address, new AccountKeyPublic(obj.privateKey))\n    }\n\n    static isAccountKey(accountKey) {\n        let isAccountKey = false\n        if (accountKey instanceof AccountKeyPublic) isAccountKey = true\n        if (accountKey instanceof AccountKeyMultiSig) isAccountKey = true\n        if (accountKey instanceof AccountKeyRoleBased) isAccountKey = true\n\n        return isAccountKey\n    }\n\n    constructor(address, accountKey) {\n        if (!address || !accountKey) throw new Error('Failed to create Account. address and accountKey are needed to create Account.')\n\n        if (!isAddress(address)) throw new Error(`Invalid address : ${address}`)\n        if (!Account.isAccountKey(accountKey)) throw new Error('Invalid accountKey.')\n\n        address = addHexPrefix(address)\n\n        Object.defineProperty(this, 'address', {\n            get: function() {\n                return address\n            },\n            set: function(addressInput) {\n                if (!isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`)\n                address = addHexPrefix(addressInput)\n            },\n            enumerable: true,\n        })\n\n        Object.defineProperty(this, 'accountKey', {\n            get: function() {\n                return accountKey\n            },\n            set: function(accountKeyInput) {\n                if (!Account.isAccountKey(accountKeyInput) && accountKeyInput !== null) throw new Error('Invalid accountKey.')\n\n                if (accountKey === null || accountKeyInput === null) {\n                    accountKey = accountKeyInput\n                } else if (accountKey.type !== accountKeyInput.type) {\n                    accountKey = accountKeyInput\n                } else {\n                    accountKey.update(accountKeyInput)\n                }\n            },\n            enumerable: true,\n            configurable: true,\n        })\n\n        Object.defineProperty(this, 'privateKey', {\n            get: function() {\n                return this.accountKey.defaultKey\n            },\n            set: function() {\n                throw new Error(\n                    'The privateKey cannot be modified. The privateKey is set to default key of accountKey, so update accountKey to modify the privateKey.'\n                )\n            },\n            enumerable: true,\n        })\n    }\n\n    get keys() {\n        return this.accountKey.keys\n    }\n\n    get accountKeyType() {\n        return this.accountKey.type\n    }\n\n    get transactionKey() {\n        return this.accountKey.transactionKey\n    }\n\n    get updateKey() {\n        return this.accountKey.updateKey\n    }\n\n    get feePayerKey() {\n        return this.accountKey.feePayerKey\n    }\n\n    toPublicKey(toPublicKeyFunc) {\n        return this.accountKey.toPublicKey(toPublicKeyFunc)\n    }\n}\n\nmodule.exports = Account\n"]},"metadata":{},"sourceType":"script"}