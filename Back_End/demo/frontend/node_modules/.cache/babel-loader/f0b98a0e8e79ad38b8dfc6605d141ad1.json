{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar utils = require('../../caver-utils');\n\nvar AccountKeyDecoder = require('./accountKey/accountKeyDecoder');\n\nvar AccountKeyLegacy = require('./accountKey/accountKeyLegacy');\n\nvar AccountKeyPublic = require('./accountKey/accountKeyPublic');\n\nvar AccountKeyFail = require('./accountKey/accountKeyFail');\n\nvar AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig');\n\nvar AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased');\n\nvar WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions');\n\nvar WeightedPublicKey = require('./accountKey/weightedPublicKey');\n\nvar _require = require('../../caver-wallet/src/keyring/keyringHelper'),\n    isMultipleKeysFormat = _require.isMultipleKeysFormat,\n    isRoleBasedKeysFormat = _require.isRoleBasedKeysFormat;\n\nfunction isAccountKeyInstance(accountKey) {\n  if (!(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig) && !(accountKey instanceof AccountKeyRoleBased)) return false;\n  return true;\n}\n/**\n * Representing an Account which includes information for account update.\n * @class\n */\n\n\nvar Account = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(Account, null, [{\n    key: \"create\",\n\n    /**\n     * creates an Account instance\n     *\n     * `caver.account.create('0x${address in hex}', '0x{public key}')`\n     * `caver.account.create('0x${address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1,1] })`\n     * `caver.account.create('0x${address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1,1] }, {}])`\n     *\n     * @param {string} address The address of Account.\n     * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\n     * @param {WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\n     * @return {Account}\n     */\n    value: function create(address, accountKey, options) {\n      if (_.isString(accountKey)) {\n        if (utils.isValidPublicKey(accountKey)) {\n          return Account.createWithAccountKeyPublic(address, accountKey);\n        }\n\n        return Account.createFromRLPEncoding(address, accountKey);\n      }\n\n      if (isMultipleKeysFormat(accountKey)) {\n        if (accountKey.length === 0) throw new Error(\"Empty accountKey array.\");\n        return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options);\n      }\n\n      if (isRoleBasedKeysFormat(accountKey)) {\n        return Account.createWithAccountKeyRoleBased(address, accountKey, options);\n      }\n\n      throw new Error(\"Unsupported accountKey type: \".concat(typeof accountKey));\n    }\n    /**\n     * creates an Account instance from RLP-encoded account key\n     *\n     * @param {string} address The address of Account.\n     * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\n     * @return {Account}\n     */\n\n  }, {\n    key: \"createFromRLPEncoding\",\n    value: function createFromRLPEncoding(address, rlpEncodedKey) {\n      var accountKey = AccountKeyDecoder.decode(rlpEncodedKey);\n      return new Account(address, accountKey);\n    }\n    /**\n     * creates an Account instance which has AccountKeyLegacy as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @return {Account}\n     */\n\n  }, {\n    key: \"createWithAccountKeyLegacy\",\n    value: function createWithAccountKeyLegacy(address) {\n      return new Account(address, new AccountKeyLegacy());\n    }\n    /**\n     * creates an Account instance which has AccountKeyPublic as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {string} publicKey The public key string.\n     * @return {Account}\n     */\n\n  }, {\n    key: \"createWithAccountKeyPublic\",\n    value: function createWithAccountKeyPublic(address, publicKey) {\n      return new Account(address, new AccountKeyPublic(publicKey));\n    }\n    /**\n     * creates an Account instance which has AccountKeyFail as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @return {Account}\n     */\n\n  }, {\n    key: \"createWithAccountKeyFail\",\n    value: function createWithAccountKeyFail(address) {\n      return new Account(address, new AccountKeyFail());\n    }\n    /**\n     * creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {Array} publicKeyArray The array that includes multiple public key strings.\n     * @param {Object} [options] The object that includes threshold and weight array.\n     * @return {Account}\n     */\n\n  }, {\n    key: \"createWithAccountKeyWeightedMultiSig\",\n    value: function createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\n      return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options));\n    }\n    /**\n     * creates an Account instance which has AccountKeyRoleBased as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {Array} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\n     * @param {Array} [options] An array that contains objects with threshold and weight array defined for each role.\n     * @return {Account}\n     */\n\n  }, {\n    key: \"createWithAccountKeyRoleBased\",\n    value: function createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\n      return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options));\n    }\n    /**\n     * Create an account.\n     * @param {string} address - The address of account.\n     * @param {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} accountKey - The accountKey of account.\n     */\n\n  }]);\n\n  function Account(address, accountKey) {\n    _classCallCheck(this, Account);\n\n    this.address = address;\n    this.accountKey = accountKey;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(Account, [{\n    key: \"getRLPEncodingAccountKey\",\n\n    /**\n     * returns RLP-encoded account key string.\n     *\n     * @return {string}\n     */\n    value: function getRLPEncodingAccountKey() {\n      return this._accountKey.getRLPEncoding();\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this._address;\n    },\n    set: function set(addressInput) {\n      if (!utils.isAddress(addressInput)) throw new Error(\"Invalid address : \".concat(addressInput));\n      this._address = utils.addHexPrefix(addressInput);\n    }\n    /**\n     * @type {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased}\n     */\n\n  }, {\n    key: \"accountKey\",\n    get: function get() {\n      return this._accountKey;\n    },\n    set: function set(accountKey) {\n      if (!isAccountKeyInstance(accountKey)) throw new Error(\"Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased\");\n      this._accountKey = accountKey;\n    }\n  }]);\n\n  return Account;\n}();\n\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions;\nAccount.accountKey = {\n  decode: AccountKeyDecoder.decode,\n  accountKeyLegacy: AccountKeyLegacy,\n  accountKeyPublic: AccountKeyPublic,\n  accountKeyFail: AccountKeyFail,\n  accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\n  accountKeyRoleBased: AccountKeyRoleBased,\n  weightedPublicKey: WeightedPublicKey\n};\nmodule.exports = Account;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-account/src/index.js"],"names":["_","require","utils","AccountKeyDecoder","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","AccountKeyWeightedMultiSig","AccountKeyRoleBased","WeightedMultiSigOptions","WeightedPublicKey","isMultipleKeysFormat","isRoleBasedKeysFormat","isAccountKeyInstance","accountKey","Account","address","options","isString","isValidPublicKey","createWithAccountKeyPublic","createFromRLPEncoding","length","Error","createWithAccountKeyWeightedMultiSig","createWithAccountKeyRoleBased","rlpEncodedKey","decode","publicKey","publicKeyArray","fromPublicKeysAndOptions","roledBasedPublicKeyArray","fromRoleBasedPublicKeysAndOptions","_accountKey","getRLPEncoding","_address","addressInput","isAddress","addHexPrefix","weightedMultiSigOptions","accountKeyLegacy","accountKeyPublic","accountKeyFail","accountKeyWeightedMultiSig","accountKeyRoleBased","weightedPublicKey","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst utils = require('../../caver-utils')\nconst AccountKeyDecoder = require('./accountKey/accountKeyDecoder')\nconst AccountKeyLegacy = require('./accountKey/accountKeyLegacy')\nconst AccountKeyPublic = require('./accountKey/accountKeyPublic')\nconst AccountKeyFail = require('./accountKey/accountKeyFail')\nconst AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig')\nconst AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased')\nconst WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions')\nconst WeightedPublicKey = require('./accountKey/weightedPublicKey')\nconst { isMultipleKeysFormat, isRoleBasedKeysFormat } = require('../../caver-wallet/src/keyring/keyringHelper')\n\nfunction isAccountKeyInstance(accountKey) {\n    if (\n        !(accountKey instanceof AccountKeyLegacy) &&\n        !(accountKey instanceof AccountKeyPublic) &&\n        !(accountKey instanceof AccountKeyFail) &&\n        !(accountKey instanceof AccountKeyWeightedMultiSig) &&\n        !(accountKey instanceof AccountKeyRoleBased)\n    )\n        return false\n\n    return true\n}\n/**\n * Representing an Account which includes information for account update.\n * @class\n */\nclass Account {\n    /**\n     * creates an Account instance\n     *\n     * `caver.account.create('0x${address in hex}', '0x{public key}')`\n     * `caver.account.create('0x${address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1,1] })`\n     * `caver.account.create('0x${address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1,1] }, {}])`\n     *\n     * @param {string} address The address of Account.\n     * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\n     * @param {WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\n     * @return {Account}\n     */\n    static create(address, accountKey, options) {\n        if (_.isString(accountKey)) {\n            if (utils.isValidPublicKey(accountKey)) {\n                return Account.createWithAccountKeyPublic(address, accountKey)\n            }\n            return Account.createFromRLPEncoding(address, accountKey)\n        }\n\n        if (isMultipleKeysFormat(accountKey)) {\n            if (accountKey.length === 0) throw new Error(`Empty accountKey array.`)\n            return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options)\n        }\n        if (isRoleBasedKeysFormat(accountKey)) {\n            return Account.createWithAccountKeyRoleBased(address, accountKey, options)\n        }\n\n        throw new Error(`Unsupported accountKey type: ${typeof accountKey}`)\n    }\n\n    /**\n     * creates an Account instance from RLP-encoded account key\n     *\n     * @param {string} address The address of Account.\n     * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\n     * @return {Account}\n     */\n    static createFromRLPEncoding(address, rlpEncodedKey) {\n        const accountKey = AccountKeyDecoder.decode(rlpEncodedKey)\n        return new Account(address, accountKey)\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyLegacy as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @return {Account}\n     */\n    static createWithAccountKeyLegacy(address) {\n        return new Account(address, new AccountKeyLegacy())\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyPublic as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {string} publicKey The public key string.\n     * @return {Account}\n     */\n    static createWithAccountKeyPublic(address, publicKey) {\n        return new Account(address, new AccountKeyPublic(publicKey))\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyFail as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @return {Account}\n     */\n    static createWithAccountKeyFail(address) {\n        return new Account(address, new AccountKeyFail())\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {Array} publicKeyArray The array that includes multiple public key strings.\n     * @param {Object} [options] The object that includes threshold and weight array.\n     * @return {Account}\n     */\n    static createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\n        return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options))\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyRoleBased as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {Array} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\n     * @param {Array} [options] An array that contains objects with threshold and weight array defined for each role.\n     * @return {Account}\n     */\n    static createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\n        return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options))\n    }\n\n    /**\n     * Create an account.\n     * @param {string} address - The address of account.\n     * @param {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} accountKey - The accountKey of account.\n     */\n    constructor(address, accountKey) {\n        this.address = address\n        this.accountKey = accountKey\n    }\n\n    /**\n     * @type {string}\n     */\n    get address() {\n        return this._address\n    }\n\n    set address(addressInput) {\n        if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`)\n\n        this._address = utils.addHexPrefix(addressInput)\n    }\n\n    /**\n     * @type {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased}\n     */\n    get accountKey() {\n        return this._accountKey\n    }\n\n    set accountKey(accountKey) {\n        if (!isAccountKeyInstance(accountKey))\n            throw new Error(\n                `Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased`\n            )\n\n        this._accountKey = accountKey\n    }\n\n    /**\n     * returns RLP-encoded account key string.\n     *\n     * @return {string}\n     */\n    getRLPEncodingAccountKey() {\n        return this._accountKey.getRLPEncoding()\n    }\n}\n\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions\n\nAccount.accountKey = {\n    decode: AccountKeyDecoder.decode,\n    accountKeyLegacy: AccountKeyLegacy,\n    accountKeyPublic: AccountKeyPublic,\n    accountKeyFail: AccountKeyFail,\n    accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\n    accountKeyRoleBased: AccountKeyRoleBased,\n    weightedPublicKey: WeightedPublicKey,\n}\n\nmodule.exports = Account\n"]},"metadata":{},"sourceType":"script"}