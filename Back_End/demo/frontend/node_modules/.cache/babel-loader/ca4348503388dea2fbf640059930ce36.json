{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar isValidRole = require('../../../../caver-utils').isValidRole;\n\nvar isValidPublicKey = require('../../../../caver-utils').isValidPublicKey;\n\nvar AccountForUpdate = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function AccountForUpdate(address, keyForUpdate, options) {\n    _classCallCheck(this, AccountForUpdate);\n\n    this.address = address;\n    this.keyForUpdate = keyFormatter(keyForUpdate, options);\n  }\n\n  _createClass(AccountForUpdate, [{\n    key: \"fillUpdateObject\",\n    value: function fillUpdateObject(updateObject) {\n      delete updateObject.key;\n      Object.assign(updateObject, this.keyForUpdate);\n    }\n  }]);\n\n  return AccountForUpdate;\n}();\n\nfunction keyFormatter(keyForUpdate, options) {\n  var keyObject = {};\n\n  if (typeof keyForUpdate === 'string') {\n    if (options) throw new Error('Failed to keyFormatter for AccountForUpdate: AccountKeyPublic/legacyKey/failKey cannot have options');\n\n    switch (keyForUpdate) {\n      case 'legacyKey':\n        keyObject.legacyKey = true;\n        break;\n\n      case 'failKey':\n        keyObject.failKey = true;\n        break;\n\n      default:\n        if (!isValidPublicKey(keyForUpdate)) throw new Error('Invalid public key');\n        keyObject.publicKey = keyForUpdate;\n        break;\n    }\n  } else if (Array.isArray(keyForUpdate)) {\n    if (!options || !options.threshold || !options.weight) throw new Error('For AccountKeyMultiSig, threshold and weight should be defined in options object.');\n    if (!Array.isArray(options.weight)) throw new Error('The weight should be defined as a array.');\n    if (options.weight.length !== keyForUpdate.length) throw new Error('The length of keys in AccountKeyMultiSig and the length of weight array do not match.');\n    keyObject.multisig = {\n      threshold: options.threshold,\n      keys: []\n    };\n    var weightSum = 0;\n\n    for (var i = 0; i < keyForUpdate.length; i++) {\n      var key = keyForUpdate[i];\n      if (!isValidPublicKey(key)) throw new Error('Invalid public key');\n      keyObject.multisig.keys.push({\n        weight: options.weight[i],\n        publicKey: key\n      });\n      weightSum += options.weight[i];\n    }\n\n    if (weightSum < options.threshold) throw new Error('Invalid options for AccountKeyMultiSig: The sum of weights is less than the threshold.');\n  } else {\n    for (var _key in keyForUpdate) {\n      if (!isValidRole(_key)) throw new Error(\"Invalid role is defined: \".concat(_key));\n      options = options || {};\n\n      if (_key === 'transactionKey') {\n        keyObject.roleTransactionKey = keyFormatter(keyForUpdate[_key], options.transactionKey);\n      }\n\n      if (_key === 'updateKey') {\n        keyObject.roleAccountUpdateKey = keyFormatter(keyForUpdate[_key], options.updateKey);\n      }\n\n      if (_key === 'feePayerKey') {\n        keyObject.roleFeePayerKey = keyFormatter(keyForUpdate[_key], options.feePayerKey);\n      }\n    }\n  }\n\n  return keyObject;\n}\n\nmodule.exports = AccountForUpdate;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/account/accountForUpdate.js"],"names":["isValidRole","require","isValidPublicKey","AccountForUpdate","address","keyForUpdate","options","keyFormatter","updateObject","key","Object","assign","keyObject","Error","legacyKey","failKey","publicKey","Array","isArray","threshold","weight","length","multisig","keys","weightSum","i","push","roleTransactionKey","transactionKey","roleAccountUpdateKey","updateKey","roleFeePayerKey","feePayerKey","module","exports"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAAC,yBAAD,CAAP,CAAmCD,WAAvD;;AACA,IAAME,gBAAgB,GAAGD,OAAO,CAAC,yBAAD,CAAP,CAAmCC,gBAA5D;;IAEMC,gB;;;AACF,4BAAYC,OAAZ,EAAqBC,YAArB,EAAmCC,OAAnC,EAA4C;AAAA;;AACxC,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoBE,YAAY,CAACF,YAAD,EAAeC,OAAf,CAAhC;AACH;;;;qCAEgBE,Y,EAAc;AAC3B,aAAOA,YAAY,CAACC,GAApB;AACAC,MAAAA,MAAM,CAACC,MAAP,CAAcH,YAAd,EAA4B,KAAKH,YAAjC;AACH;;;;;;AAGL,SAASE,YAAT,CAAsBF,YAAtB,EAAoCC,OAApC,EAA6C;AACzC,MAAMM,SAAS,GAAG,EAAlB;;AAEA,MAAI,OAAOP,YAAP,KAAwB,QAA5B,EAAsC;AAClC,QAAIC,OAAJ,EAAa,MAAM,IAAIO,KAAJ,CAAU,qGAAV,CAAN;;AACb,YAAQR,YAAR;AACI,WAAK,WAAL;AACIO,QAAAA,SAAS,CAACE,SAAV,GAAsB,IAAtB;AACA;;AACJ,WAAK,SAAL;AACIF,QAAAA,SAAS,CAACG,OAAV,GAAoB,IAApB;AACA;;AACJ;AACI,YAAI,CAACb,gBAAgB,CAACG,YAAD,CAArB,EAAqC,MAAM,IAAIQ,KAAJ,CAAU,oBAAV,CAAN;AACrCD,QAAAA,SAAS,CAACI,SAAV,GAAsBX,YAAtB;AACA;AAVR;AAYH,GAdD,MAcO,IAAIY,KAAK,CAACC,OAAN,CAAcb,YAAd,CAAJ,EAAiC;AACpC,QAAI,CAACC,OAAD,IAAY,CAACA,OAAO,CAACa,SAArB,IAAkC,CAACb,OAAO,CAACc,MAA/C,EACI,MAAM,IAAIP,KAAJ,CAAU,mFAAV,CAAN;AACJ,QAAI,CAACI,KAAK,CAACC,OAAN,CAAcZ,OAAO,CAACc,MAAtB,CAAL,EAAoC,MAAM,IAAIP,KAAJ,CAAU,0CAAV,CAAN;AACpC,QAAIP,OAAO,CAACc,MAAR,CAAeC,MAAf,KAA0BhB,YAAY,CAACgB,MAA3C,EACI,MAAM,IAAIR,KAAJ,CAAU,uFAAV,CAAN;AAEJD,IAAAA,SAAS,CAACU,QAAV,GAAqB;AACjBH,MAAAA,SAAS,EAAEb,OAAO,CAACa,SADF;AAEjBI,MAAAA,IAAI,EAAE;AAFW,KAArB;AAKA,QAAIC,SAAS,GAAG,CAAhB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,YAAY,CAACgB,MAAjC,EAAyCI,CAAC,EAA1C,EAA8C;AAC1C,UAAMhB,GAAG,GAAGJ,YAAY,CAACoB,CAAD,CAAxB;AACA,UAAI,CAACvB,gBAAgB,CAACO,GAAD,CAArB,EAA4B,MAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;AAC5BD,MAAAA,SAAS,CAACU,QAAV,CAAmBC,IAAnB,CAAwBG,IAAxB,CAA6B;AACzBN,QAAAA,MAAM,EAAEd,OAAO,CAACc,MAAR,CAAeK,CAAf,CADiB;AAEzBT,QAAAA,SAAS,EAAEP;AAFc,OAA7B;AAIAe,MAAAA,SAAS,IAAIlB,OAAO,CAACc,MAAR,CAAeK,CAAf,CAAb;AACH;;AAED,QAAID,SAAS,GAAGlB,OAAO,CAACa,SAAxB,EACI,MAAM,IAAIN,KAAJ,CAAU,wFAAV,CAAN;AACP,GA1BM,MA0BA;AACH,SAAK,IAAMJ,IAAX,IAAkBJ,YAAlB,EAAgC;AAC5B,UAAI,CAACL,WAAW,CAACS,IAAD,CAAhB,EAAuB,MAAM,IAAII,KAAJ,oCAAsCJ,IAAtC,EAAN;AACvBH,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,UAAIG,IAAG,KAAK,gBAAZ,EAA8B;AAC1BG,QAAAA,SAAS,CAACe,kBAAV,GAA+BpB,YAAY,CAACF,YAAY,CAACI,IAAD,CAAb,EAAoBH,OAAO,CAACsB,cAA5B,CAA3C;AACH;;AACD,UAAInB,IAAG,KAAK,WAAZ,EAAyB;AACrBG,QAAAA,SAAS,CAACiB,oBAAV,GAAiCtB,YAAY,CAACF,YAAY,CAACI,IAAD,CAAb,EAAoBH,OAAO,CAACwB,SAA5B,CAA7C;AACH;;AACD,UAAIrB,IAAG,KAAK,aAAZ,EAA2B;AACvBG,QAAAA,SAAS,CAACmB,eAAV,GAA4BxB,YAAY,CAACF,YAAY,CAACI,IAAD,CAAb,EAAoBH,OAAO,CAAC0B,WAA5B,CAAxC;AACH;AACJ;AACJ;;AAED,SAAOpB,SAAP;AACH;;AAEDqB,MAAM,CAACC,OAAP,GAAiB/B,gBAAjB","sourcesContent":["/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst isValidRole = require('../../../../caver-utils').isValidRole\nconst isValidPublicKey = require('../../../../caver-utils').isValidPublicKey\n\nclass AccountForUpdate {\n    constructor(address, keyForUpdate, options) {\n        this.address = address\n        this.keyForUpdate = keyFormatter(keyForUpdate, options)\n    }\n\n    fillUpdateObject(updateObject) {\n        delete updateObject.key\n        Object.assign(updateObject, this.keyForUpdate)\n    }\n}\n\nfunction keyFormatter(keyForUpdate, options) {\n    const keyObject = {}\n\n    if (typeof keyForUpdate === 'string') {\n        if (options) throw new Error('Failed to keyFormatter for AccountForUpdate: AccountKeyPublic/legacyKey/failKey cannot have options')\n        switch (keyForUpdate) {\n            case 'legacyKey':\n                keyObject.legacyKey = true\n                break\n            case 'failKey':\n                keyObject.failKey = true\n                break\n            default:\n                if (!isValidPublicKey(keyForUpdate)) throw new Error('Invalid public key')\n                keyObject.publicKey = keyForUpdate\n                break\n        }\n    } else if (Array.isArray(keyForUpdate)) {\n        if (!options || !options.threshold || !options.weight)\n            throw new Error('For AccountKeyMultiSig, threshold and weight should be defined in options object.')\n        if (!Array.isArray(options.weight)) throw new Error('The weight should be defined as a array.')\n        if (options.weight.length !== keyForUpdate.length)\n            throw new Error('The length of keys in AccountKeyMultiSig and the length of weight array do not match.')\n\n        keyObject.multisig = {\n            threshold: options.threshold,\n            keys: [],\n        }\n\n        let weightSum = 0\n\n        for (let i = 0; i < keyForUpdate.length; i++) {\n            const key = keyForUpdate[i]\n            if (!isValidPublicKey(key)) throw new Error('Invalid public key')\n            keyObject.multisig.keys.push({\n                weight: options.weight[i],\n                publicKey: key,\n            })\n            weightSum += options.weight[i]\n        }\n\n        if (weightSum < options.threshold)\n            throw new Error('Invalid options for AccountKeyMultiSig: The sum of weights is less than the threshold.')\n    } else {\n        for (const key in keyForUpdate) {\n            if (!isValidRole(key)) throw new Error(`Invalid role is defined: ${key}`)\n            options = options || {}\n            if (key === 'transactionKey') {\n                keyObject.roleTransactionKey = keyFormatter(keyForUpdate[key], options.transactionKey)\n            }\n            if (key === 'updateKey') {\n                keyObject.roleAccountUpdateKey = keyFormatter(keyForUpdate[key], options.updateKey)\n            }\n            if (key === 'feePayerKey') {\n                keyObject.roleFeePayerKey = keyFormatter(keyForUpdate[key], options.feePayerKey)\n            }\n        }\n    }\n\n    return keyObject\n}\n\nmodule.exports = AccountForUpdate\n"]},"metadata":{},"sourceType":"script"}