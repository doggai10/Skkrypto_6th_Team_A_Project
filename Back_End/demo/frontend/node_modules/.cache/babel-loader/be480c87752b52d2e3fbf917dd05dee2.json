{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig');\n\nvar AccountKeyLegacy = require('./accountKeyLegacy');\n\nvar AccountKeyPublic = require('./accountKeyPublic');\n\nvar AccountKeyFail = require('./accountKeyFail');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n\nvar _require2 = require('../../../caver-wallet/src/keyring/keyringHelper'),\n    KEY_ROLE = _require2.KEY_ROLE;\n\nvar WeightedMultiSigOptions = require('./weightedMultiSigOptions');\n\nfunction isValidRoleBasedKeyFormat(roleBasedAccountKeys) {\n  if (!_.isArray(roleBasedAccountKeys)) return false;\n  if (roleBasedAccountKeys.length > KEY_ROLE.roleLast) return false;\n\n  var _iterator = _createForOfIteratorHelper(roleBasedAccountKeys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var accountKey = _step.value;\n\n      if (accountKey !== undefined && !(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n}\n/**\n * Representing an AccountKeyRoleBased.\n * @class\n */\n\n\nvar AccountKeyRoleBased = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(AccountKeyRoleBased, null, [{\n    key: \"decode\",\n\n    /**\n     * Decodes an RLP-encoded AccountKeyRoleBased string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyRoleBased string.\n     * @return {AccountKeyRoleBased}\n     */\n    value: function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error(\"Cannot decode to AccountKeyRoleBased. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG, \": \").concat(rlpEncodedKey));\n      var keys = RLP.decode(\"0x\".concat(rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG.length)));\n      var accountKeys = [];\n\n      var _iterator2 = _createForOfIteratorHelper(keys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n          if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.');\n\n          if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)) {\n            accountKeys.push(undefined);\n          } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\n            accountKeys.push(AccountKeyLegacy.decode(key));\n          } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\n            accountKeys.push(AccountKeyPublic.decode(key));\n          } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\n            accountKeys.push(AccountKeyFail.decode(key));\n          } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n            accountKeys.push(AccountKeyWeightedMultiSig.decode(key));\n          } else {\n            throw new Error(\"Failed to decode RLP-encoded account key. Invalid RLP-encoded account key \".concat(key));\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return new AccountKeyRoleBased(accountKeys);\n    }\n    /**\n     * Creates an instance of AccountKeyRoleBased.\n     * @param {Array.<AccountKeyLegacy|AccountKeyFail|Array.<string>>} roleBasedPubArray - An array of public key strings.\n     * @param {Array.<WeightedMultiSigOptions|object>} options - An array of options which defines threshold and weight.\n     * @return {AccountKeyRoleBased}\n     */\n\n  }, {\n    key: \"fromRoleBasedPublicKeysAndOptions\",\n    value: function fromRoleBasedPublicKeysAndOptions(roleBasedPubArray, options) {\n      if (!options) options = Array(KEY_ROLE.roleLast).fill(new WeightedMultiSigOptions());\n      var accountKeys = []; // Format will be like below\n      // keyArray = [[pub, pub], [pub], [pub, pub, pub]]\n      // keyArray = [[accountKeyLegacy], [accountKeyFail], [pub, pub, pub]]\n      // options = [{threshold: 1, weights: [1,1]}, {}, {threshold: 1, weights: [1,1,1]}]\n\n      for (var i = 0; i < roleBasedPubArray.length; i++) {\n        if (!(options[i] instanceof WeightedMultiSigOptions)) options[i] = WeightedMultiSigOptions.fromObject(options[i]); // To handle instance of AccountKeyLegacy or AccountKeyFail\n\n        if (!_.isArray(roleBasedPubArray[i])) {\n          throw new Error(\"Invalid format of keys: Each role should define the key to use in an array form.\");\n        } // Empty key array means AccountKeyNil\n\n\n        if (roleBasedPubArray[i].length === 0) {\n          if (!options[i].isEmpty()) throw new Error(\"Invalid options: AccountKeyNil cannot have options.\");\n          accountKeys.push(undefined);\n          continue;\n        }\n\n        if (roleBasedPubArray[i].length === 1) {\n          if (roleBasedPubArray[i][0] instanceof AccountKeyLegacy || roleBasedPubArray[i][0] instanceof AccountKeyFail) {\n            if (!options[i].isEmpty()) throw new Error(\"Invalid options: AccountKeyLegacy or AccountKeyFail cannot have options.\");\n            accountKeys.push(roleBasedPubArray[i][0]);\n            continue;\n          }\n\n          if (options[i].isEmpty()) {\n            accountKeys.push(AccountKeyPublic.fromPublicKey(roleBasedPubArray[i][0]));\n            continue;\n          }\n        }\n\n        accountKeys.push(AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(roleBasedPubArray[i], options[i]));\n      }\n\n      return new AccountKeyRoleBased(accountKeys);\n    }\n    /**\n     * Create an instance of AccountKeyRoleBased.\n     * @param {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>} accountKeyArray - An array containing arrays of instances of AccountKeyPublic or AccountKeyWeightedMultiSig for each role.\n     */\n\n  }]);\n\n  function AccountKeyRoleBased(accountKeyArray) {\n    _classCallCheck(this, AccountKeyRoleBased);\n\n    this.accountKeys = accountKeyArray;\n  }\n  /**\n   * @type {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>}\n   */\n\n\n  _createClass(AccountKeyRoleBased, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns an RLP-encoded AccountKeyRoleBased string.\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      var encodedAccountKeys = [];\n\n      var _iterator3 = _createForOfIteratorHelper(this.accountKeys),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var accountKey = _step3.value;\n\n          if (accountKey === undefined) {\n            encodedAccountKeys.push(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG);\n            continue;\n          }\n\n          encodedAccountKeys.push(accountKey.getRLPEncoding());\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(encodedAccountKeys).slice(2);\n    }\n  }, {\n    key: \"accountKeys\",\n    get: function get() {\n      return this._accountKeys;\n    },\n    set: function set(keys) {\n      if (!isValidRoleBasedKeyFormat(keys)) throw new Error(\"Invalid role-based account key format.\");\n      this._accountKeys = keys;\n    }\n  }]);\n\n  return AccountKeyRoleBased;\n}();\n\nmodule.exports = AccountKeyRoleBased;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyRoleBased.js"],"names":["_","require","RLP","AccountKeyWeightedMultiSig","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","utils","ACCOUNT_KEY_TAG","KEY_ROLE","WeightedMultiSigOptions","isValidRoleBasedKeyFormat","roleBasedAccountKeys","isArray","length","roleLast","accountKey","undefined","AccountKeyRoleBased","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_ROLE_BASED_TAG","Error","keys","decode","slice","accountKeys","key","ACCOUNT_KEY_NIL_TAG","push","ACCOUNT_KEY_LEGACY_TAG","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","roleBasedPubArray","options","Array","fill","i","fromObject","isEmpty","fromPublicKey","fromPublicKeysAndOptions","accountKeyArray","encodedAccountKeys","getRLPEncoding","encode","_accountKeys","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst AccountKeyWeightedMultiSig = require('./accountKeyWeightedMultiSig')\nconst AccountKeyLegacy = require('./accountKeyLegacy')\nconst AccountKeyPublic = require('./accountKeyPublic')\nconst AccountKeyFail = require('./accountKeyFail')\nconst utils = require('../../../caver-utils')\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\nconst { KEY_ROLE } = require('../../../caver-wallet/src/keyring/keyringHelper')\nconst WeightedMultiSigOptions = require('./weightedMultiSigOptions')\n\nfunction isValidRoleBasedKeyFormat(roleBasedAccountKeys) {\n    if (!_.isArray(roleBasedAccountKeys)) return false\n    if (roleBasedAccountKeys.length > KEY_ROLE.roleLast) return false\n\n    for (const accountKey of roleBasedAccountKeys) {\n        if (\n            accountKey !== undefined &&\n            !(accountKey instanceof AccountKeyLegacy) &&\n            !(accountKey instanceof AccountKeyPublic) &&\n            !(accountKey instanceof AccountKeyFail) &&\n            !(accountKey instanceof AccountKeyWeightedMultiSig)\n        ) {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n * Representing an AccountKeyRoleBased.\n * @class\n */\nclass AccountKeyRoleBased {\n    /**\n     * Decodes an RLP-encoded AccountKeyRoleBased string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyRoleBased string.\n     * @return {AccountKeyRoleBased}\n     */\n    static decode(rlpEncodedKey) {\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG))\n            throw new Error(\n                `Cannot decode to AccountKeyRoleBased. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG}: ${rlpEncodedKey}`\n            )\n\n        const keys = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG.length)}`)\n        const accountKeys = []\n        for (const key of keys) {\n            if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.')\n            if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)) {\n                accountKeys.push(undefined)\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_LEGACY_TAG)) {\n                accountKeys.push(AccountKeyLegacy.decode(key))\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) {\n                accountKeys.push(AccountKeyPublic.decode(key))\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) {\n                accountKeys.push(AccountKeyFail.decode(key))\n            } else if (key.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n                accountKeys.push(AccountKeyWeightedMultiSig.decode(key))\n            } else {\n                throw new Error(`Failed to decode RLP-encoded account key. Invalid RLP-encoded account key ${key}`)\n            }\n        }\n        return new AccountKeyRoleBased(accountKeys)\n    }\n\n    /**\n     * Creates an instance of AccountKeyRoleBased.\n     * @param {Array.<AccountKeyLegacy|AccountKeyFail|Array.<string>>} roleBasedPubArray - An array of public key strings.\n     * @param {Array.<WeightedMultiSigOptions|object>} options - An array of options which defines threshold and weight.\n     * @return {AccountKeyRoleBased}\n     */\n    static fromRoleBasedPublicKeysAndOptions(roleBasedPubArray, options) {\n        if (!options) options = Array(KEY_ROLE.roleLast).fill(new WeightedMultiSigOptions())\n\n        const accountKeys = []\n        // Format will be like below\n        // keyArray = [[pub, pub], [pub], [pub, pub, pub]]\n        // keyArray = [[accountKeyLegacy], [accountKeyFail], [pub, pub, pub]]\n        // options = [{threshold: 1, weights: [1,1]}, {}, {threshold: 1, weights: [1,1,1]}]\n        for (let i = 0; i < roleBasedPubArray.length; i++) {\n            if (!(options[i] instanceof WeightedMultiSigOptions)) options[i] = WeightedMultiSigOptions.fromObject(options[i])\n\n            // To handle instance of AccountKeyLegacy or AccountKeyFail\n            if (!_.isArray(roleBasedPubArray[i])) {\n                throw new Error(`Invalid format of keys: Each role should define the key to use in an array form.`)\n            }\n\n            // Empty key array means AccountKeyNil\n            if (roleBasedPubArray[i].length === 0) {\n                if (!options[i].isEmpty()) throw new Error(`Invalid options: AccountKeyNil cannot have options.`)\n                accountKeys.push(undefined)\n                continue\n            }\n\n            if (roleBasedPubArray[i].length === 1) {\n                if (roleBasedPubArray[i][0] instanceof AccountKeyLegacy || roleBasedPubArray[i][0] instanceof AccountKeyFail) {\n                    if (!options[i].isEmpty()) throw new Error(`Invalid options: AccountKeyLegacy or AccountKeyFail cannot have options.`)\n\n                    accountKeys.push(roleBasedPubArray[i][0])\n                    continue\n                }\n                if (options[i].isEmpty()) {\n                    accountKeys.push(AccountKeyPublic.fromPublicKey(roleBasedPubArray[i][0]))\n                    continue\n                }\n            }\n\n            accountKeys.push(AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(roleBasedPubArray[i], options[i]))\n        }\n        return new AccountKeyRoleBased(accountKeys)\n    }\n\n    /**\n     * Create an instance of AccountKeyRoleBased.\n     * @param {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>} accountKeyArray - An array containing arrays of instances of AccountKeyPublic or AccountKeyWeightedMultiSig for each role.\n     */\n    constructor(accountKeyArray) {\n        this.accountKeys = accountKeyArray\n    }\n\n    /**\n     * @type {Array.<AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig>}\n     */\n    get accountKeys() {\n        return this._accountKeys\n    }\n\n    set accountKeys(keys) {\n        if (!isValidRoleBasedKeyFormat(keys)) throw new Error(`Invalid role-based account key format.`)\n        this._accountKeys = keys\n    }\n\n    /**\n     * Returns an RLP-encoded AccountKeyRoleBased string.\n     * @return {string}\n     */\n    getRLPEncoding() {\n        const encodedAccountKeys = []\n        for (const accountKey of this.accountKeys) {\n            if (accountKey === undefined) {\n                encodedAccountKeys.push(ACCOUNT_KEY_TAG.ACCOUNT_KEY_NIL_TAG)\n                continue\n            }\n            encodedAccountKeys.push(accountKey.getRLPEncoding())\n        }\n\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(encodedAccountKeys).slice(2)\n    }\n}\n\nmodule.exports = AccountKeyRoleBased\n"]},"metadata":{},"sourceType":"script"}