{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nvar MAX_MULTISIG_KEY_LENGTH = 10;\n\nvar AccountKeyMultiSig = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function AccountKeyMultiSig(keys) {\n    _classCallCheck(this, AccountKeyMultiSig);\n\n    if (keys instanceof AccountKeyMultiSig) keys = keys.keys;\n    if (!Array.isArray(keys)) throw new Error('To create AccountKeyMultiSig, an array of private key strings is required.');\n    if (keys.length === 0) throw new Error('Empty array.');\n    if (keys.length > MAX_MULTISIG_KEY_LENGTH) throw new Error(\"The maximum number of keys is \".concat(MAX_MULTISIG_KEY_LENGTH, \".\"));\n    if (isDuple(keys)) throw new Error('There is a duplicate key.');\n    this._keys = keys;\n    this.type = AccountKeyEnum.ACCOUNT_KEY_MULTISIG;\n  }\n\n  _createClass(AccountKeyMultiSig, [{\n    key: \"toPublicKey\",\n    value: function toPublicKey(toPublicKeyFunc) {\n      var keys = [];\n\n      for (var i = 0; i < this._keys.length; i++) {\n        var key = this._keys[i];\n        keys.push(toPublicKeyFunc(key));\n      }\n\n      return keys;\n    }\n  }, {\n    key: \"update\",\n    value: function update(keys) {\n      this._keys = keys.keys;\n    }\n  }, {\n    key: \"defaultKey\",\n    get: function get() {\n      return this._keys[0];\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"transactionKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"updateKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"feePayerKey\",\n    get: function get() {\n      return this._keys;\n    }\n  }]);\n\n  return AccountKeyMultiSig;\n}();\n\nfunction isDuple(keys) {\n  var map = new Map();\n\n  var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (map.get(key) !== undefined) return true;\n      map.set(key, true);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}\n\nmodule.exports = AccountKeyMultiSig;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/accountKey/accountKeyMultiSig.js"],"names":["AccountKeyEnum","require","MAX_MULTISIG_KEY_LENGTH","AccountKeyMultiSig","keys","Array","isArray","Error","length","isDuple","_keys","type","ACCOUNT_KEY_MULTISIG","toPublicKeyFunc","i","key","push","map","Map","get","undefined","set","module","exports"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAAP,CAA4BD,cAAnD;;AAEA,IAAME,uBAAuB,GAAG,EAAhC;;IAEMC,kB;;;AACF,8BAAYC,IAAZ,EAAkB;AAAA;;AACd,QAAIA,IAAI,YAAYD,kBAApB,EAAwCC,IAAI,GAAGA,IAAI,CAACA,IAAZ;AAExC,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAL,EAA0B,MAAM,IAAIG,KAAJ,CAAU,4EAAV,CAAN;AAC1B,QAAIH,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB,MAAM,IAAID,KAAJ,CAAU,cAAV,CAAN;AACvB,QAAIH,IAAI,CAACI,MAAL,GAAcN,uBAAlB,EAA2C,MAAM,IAAIK,KAAJ,yCAA2CL,uBAA3C,OAAN;AAC3C,QAAIO,OAAO,CAACL,IAAD,CAAX,EAAmB,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;AAEnB,SAAKG,KAAL,GAAaN,IAAb;AACA,SAAKO,IAAL,GAAYX,cAAc,CAACY,oBAA3B;AACH;;;;gCAsBWC,e,EAAiB;AACzB,UAAMT,IAAI,GAAG,EAAb;;AAEA,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,KAAL,CAAWF,MAA/B,EAAuCM,CAAC,EAAxC,EAA4C;AACxC,YAAMC,GAAG,GAAG,KAAKL,KAAL,CAAWI,CAAX,CAAZ;AACAV,QAAAA,IAAI,CAACY,IAAL,CAAUH,eAAe,CAACE,GAAD,CAAzB;AACH;;AAED,aAAOX,IAAP;AACH;;;2BAEMA,I,EAAM;AACT,WAAKM,KAAL,GAAaN,IAAI,CAACA,IAAlB;AACH;;;wBAjCgB;AACb,aAAO,KAAKM,KAAL,CAAW,CAAX,CAAP;AACH;;;wBAEU;AACP,aAAO,KAAKA,KAAZ;AACH;;;wBAEoB;AACjB,aAAO,KAAKA,KAAZ;AACH;;;wBAEe;AACZ,aAAO,KAAKA,KAAZ;AACH;;;wBAEiB;AACd,aAAO,KAAKA,KAAZ;AACH;;;;;;AAkBL,SAASD,OAAT,CAAiBL,IAAjB,EAAuB;AACnB,MAAMa,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;AADmB,6CAEDd,IAFC;AAAA;;AAAA;AAEnB,wDAAwB;AAAA,UAAbW,GAAa;AACpB,UAAIE,GAAG,CAACE,GAAJ,CAAQJ,GAAR,MAAiBK,SAArB,EAAgC,OAAO,IAAP;AAChCH,MAAAA,GAAG,CAACI,GAAJ,CAAQN,GAAR,EAAa,IAAb;AACH;AALkB;AAAA;AAAA;AAAA;AAAA;;AAMnB,SAAO,KAAP;AACH;;AAEDO,MAAM,CAACC,OAAP,GAAiBpB,kBAAjB","sourcesContent":["/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum\n\nconst MAX_MULTISIG_KEY_LENGTH = 10\n\nclass AccountKeyMultiSig {\n    constructor(keys) {\n        if (keys instanceof AccountKeyMultiSig) keys = keys.keys\n\n        if (!Array.isArray(keys)) throw new Error('To create AccountKeyMultiSig, an array of private key strings is required.')\n        if (keys.length === 0) throw new Error('Empty array.')\n        if (keys.length > MAX_MULTISIG_KEY_LENGTH) throw new Error(`The maximum number of keys is ${MAX_MULTISIG_KEY_LENGTH}.`)\n        if (isDuple(keys)) throw new Error('There is a duplicate key.')\n\n        this._keys = keys\n        this.type = AccountKeyEnum.ACCOUNT_KEY_MULTISIG\n    }\n\n    get defaultKey() {\n        return this._keys[0]\n    }\n\n    get keys() {\n        return this._keys\n    }\n\n    get transactionKey() {\n        return this._keys\n    }\n\n    get updateKey() {\n        return this._keys\n    }\n\n    get feePayerKey() {\n        return this._keys\n    }\n\n    toPublicKey(toPublicKeyFunc) {\n        const keys = []\n\n        for (let i = 0; i < this._keys.length; i++) {\n            const key = this._keys[i]\n            keys.push(toPublicKeyFunc(key))\n        }\n\n        return keys\n    }\n\n    update(keys) {\n        this._keys = keys.keys\n    }\n}\n\nfunction isDuple(keys) {\n    const map = new Map()\n    for (const key of keys) {\n        if (map.get(key) !== undefined) return true\n        map.set(key, true)\n    }\n    return false\n}\n\nmodule.exports = AccountKeyMultiSig\n"]},"metadata":{},"sourceType":"script"}