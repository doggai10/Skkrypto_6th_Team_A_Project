{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractTransaction = require('../abstractTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar Account = require('../../../../caver-account/src');\n\nvar utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeAccountUpdate)) throw new Error(\"Cannot decode to AccountUpdate. The prefix must be \".concat(TX_TYPE_TAG.TxTypeAccountUpdate, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 6),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      from = _RLP$decode2[3],\n      rlpEncodedKey = _RLP$decode2[4],\n      signatures = _RLP$decode2[5];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from: from,\n    rlpEncodedKey: rlpEncodedKey,\n    signatures: signatures\n  };\n}\n/**\n * Represents an account update transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypeaccountupdate to see more detail.\n * @class\n */\n\n\nvar AccountUpdate = /*#__PURE__*/function (_AbstractTransaction) {\n  \"use strict\";\n\n  _inherits(AccountUpdate, _AbstractTransaction);\n\n  var _super = _createSuper(AccountUpdate);\n\n  _createClass(AccountUpdate, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns an AccountUpdate transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded account update transaction.\n     * @return {AccountUpdate}\n     */\n    value: function decode(rlpEncoded) {\n      var decoded = _decode(rlpEncoded);\n\n      decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey);\n      return new AccountUpdate(decoded);\n    }\n    /**\n     * Creates an account update transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create an AccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     */\n\n  }]);\n\n  function AccountUpdate(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, AccountUpdate);\n\n    if (_.isString(createTxObj)) {\n      createTxObj = _decode(createTxObj);\n      createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey);\n    }\n\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeAccountUpdate, createTxObj);\n    _this.account = createTxObj.account;\n    return _this;\n  }\n  /**\n   * @type {Account}\n   */\n\n\n  _createClass(AccountUpdate, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeAccountUpdate + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey(), signatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeAccountUpdate, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey()]);\n    }\n  }, {\n    key: \"account\",\n    get: function get() {\n      return this._account;\n    },\n    set: function set(acct) {\n      if (!(acct instanceof Account)) throw new Error(\"Invalid account. 'account' should be instance of 'Account'.\");\n      if (this.from.toLowerCase() !== acct.address.toLowerCase()) throw new Error(\"Transaction from address(\".concat(this.from.toLowerCase(), \") and account address(\").concat(acct.address, \") do not match.\"));\n      this._account = acct;\n    }\n  }]);\n\n  return AccountUpdate;\n}(AbstractTransaction);\n\nmodule.exports = AccountUpdate;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/accountUpdate/accountUpdate.js"],"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","Account","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeAccountUpdate","Error","typeDettached","slice","decode","nonce","gasPrice","gas","from","rlpEncodedKey","signatures","trimLeadingZero","AccountUpdate","decoded","account","createFromRLPEncoding","createTxObj","isString","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","getRLPEncodingAccountKey","_account","acct","address","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst Account = require('../../../../caver-account/src')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeAccountUpdate))\n        throw new Error(`Cannot decode to AccountUpdate. The prefix must be ${TX_TYPE_TAG.TxTypeAccountUpdate}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, rlpEncodedKey, signatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        rlpEncodedKey,\n        signatures,\n    }\n}\n\n/**\n * Represents an account update transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypeaccountupdate to see more detail.\n * @class\n */\nclass AccountUpdate extends AbstractTransaction {\n    /**\n     * decodes the RLP-encoded string and returns an AccountUpdate transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded account update transaction.\n     * @return {AccountUpdate}\n     */\n    static decode(rlpEncoded) {\n        const decoded = _decode(rlpEncoded)\n        decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey)\n        return new AccountUpdate(decoded)\n    }\n\n    /**\n     * Creates an account update transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create an AccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) {\n            createTxObj = _decode(createTxObj)\n            createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey)\n        }\n\n        super(TX_TYPE_STRING.TxTypeAccountUpdate, createTxObj)\n        this.account = createTxObj.account\n    }\n\n    /**\n     * @type {Account}\n     */\n    get account() {\n        return this._account\n    }\n\n    set account(acct) {\n        if (!(acct instanceof Account)) throw new Error(`Invalid account. 'account' should be instance of 'Account'.`)\n        if (this.from.toLowerCase() !== acct.address.toLowerCase())\n            throw new Error(`Transaction from address(${this.from.toLowerCase()}) and account address(${acct.address}) do not match.`)\n\n        this._account = acct\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeAccountUpdate +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.account.getRLPEncodingAccountKey(),\n                signatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeAccountUpdate,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.account.getRLPEncodingAccountKey(),\n        ])\n    }\n}\n\nmodule.exports = AccountUpdate\n"]},"metadata":{},"sourceType":"script"}