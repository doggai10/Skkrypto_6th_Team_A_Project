{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth-abi/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2017\n */\nvar _ = require('lodash');\n\nvar EthersAbi = require('ethers/utils/abi-coder').AbiCoder;\n\nvar utils = require('../../caver-utils');\n\nvar ethersAbiCoder = new EthersAbi(function (type, value) {\n  if (type.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== 'BN')) {\n    return value.toString();\n  }\n\n  return value;\n}); // result method\n\nfunction Result() {}\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\n\n\nvar ABICoder = function ABICoder() {};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\n\n\nABICoder.prototype.encodeFunctionSignature = function (functionName) {\n  if (_.isObject(functionName)) {\n    functionName = utils._jsonInterfaceMethodToString(functionName);\n  }\n\n  return utils.sha3(functionName).slice(0, 10);\n};\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\n\n\nABICoder.prototype.encodeEventSignature = function (functionName) {\n  if (_.isObject(functionName)) {\n    functionName = utils._jsonInterfaceMethodToString(functionName);\n  }\n\n  return utils.sha3(functionName);\n};\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n * @param {String} type\n * @param {Object} param\n * @return {String} encoded plain param\n */\n\n\nABICoder.prototype.encodeParameter = function (type, param) {\n  return this.encodeParameters([type], [param]);\n};\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\n\n\nABICoder.prototype.encodeParameters = function (types, params) {\n  return ethersAbiCoder.encode(this.mapTypes(types), params);\n};\n/**\n * Should be used to encode smart contract deployment with constructor arguments\n *\n * @method encodeContractDeploy\n * @param {Array} types\n * @param {Array} params\n * @return {String} bytecode + args\n */\n\n\nABICoder.prototype.encodeContractDeploy = function (jsonInterface, bytecode) {\n  if (!jsonInterface) {\n    throw new Error('jsonInterface should be provided for encoding contract deployment.');\n  }\n\n  if (!bytecode) {\n    throw new Error('bytecode should be provided for encoding contract deployment.');\n  }\n\n  var constructorInterface = jsonInterface.filter(function (_ref) {\n    var type = _ref.type;\n    return type === 'constructor';\n  })[0];\n  var constructorInputs = constructorInterface && constructorInterface.inputs; // If constructor doesn't exist in smart contract, only bytecode is needed for deploying.\n\n  if (!constructorInterface || !constructorInputs || _.isEmpty(constructorInputs)) {\n    return bytecode;\n  }\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (constructorInputs.length !== args.length) {\n    throw new Error(\"invalid number of parameters for deploying. Got \".concat(args.length, \" expected \").concat(constructorInputs.length, \"!\"));\n  }\n\n  var constructorTypes = constructorInputs.map(function (_ref2) {\n    var type = _ref2.type;\n    return type;\n  });\n  return bytecode + this.encodeParameters(constructorTypes, args).replace('0x', '');\n};\n/**\n * Map types if simplified format is used\n *\n * @method mapTypes\n * @param {Array} types\n * @return {Array}\n */\n\n\nABICoder.prototype.mapTypes = function (types) {\n  var self = this;\n  var mappedTypes = [];\n  types.forEach(function (type) {\n    if (self.isSimplifiedStructFormat(type)) {\n      var structName = Object.keys(type)[0];\n      mappedTypes.push(Object.assign(self.mapStructNameAndType(structName), {\n        components: self.mapStructToCoderFormat(type[structName])\n      }));\n      return;\n    }\n\n    mappedTypes.push(type);\n  });\n  return mappedTypes;\n};\n/**\n * Check if type is simplified struct format\n *\n * @method isSimplifiedStructFormat\n * @param {string | Object} type\n * @returns {boolean}\n */\n\n\nABICoder.prototype.isSimplifiedStructFormat = function (type) {\n  return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\n};\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n *\n * @method mapStructNameAndType\n * @param {string} structName\n * @return {{type: string, name: *}}\n */\n\n\nABICoder.prototype.mapStructNameAndType = function (structName) {\n  var type = 'tuple';\n\n  if (structName.indexOf('[]') > -1) {\n    type = 'tuple[]';\n    structName = structName.slice(0, -2);\n  }\n\n  return {\n    type: type,\n    name: structName\n  };\n};\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n *\n * @method mapStructToCoderFormat\n * @param {Object} struct\n * @return {Array}\n */\n\n\nABICoder.prototype.mapStructToCoderFormat = function (struct) {\n  var self = this;\n  var components = [];\n  Object.keys(struct).forEach(function (key) {\n    if (typeof struct[key] === 'object') {\n      components.push(Object.assign(self.mapStructNameAndType(key), {\n        components: self.mapStructToCoderFormat(struct[key])\n      }));\n      return;\n    }\n\n    components.push({\n      name: key,\n      type: struct[key]\n    });\n  });\n  return components;\n};\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */\n\n\nABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {\n  return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');\n};\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\n\n\nABICoder.prototype.decodeParameter = function (type, bytes) {\n  return this.decodeParameters([type], bytes)[0];\n};\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */\n\n\nABICoder.prototype.decodeParameters = function (outputs, bytes) {\n  if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n    throw new Error(\"Returned values aren't valid, did it run Out of Gas?\");\n  }\n\n  var res = ethersAbiCoder.decode(this.mapTypes(outputs), \"0x\".concat(bytes.replace(/0x/i, '')));\n  var returnValue = new Result();\n  returnValue.__length__ = 0;\n  outputs.forEach(function (output, i) {\n    var decodedValue = res[returnValue.__length__];\n    decodedValue = decodedValue === '0x' ? null : decodedValue;\n    returnValue[i] = decodedValue;\n\n    if (_.isObject(output) && output.name) {\n      returnValue[output.name] = decodedValue;\n    }\n\n    returnValue.__length__++;\n  });\n  return returnValue;\n};\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * @param {Array} topics\n * @return {Array} array of plain params\n */\n\n\nABICoder.prototype.decodeLog = function (inputs, data, topics) {\n  var _this = this;\n\n  topics = _.isArray(topics) ? topics : [topics];\n  data = data || '';\n  var notIndexedInputs = [];\n  var indexedParams = [];\n  var topicCount = 0; // TODO check for anonymous logs?\n\n  inputs.forEach(function (input, i) {\n    if (input.indexed) {\n      indexedParams[i] = ['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {\n        return input.type.indexOf(staticType) !== -1;\n      }) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];\n      topicCount++;\n    } else {\n      notIndexedInputs[i] = input;\n    }\n  });\n  var nonIndexedData = data;\n  var notIndexedParams = nonIndexedData ? this.decodeParameters(notIndexedInputs, nonIndexedData) : [];\n  var returnValue = new Result();\n  returnValue.__length__ = 0;\n  inputs.forEach(function (res, i) {\n    returnValue[i] = res.type === 'string' ? '' : null;\n\n    if (typeof notIndexedParams[i] !== 'undefined') {\n      returnValue[i] = notIndexedParams[i];\n    }\n\n    if (typeof indexedParams[i] !== 'undefined') {\n      returnValue[i] = indexedParams[i];\n    }\n\n    if (res.name) {\n      returnValue[res.name] = returnValue[i];\n    }\n\n    returnValue.__length__++;\n  });\n  return returnValue;\n};\n\nvar coder = new ABICoder();\nmodule.exports = coder;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-abi/src/index.js"],"names":["_","require","EthersAbi","AbiCoder","utils","ethersAbiCoder","type","value","match","isArray","isObject","constructor","name","toString","Result","ABICoder","prototype","encodeFunctionSignature","functionName","_jsonInterfaceMethodToString","sha3","slice","encodeEventSignature","encodeParameter","param","encodeParameters","types","params","encode","mapTypes","encodeContractDeploy","jsonInterface","bytecode","Error","constructorInterface","filter","constructorInputs","inputs","isEmpty","args","length","constructorTypes","map","replace","self","mappedTypes","forEach","isSimplifiedStructFormat","structName","Object","keys","push","assign","mapStructNameAndType","components","mapStructToCoderFormat","indexOf","struct","key","encodeFunctionCall","decodeParameter","bytes","decodeParameters","outputs","res","decode","returnValue","__length__","output","i","decodedValue","decodeLog","data","topics","_this","notIndexedInputs","indexedParams","topicCount","input","indexed","find","staticType","nonIndexedData","notIndexedParams","coder","module","exports"],"mappings":"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","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth-abi/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2017\n */\n\nconst _ = require('lodash')\nconst EthersAbi = require('ethers/utils/abi-coder').AbiCoder\nconst utils = require('../../caver-utils')\n\nconst ethersAbiCoder = new EthersAbi(function(type, value) {\n    if (type.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== 'BN')) {\n        return value.toString()\n    }\n    return value\n})\n\n// result method\nfunction Result() {}\n\n/**\n * ABICoder prototype should be used to encode/decode solidity params of any type\n */\nconst ABICoder = function() {}\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeFunctionSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeFunctionSignature = function(functionName) {\n    if (_.isObject(functionName)) {\n        functionName = utils._jsonInterfaceMethodToString(functionName)\n    }\n\n    return utils.sha3(functionName).slice(0, 10)\n}\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n *\n * @method encodeEventSignature\n * @param {String|Object} functionName\n * @return {String} encoded function name\n */\nABICoder.prototype.encodeEventSignature = function(functionName) {\n    if (_.isObject(functionName)) {\n        functionName = utils._jsonInterfaceMethodToString(functionName)\n    }\n\n    return utils.sha3(functionName)\n}\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParameter\n * @param {String} type\n * @param {Object} param\n * @return {String} encoded plain param\n */\nABICoder.prototype.encodeParameter = function(type, param) {\n    return this.encodeParameters([type], [param])\n}\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParameters\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nABICoder.prototype.encodeParameters = function(types, params) {\n    return ethersAbiCoder.encode(this.mapTypes(types), params)\n}\n\n/**\n * Should be used to encode smart contract deployment with constructor arguments\n *\n * @method encodeContractDeploy\n * @param {Array} types\n * @param {Array} params\n * @return {String} bytecode + args\n */\nABICoder.prototype.encodeContractDeploy = function(jsonInterface, bytecode, ...args) {\n    if (!jsonInterface) {\n        throw new Error('jsonInterface should be provided for encoding contract deployment.')\n    }\n\n    if (!bytecode) {\n        throw new Error('bytecode should be provided for encoding contract deployment.')\n    }\n\n    const constructorInterface = jsonInterface.filter(({ type }) => type === 'constructor')[0]\n    const constructorInputs = constructorInterface && constructorInterface.inputs\n\n    // If constructor doesn't exist in smart contract, only bytecode is needed for deploying.\n    if (!constructorInterface || !constructorInputs || _.isEmpty(constructorInputs)) {\n        return bytecode\n    }\n\n    if (constructorInputs.length !== args.length) {\n        throw new Error(`invalid number of parameters for deploying. Got ${args.length} expected ${constructorInputs.length}!`)\n    }\n\n    const constructorTypes = constructorInputs.map(({ type }) => type)\n\n    return bytecode + this.encodeParameters(constructorTypes, args).replace('0x', '')\n}\n\n/**\n * Map types if simplified format is used\n *\n * @method mapTypes\n * @param {Array} types\n * @return {Array}\n */\nABICoder.prototype.mapTypes = function(types) {\n    const self = this\n    const mappedTypes = []\n    types.forEach(function(type) {\n        if (self.isSimplifiedStructFormat(type)) {\n            const structName = Object.keys(type)[0]\n            mappedTypes.push(\n                Object.assign(self.mapStructNameAndType(structName), {\n                    components: self.mapStructToCoderFormat(type[structName]),\n                })\n            )\n\n            return\n        }\n\n        mappedTypes.push(type)\n    })\n\n    return mappedTypes\n}\n\n/**\n * Check if type is simplified struct format\n *\n * @method isSimplifiedStructFormat\n * @param {string | Object} type\n * @returns {boolean}\n */\nABICoder.prototype.isSimplifiedStructFormat = function(type) {\n    return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined'\n}\n\n/**\n * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n *\n * @method mapStructNameAndType\n * @param {string} structName\n * @return {{type: string, name: *}}\n */\nABICoder.prototype.mapStructNameAndType = function(structName) {\n    let type = 'tuple'\n\n    if (structName.indexOf('[]') > -1) {\n        type = 'tuple[]'\n        structName = structName.slice(0, -2)\n    }\n\n    return { type: type, name: structName }\n}\n\n/**\n * Maps the simplified format in to the expected format of the ABICoder\n *\n * @method mapStructToCoderFormat\n * @param {Object} struct\n * @return {Array}\n */\nABICoder.prototype.mapStructToCoderFormat = function(struct) {\n    const self = this\n    const components = []\n    Object.keys(struct).forEach(function(key) {\n        if (typeof struct[key] === 'object') {\n            components.push(\n                Object.assign(self.mapStructNameAndType(key), {\n                    components: self.mapStructToCoderFormat(struct[key]),\n                })\n            )\n\n            return\n        }\n\n        components.push({\n            name: key,\n            type: struct[key],\n        })\n    })\n\n    return components\n}\n\n/**\n * Encodes a function call from its json interface and parameters.\n *\n * @method encodeFunctionCall\n * @param {Array} jsonInterface\n * @param {Array} params\n * @return {String} The encoded ABI for this function call\n */\nABICoder.prototype.encodeFunctionCall = function(jsonInterface, params) {\n    return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '')\n}\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParameter\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nABICoder.prototype.decodeParameter = function(type, bytes) {\n    return this.decodeParameters([type], bytes)[0]\n}\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParameter\n * @param {Array} outputs\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeParameters = function(outputs, bytes) {\n    if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n        throw new Error(\"Returned values aren't valid, did it run Out of Gas?\")\n    }\n\n    const res = ethersAbiCoder.decode(this.mapTypes(outputs), `0x${bytes.replace(/0x/i, '')}`)\n    const returnValue = new Result()\n    returnValue.__length__ = 0\n\n    outputs.forEach(function(output, i) {\n        let decodedValue = res[returnValue.__length__]\n        decodedValue = decodedValue === '0x' ? null : decodedValue\n\n        returnValue[i] = decodedValue\n\n        if (_.isObject(output) && output.name) {\n            returnValue[output.name] = decodedValue\n        }\n\n        returnValue.__length__++\n    })\n\n    return returnValue\n}\n\n/**\n * Decodes events non- and indexed parameters.\n *\n * @method decodeLog\n * @param {Object} inputs\n * @param {String} data\n * @param {Array} topics\n * @return {Array} array of plain params\n */\nABICoder.prototype.decodeLog = function(inputs, data, topics) {\n    const _this = this\n    topics = _.isArray(topics) ? topics : [topics]\n\n    data = data || ''\n\n    const notIndexedInputs = []\n    const indexedParams = []\n    let topicCount = 0\n\n    // TODO check for anonymous logs?\n\n    inputs.forEach(function(input, i) {\n        if (input.indexed) {\n            indexedParams[i] = ['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function(staticType) {\n                return input.type.indexOf(staticType) !== -1\n            })\n                ? _this.decodeParameter(input.type, topics[topicCount])\n                : topics[topicCount]\n            topicCount++\n        } else {\n            notIndexedInputs[i] = input\n        }\n    })\n\n    const nonIndexedData = data\n    const notIndexedParams = nonIndexedData ? this.decodeParameters(notIndexedInputs, nonIndexedData) : []\n\n    const returnValue = new Result()\n    returnValue.__length__ = 0\n\n    inputs.forEach(function(res, i) {\n        returnValue[i] = res.type === 'string' ? '' : null\n\n        if (typeof notIndexedParams[i] !== 'undefined') {\n            returnValue[i] = notIndexedParams[i]\n        }\n        if (typeof indexedParams[i] !== 'undefined') {\n            returnValue[i] = indexedParams[i]\n        }\n\n        if (res.name) {\n            returnValue[res.name] = returnValue[i]\n        }\n\n        returnValue.__length__++\n    })\n\n    return returnValue\n}\n\nconst coder = new ABICoder()\n\nmodule.exports = coder\n"]},"metadata":{},"sourceType":"script"}