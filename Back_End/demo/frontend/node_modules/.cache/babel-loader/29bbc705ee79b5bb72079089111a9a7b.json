{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar utils = require('../../../caver-utils');\n/**\n * Representing a WeightedPublicKey.\n * @class\n */\n\n\nvar WeightedPublicKey = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Create an instance of WeightedPublicKey.\n   * @param {number} weight - The weight of the key.\n   * @param {string} publicKey - The public key string.\n   */\n  function WeightedPublicKey(weight, publicKey) {\n    _classCallCheck(this, WeightedPublicKey);\n\n    this.weight = weight;\n    this.publicKey = publicKey;\n  }\n  /**\n   * @type {number}\n   */\n\n\n  _createClass(WeightedPublicKey, [{\n    key: \"encodeToBytes\",\n\n    /**\n     * Returns an encoded weighted public key string.\n     * @return {string}\n     */\n    value: function encodeToBytes() {\n      if (this.weight === undefined) throw new Error('weight should be specified for a multisig account');\n      if (this.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account');\n      var compressedPublicKey = utils.compressPublicKey(this.publicKey);\n      return [Bytes.fromNat(utils.numberToHex(this.weight)), compressedPublicKey];\n    }\n  }, {\n    key: \"weight\",\n    get: function get() {\n      return this._weight;\n    },\n    set: function set(w) {\n      this._weight = utils.hexToNumber(w);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._publicKey;\n    },\n    set: function set(p) {\n      if (!utils.isValidPublicKey(p)) throw new Error(\"Invalid public key: \".concat(p));\n      this._publicKey = utils.addHexPrefix(p);\n    }\n  }]);\n\n  return WeightedPublicKey;\n}();\n\nmodule.exports = WeightedPublicKey;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-account/src/accountKey/weightedPublicKey.js"],"names":["Bytes","require","utils","WeightedPublicKey","weight","publicKey","undefined","Error","compressedPublicKey","compressPublicKey","fromNat","numberToHex","_weight","w","hexToNumber","_publicKey","p","isValidPublicKey","addHexPrefix","module","exports"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;AAEA;AACA;AACA;AACA;;;IACME,iB;;;AACF;AACJ;AACA;AACA;AACA;AACI,6BAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;AAED;AACJ;AACA;;;;;;AAqBI;AACJ;AACA;AACA;oCACoB;AACZ,UAAI,KAAKD,MAAL,KAAgBE,SAApB,EAA+B,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AAC/B,UAAI,KAAKF,SAAL,KAAmBC,SAAvB,EAAkC,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AAElC,UAAMC,mBAAmB,GAAGN,KAAK,CAACO,iBAAN,CAAwB,KAAKJ,SAA7B,CAA5B;AACA,aAAO,CAACL,KAAK,CAACU,OAAN,CAAcR,KAAK,CAACS,WAAN,CAAkB,KAAKP,MAAvB,CAAd,CAAD,EAAgDI,mBAAhD,CAAP;AACH;;;wBA9BY;AACT,aAAO,KAAKI,OAAZ;AACH,K;sBAEUC,C,EAAG;AACV,WAAKD,OAAL,GAAeV,KAAK,CAACY,WAAN,CAAkBD,CAAlB,CAAf;AACH;AAED;AACJ;AACA;;;;wBACoB;AACZ,aAAO,KAAKE,UAAZ;AACH,K;sBAEaC,C,EAAG;AACb,UAAI,CAACd,KAAK,CAACe,gBAAN,CAAuBD,CAAvB,CAAL,EAAgC,MAAM,IAAIT,KAAJ,+BAAiCS,CAAjC,EAAN;AAChC,WAAKD,UAAL,GAAkBb,KAAK,CAACgB,YAAN,CAAmBF,CAAnB,CAAlB;AACH;;;;;;AAeLG,MAAM,CAACC,OAAP,GAAiBjB,iBAAjB","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst Bytes = require('eth-lib/lib/bytes')\nconst utils = require('../../../caver-utils')\n\n/**\n * Representing a WeightedPublicKey.\n * @class\n */\nclass WeightedPublicKey {\n    /**\n     * Create an instance of WeightedPublicKey.\n     * @param {number} weight - The weight of the key.\n     * @param {string} publicKey - The public key string.\n     */\n    constructor(weight, publicKey) {\n        this.weight = weight\n        this.publicKey = publicKey\n    }\n\n    /**\n     * @type {number}\n     */\n    get weight() {\n        return this._weight\n    }\n\n    set weight(w) {\n        this._weight = utils.hexToNumber(w)\n    }\n\n    /**\n     * @type {string}\n     */\n    get publicKey() {\n        return this._publicKey\n    }\n\n    set publicKey(p) {\n        if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`)\n        this._publicKey = utils.addHexPrefix(p)\n    }\n\n    /**\n     * Returns an encoded weighted public key string.\n     * @return {string}\n     */\n    encodeToBytes() {\n        if (this.weight === undefined) throw new Error('weight should be specified for a multisig account')\n        if (this.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account')\n\n        const compressedPublicKey = utils.compressPublicKey(this.publicKey)\n        return [Bytes.fromNat(utils.numberToHex(this.weight)), compressedPublicKey]\n    }\n}\n\nmodule.exports = WeightedPublicKey\n"]},"metadata":{},"sourceType":"script"}