{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar mh = require('multihashes');\n\nvar multibase = require('multibase');\n\nvar multicodec = require('multicodec');\n\nvar codecs = require('multicodec/src/base-table');\n\nvar CIDUtil = require('./cid-util');\n\nvar withIs = require('class-is');\n/**\n * @typedef {Object} SerializedCID\n * @param {string} codec\n * @param {number} version\n * @param {Buffer} multihash\n *\n */\n\n/**\n * Test if the given input is a CID.\n * @function isCID\n * @memberof CID\n * @static\n * @param {any} other\n * @returns {bool}\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n * @class CID\n */\n\n\nvar CID = /*#__PURE__*/function () {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Buffer)\n   *   if (0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   *\n   * ..if only JS had traits..\n   * ```\n   *\n   * @param {string|Buffer} version\n   * @param {string} [codec]\n   * @param {Buffer} [multihash]\n   *\n   * @example\n   *\n   * new CID(<version>, <codec>, <multihash>)\n   * new CID(<cidStr>)\n   * new CID(<cid.buffer>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   *\n   */\n  function CID(version, codec, multihash) {\n    _classCallCheck(this, CID);\n\n    if (module.exports.isCID(version)) {\n      var cid = version;\n      this.version = cid.version;\n      this.codec = cid.codec;\n      this.multihash = Buffer.from(cid.multihash);\n      return;\n    }\n\n    if (typeof version === 'string') {\n      if (multibase.isEncoded(version)) {\n        // CID String (encoded with multibase)\n        var _cid = multibase.decode(version);\n\n        version = parseInt(_cid.slice(0, 1).toString('hex'), 16);\n        codec = multicodec.getCodec(_cid.slice(1));\n        multihash = multicodec.rmPrefix(_cid.slice(1));\n      } else {\n        // bs58 string encoded multihash\n        codec = 'dag-pb';\n        multihash = mh.fromB58String(version);\n        version = 0;\n      }\n    } else if (Buffer.isBuffer(version)) {\n      var firstByte = version.slice(0, 1);\n      var v = parseInt(firstByte.toString('hex'), 16);\n\n      if (v === 0 || v === 1) {\n        // CID\n        var _cid2 = version;\n        version = v;\n        codec = multicodec.getCodec(_cid2.slice(1));\n        multihash = multicodec.rmPrefix(_cid2.slice(1));\n      } else {\n        // multihash\n        codec = 'dag-pb';\n        multihash = version;\n        version = 0;\n      }\n    }\n    /**\n     * @type {string}\n     */\n\n\n    this.codec = codec;\n    /**\n     * @type {number}\n     */\n\n    this.version = version;\n    /**\n     * @type {Buffer}\n     */\n\n    this.multihash = multihash;\n    CID.validateCID(this);\n  }\n  /**\n   * The CID as a `Buffer`\n   *\n   * @return {Buffer}\n   * @readonly\n   *\n   * @memberOf CID\n   */\n\n\n  _createClass(CID, [{\n    key: \"toV0\",\n\n    /**\n     * Convert to a CID of version `0`.\n     *\n     * @returns {CID}\n     */\n    value: function toV0() {\n      if (this.codec !== 'dag-pb') {\n        throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n      }\n\n      var _mh$decode = mh.decode(this.multihash),\n          name = _mh$decode.name,\n          length = _mh$decode.length;\n\n      if (name !== 'sha2-256') {\n        throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n      }\n\n      if (length !== 32) {\n        throw new Error('Cannot convert non 32 byte multihash CID to CIDv0');\n      }\n\n      return new _CID(0, this.codec, this.multihash);\n    }\n    /**\n     * Convert to a CID of version `1`.\n     *\n     * @returns {CID}\n     */\n\n  }, {\n    key: \"toV1\",\n    value: function toV1() {\n      return new _CID(1, this.codec, this.multihash);\n    }\n    /**\n     * Encode the CID into a string.\n     *\n     * @param {string} [base='base58btc'] - Base encoding to use.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"toBaseEncodedString\",\n    value: function toBaseEncodedString(base) {\n      base = base || 'base58btc';\n\n      switch (this.version) {\n        case 0:\n          {\n            if (base !== 'base58btc') {\n              throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()');\n            }\n\n            return mh.toB58String(this.multihash);\n          }\n\n        case 1:\n          return multibase.encode(base, this.buffer).toString();\n\n        default:\n          throw new Error('Unsupported version');\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      return this.toBaseEncodedString(base);\n    }\n    /**\n     * Serialize to a plain object.\n     *\n     * @returns {SerializedCID}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        codec: this.codec,\n        version: this.version,\n        hash: this.multihash\n      };\n    }\n    /**\n     * Compare equality with another CID.\n     *\n     * @param {CID} other\n     * @returns {bool}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.codec === other.codec && this.version === other.version && this.multihash.equals(other.multihash);\n    }\n    /**\n     * Test if the given input is a valid CID object.\n     * Throws if it is not.\n     *\n     * @param {any} other\n     * @returns {void}\n     */\n\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      var buffer = this._buffer;\n\n      if (!buffer) {\n        if (this.version === 0) {\n          buffer = this.multihash;\n        } else if (this.version === 1) {\n          buffer = Buffer.concat([Buffer.from('01', 'hex'), multicodec.getCodeVarint(this.codec), this.multihash]);\n        } else {\n          throw new Error('unsupported version');\n        } // Cache this buffer so it doesn't have to be recreated\n\n\n        Object.defineProperty(this, '_buffer', {\n          value: buffer\n        });\n      }\n\n      return buffer;\n    }\n    /**\n     * Get the prefix of the CID.\n     *\n     * @returns {Buffer}\n     * @readonly\n     */\n\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      return Buffer.concat([Buffer.from(\"0\".concat(this.version), 'hex'), multicodec.getCodeVarint(this.codec), mh.prefix(this.multihash)]);\n    }\n  }], [{\n    key: \"validateCID\",\n    value: function validateCID(other) {\n      var errorMsg = CIDUtil.checkCIDComponents(other);\n\n      if (errorMsg) {\n        throw new Error(errorMsg);\n      }\n    }\n  }]);\n\n  return CID;\n}();\n\nvar _CID = withIs(CID, {\n  className: 'CID',\n  symbolName: '@ipld/js-cid/CID'\n});\n\n_CID.codecs = codecs;\nmodule.exports = _CID;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/cids/src/index.js"],"names":["mh","require","multibase","multicodec","codecs","CIDUtil","withIs","CID","version","codec","multihash","module","exports","isCID","cid","Buffer","from","isEncoded","decode","parseInt","slice","toString","getCodec","rmPrefix","fromB58String","isBuffer","firstByte","v","validateCID","Error","name","length","_CID","base","toB58String","encode","buffer","toBaseEncodedString","hash","other","equals","_buffer","concat","getCodeVarint","Object","defineProperty","value","prefix","errorMsg","checkCIDComponents","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst mh = require('multihashes')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst codecs = require('multicodec/src/base-table')\nconst CIDUtil = require('./cid-util')\nconst withIs = require('class-is')\n\n/**\n * @typedef {Object} SerializedCID\n * @param {string} codec\n * @param {number} version\n * @param {Buffer} multihash\n *\n */\n\n/**\n * Test if the given input is a CID.\n * @function isCID\n * @memberof CID\n * @static\n * @param {any} other\n * @returns {bool}\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Buffer)\n   *   if (0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   *\n   * ..if only JS had traits..\n   * ```\n   *\n   * @param {string|Buffer} version\n   * @param {string} [codec]\n   * @param {Buffer} [multihash]\n   *\n   * @example\n   *\n   * new CID(<version>, <codec>, <multihash>)\n   * new CID(<cidStr>)\n   * new CID(<cid.buffer>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   *\n   */\n  constructor (version, codec, multihash) {\n    if (module.exports.isCID(version)) {\n      let cid = version\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = Buffer.from(cid.multihash)\n      return\n    }\n    if (typeof version === 'string') {\n      if (multibase.isEncoded(version)) { // CID String (encoded with multibase)\n        const cid = multibase.decode(version)\n        version = parseInt(cid.slice(0, 1).toString('hex'), 16)\n        codec = multicodec.getCodec(cid.slice(1))\n        multihash = multicodec.rmPrefix(cid.slice(1))\n      } else { // bs58 string encoded multihash\n        codec = 'dag-pb'\n        multihash = mh.fromB58String(version)\n        version = 0\n      }\n    } else if (Buffer.isBuffer(version)) {\n      const firstByte = version.slice(0, 1)\n      const v = parseInt(firstByte.toString('hex'), 16)\n      if (v === 0 || v === 1) { // CID\n        const cid = version\n        version = v\n        codec = multicodec.getCodec(cid.slice(1))\n        multihash = multicodec.rmPrefix(cid.slice(1))\n      } else { // multihash\n        codec = 'dag-pb'\n        multihash = version\n        version = 0\n      }\n    }\n\n    /**\n     * @type {string}\n     */\n    this.codec = codec\n\n    /**\n     * @type {number}\n     */\n    this.version = version\n\n    /**\n     * @type {Buffer}\n     */\n    this.multihash = multihash\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Buffer`\n   *\n   * @return {Buffer}\n   * @readonly\n   *\n   * @memberOf CID\n   */\n  get buffer () {\n    let buffer = this._buffer\n\n    if (!buffer) {\n      if (this.version === 0) {\n        buffer = this.multihash\n      } else if (this.version === 1) {\n        buffer = Buffer.concat([\n          Buffer.from('01', 'hex'),\n          multicodec.getCodeVarint(this.codec),\n          this.multihash\n        ])\n      } else {\n        throw new Error('unsupported version')\n      }\n\n      // Cache this buffer so it doesn't have to be recreated\n      Object.defineProperty(this, '_buffer', { value: buffer })\n    }\n\n    return buffer\n  }\n\n  /**\n   * Get the prefix of the CID.\n   *\n   * @returns {Buffer}\n   * @readonly\n   */\n  get prefix () {\n    return Buffer.concat([\n      Buffer.from(`0${this.version}`, 'hex'),\n      multicodec.getCodeVarint(this.codec),\n      mh.prefix(this.multihash)\n    ])\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    const { name, length } = mh.decode(this.multihash)\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\n    }\n\n    return new _CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new _CID(1, this.codec, this.multihash)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {string} [base='base58btc'] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base) {\n    base = base || 'base58btc'\n\n    switch (this.version) {\n      case 0: {\n        if (base !== 'base58btc') {\n          throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n        }\n        return mh.toB58String(this.multihash)\n      }\n      case 1:\n        return multibase.encode(base, this.buffer).toString()\n      default:\n        throw new Error('Unsupported version')\n    }\n  }\n\n  toString (base) {\n    return this.toBaseEncodedString(base)\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {bool}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      this.multihash.equals(other.multihash)\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other\n   * @returns {void}\n   */\n  static validateCID (other) {\n    let errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n}\n\nconst _CID = withIs(CID, {\n  className: 'CID',\n  symbolName: '@ipld/js-cid/CID'\n})\n\n_CID.codecs = codecs\n\nmodule.exports = _CID\n"]},"metadata":{},"sourceType":"script"}