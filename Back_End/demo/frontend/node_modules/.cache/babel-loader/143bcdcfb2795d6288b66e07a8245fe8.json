{"ast":null,"code":"/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nfunction randomHex(size, callback) {\n  var crypto = require('./crypto.js');\n\n  var isCallback = typeof callback === 'function';\n\n  if (size < 0 || size > 65536) {\n    if (isCallback) {\n      callback(new Error('Invalid size: It must be >=0 && <= 65536'));\n    } else {\n      throw new Error('Invalid size: It must be >=0 && <= 65536');\n    }\n  } // If environment is in node\n\n\n  if (typeof crypto !== 'undefined' && crypto.randomBytes) {\n    if (isCallback) {\n      crypto.randomBytes(size, function (err, result) {\n        if (!err) {\n          callback(null, \"0x\".concat(result.toString('hex')));\n        } else {\n          callback(err);\n        }\n      });\n    } else {\n      return \"0x\".concat(crypto.randomBytes(size).toString('hex'));\n    } // If environment is in browser\n\n  } else {\n    var cryptoLib;\n\n    if (typeof crypto !== 'undefined') {\n      cryptoLib = crypto;\n    } else if (typeof msCrypto !== 'undefined') {\n      /* eslint-disable no-undef */\n      cryptoLib = msCrypto;\n    }\n\n    if (cryptoLib && cryptoLib.getRandomValues) {\n      var randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));\n      var returnValue = \"0x\".concat(Array.from(randomBytes).map(function (arr) {\n        return arr.toString(16);\n      }).join(''));\n\n      if (isCallback) {\n        callback(null, returnValue);\n      } else {\n        return returnValue;\n      } // crypto object is missing in browser.\n\n    } else {\n      var error = new Error('\"crypto\" object does not exist. This Browser does not support generating secure random bytes.');\n\n      if (isCallback) {\n        callback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n}\n\nmodule.exports = randomHex;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-utils/randomhex/index.js"],"names":["randomHex","size","callback","crypto","require","isCallback","Error","randomBytes","err","result","toString","cryptoLib","msCrypto","getRandomValues","Uint8Array","returnValue","Array","from","map","arr","join","error","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAmC;AAC/B,MAAMC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAMC,UAAU,GAAG,OAAOH,QAAP,KAAoB,UAAvC;;AAEA,MAAID,IAAI,GAAG,CAAP,IAAYA,IAAI,GAAG,KAAvB,EAA8B;AAC1B,QAAII,UAAJ,EAAgB;AACZH,MAAAA,QAAQ,CAAC,IAAII,KAAJ,CAAU,0CAAV,CAAD,CAAR;AACH,KAFD,MAEO;AACH,YAAM,IAAIA,KAAJ,CAAU,0CAAV,CAAN;AACH;AACJ,GAV8B,CAY/B;;;AACA,MAAI,OAAOH,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACI,WAA5C,EAAyD;AACrD,QAAIF,UAAJ,EAAgB;AACZF,MAAAA,MAAM,CAACI,WAAP,CAAmBN,IAAnB,EAAyB,UAACO,GAAD,EAAMC,MAAN,EAAiB;AACtC,YAAI,CAACD,GAAL,EAAU;AACNN,UAAAA,QAAQ,CAAC,IAAD,cAAYO,MAAM,CAACC,QAAP,CAAgB,KAAhB,CAAZ,EAAR;AACH,SAFD,MAEO;AACHR,UAAAA,QAAQ,CAACM,GAAD,CAAR;AACH;AACJ,OAND;AAOH,KARD,MAQO;AACH,yBAAYL,MAAM,CAACI,WAAP,CAAmBN,IAAnB,EAAyBS,QAAzB,CAAkC,KAAlC,CAAZ;AACH,KAXoD,CAarD;;AACH,GAdD,MAcO;AACH,QAAIC,SAAJ;;AACA,QAAI,OAAOR,MAAP,KAAkB,WAAtB,EAAmC;AAC/BQ,MAAAA,SAAS,GAAGR,MAAZ;AACH,KAFD,MAEO,IAAI,OAAOS,QAAP,KAAoB,WAAxB,EAAqC;AACxC;AACAD,MAAAA,SAAS,GAAGC,QAAZ;AACH;;AAED,QAAID,SAAS,IAAIA,SAAS,CAACE,eAA3B,EAA4C;AACxC,UAAMN,WAAW,GAAGI,SAAS,CAACE,eAAV,CAA0B,IAAIC,UAAJ,CAAeb,IAAf,CAA1B,CAApB;AACA,UAAMc,WAAW,eAAQC,KAAK,CAACC,IAAN,CAAWV,WAAX,EACpBW,GADoB,CAChB,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACT,QAAJ,CAAa,EAAb,CAAJ;AAAA,OADa,EAEpBU,IAFoB,CAEf,EAFe,CAAR,CAAjB;;AAIA,UAAIf,UAAJ,EAAgB;AACZH,QAAAA,QAAQ,CAAC,IAAD,EAAOa,WAAP,CAAR;AACH,OAFD,MAEO;AACH,eAAOA,WAAP;AACH,OAVuC,CAYxC;;AACH,KAbD,MAaO;AACH,UAAMM,KAAK,GAAG,IAAIf,KAAJ,CAAU,+FAAV,CAAd;;AAEA,UAAID,UAAJ,EAAgB;AACZH,QAAAA,QAAQ,CAACmB,KAAD,CAAR;AACH,OAFD,MAEO;AACH,cAAMA,KAAN;AACH;AACJ;AACJ;AACJ;;AAEDC,MAAM,CAACC,OAAP,GAAiBvB,SAAjB","sourcesContent":["/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nfunction randomHex(size, callback) {\n    const crypto = require('./crypto.js')\n    const isCallback = typeof callback === 'function'\n\n    if (size < 0 || size > 65536) {\n        if (isCallback) {\n            callback(new Error('Invalid size: It must be >=0 && <= 65536'))\n        } else {\n            throw new Error('Invalid size: It must be >=0 && <= 65536')\n        }\n    }\n\n    // If environment is in node\n    if (typeof crypto !== 'undefined' && crypto.randomBytes) {\n        if (isCallback) {\n            crypto.randomBytes(size, (err, result) => {\n                if (!err) {\n                    callback(null, `0x${result.toString('hex')}`)\n                } else {\n                    callback(err)\n                }\n            })\n        } else {\n            return `0x${crypto.randomBytes(size).toString('hex')}`\n        }\n\n        // If environment is in browser\n    } else {\n        let cryptoLib\n        if (typeof crypto !== 'undefined') {\n            cryptoLib = crypto\n        } else if (typeof msCrypto !== 'undefined') {\n            /* eslint-disable no-undef */\n            cryptoLib = msCrypto\n        }\n\n        if (cryptoLib && cryptoLib.getRandomValues) {\n            const randomBytes = cryptoLib.getRandomValues(new Uint8Array(size))\n            const returnValue = `0x${Array.from(randomBytes)\n                .map(arr => arr.toString(16))\n                .join('')}`\n\n            if (isCallback) {\n                callback(null, returnValue)\n            } else {\n                return returnValue\n            }\n\n            // crypto object is missing in browser.\n        } else {\n            const error = new Error('\"crypto\" object does not exist. This Browser does not support generating secure random bytes.')\n\n            if (isCallback) {\n                callback(error)\n            } else {\n                throw error\n            }\n        }\n    }\n}\n\nmodule.exports = randomHex\n"]},"metadata":{},"sourceType":"script"}