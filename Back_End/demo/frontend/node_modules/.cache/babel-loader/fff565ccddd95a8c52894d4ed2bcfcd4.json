{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _toArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toArray\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Hash = require('eth-lib/lib/hash');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./transactionType'),\n    rlpEncodeForLegacyTransaction = _require.rlpEncodeForLegacyTransaction,\n    rlpEncodeForValueTransfer = _require.rlpEncodeForValueTransfer,\n    rlpEncodeForValueTransferMemo = _require.rlpEncodeForValueTransferMemo,\n    rlpEncodeForFeeDelegatedValueTransferMemoWithRatio = _require.rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\n    rlpEncodeForFeeDelegatedValueTransfer = _require.rlpEncodeForFeeDelegatedValueTransfer,\n    rlpEncodeForFeeDelegatedValueTransferWithRatio = _require.rlpEncodeForFeeDelegatedValueTransferWithRatio,\n    rlpEncodeForFeeDelegatedValueTransferMemo = _require.rlpEncodeForFeeDelegatedValueTransferMemo,\n    rlpEncodeForAccountUpdate = _require.rlpEncodeForAccountUpdate,\n    rlpEncodeForContractDeploy = _require.rlpEncodeForContractDeploy,\n    rlpEncodeForContractExecution = _require.rlpEncodeForContractExecution,\n    rlpEncodeForFeeDelegatedAccountUpdate = _require.rlpEncodeForFeeDelegatedAccountUpdate,\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio = _require.rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n    rlpEncodeForFeeDelegatedSmartContractDeploy = _require.rlpEncodeForFeeDelegatedSmartContractDeploy,\n    rlpEncodeForFeeDelegatedSmartContractDeployWithRatio = _require.rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\n    rlpEncodeForFeeDelegatedSmartContractExecution = _require.rlpEncodeForFeeDelegatedSmartContractExecution,\n    rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio = _require.rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio,\n    rlpEncodeForCancel = _require.rlpEncodeForCancel,\n    rlpEncodeForFeeDelegatedCancel = _require.rlpEncodeForFeeDelegatedCancel,\n    rlpEncodeForFeeDelegatedCancelWithRatio = _require.rlpEncodeForFeeDelegatedCancelWithRatio,\n    rlpEncodeForChainDataAnchoring = _require.rlpEncodeForChainDataAnchoring,\n    parseAccountKey = _require.parseAccountKey;\n\nvar creationNotSupportError = 'ACCOUNT_CREATION transaction type is not supported yet.';\n\nfunction encodeRLPByTxType(transaction) {\n  transaction.type = transaction.senderRawTransaction ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction) : transaction.type;\n\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      throw new Error(creationNotSupportError);\n\n    case 'ACCOUNT_UPDATE':\n      return rlpEncodeForAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      return rlpEncodeForFeeDelegatedAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction);\n\n    case 'VALUE_TRANSFER':\n      return rlpEncodeForValueTransfer(transaction);\n\n    case 'VALUE_TRANSFER_MEMO':\n      return rlpEncodeForValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      return rlpEncodeForFeeDelegatedValueTransfer(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      return rlpEncodeForFeeDelegatedValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForFeeDelegatedSmartContractDeploy(transaction);\n\n    case 'SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForContractDeploy(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction);\n\n    case 'SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForFeeDelegatedSmartContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction);\n\n    case 'CANCEL':\n      return rlpEncodeForCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL':\n      return rlpEncodeForFeeDelegatedCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedCancelWithRatio(transaction);\n\n    case 'CHAIN_DATA_ANCHORING':\n      return rlpEncodeForChainDataAnchoring(transaction);\n\n    case 'LEGACY':\n    default:\n      return rlpEncodeForLegacyTransaction(transaction);\n  }\n} // case1) sig === [v, r, s]\n// case2) sig ===\n\n\nfunction makeRawTransaction(rlpEncoded, sig, transaction) {\n  var decodedValues = RLP.decode(rlpEncoded);\n  var rawTx;\n  transaction.type = transaction.senderRawTransaction ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction) : transaction.type;\n\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      throw new Error(creationNotSupportError);\n\n    case 'VALUE_TRANSFER':\n    case 'VALUE_TRANSFER_MEMO':\n    case 'ACCOUNT_UPDATE':\n    case 'SMART_CONTRACT_DEPLOY':\n    case 'SMART_CONTRACT_EXECUTION':\n    case 'CANCEL':\n    case 'CHAIN_DATA_ANCHORING':\n      return _combineSenderRawTransaction(rlpEncoded, sig);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n    case 'FEE_DELEGATED_CANCEL':\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          var decoded = decodeFromRawTransaction(transaction.senderRawTransaction);\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, decoded.signatures);\n        }\n\n        if (transaction.feePayer && transaction.feePayer !== '0x' && transaction.feePayerSignatures) {\n          return _combineFeePayerRawTransaction(rlpEncoded, transaction.feePayerSignatures, transaction, sig);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'LEGACY':\n    default:\n      rawTx = decodedValues.slice(0, 6).concat(sig[0]);\n      return {\n        rawTransaction: RLP.encode(rawTx),\n        signatures: sig[0],\n        feePayerSignatures: undefined\n      };\n  }\n}\n\nfunction _combineSenderRawTransaction(rlpEncoded, sig) {\n  var decodedValues = RLP.decode(rlpEncoded);\n\n  var _decodedValues = _slicedToArray(decodedValues, 1),\n      data = _decodedValues[0];\n\n  var _RLP$decode = RLP.decode(data),\n      _RLP$decode2 = _toArray(_RLP$decode),\n      txType = _RLP$decode2[0],\n      rawTx = _RLP$decode2.slice(1);\n\n  if (!Array.isArray(sig[0])) sig = [sig];\n  sig = refineSignatures(sig);\n  rawTx = [].concat(_toConsumableArray(rawTx), [sig]); // set default feepayer's information in rawTx\n\n  var typeString = utils.getTxTypeStringFromRawTransaction(txType);\n  if (typeString !== undefined && typeString.includes('FEE_DELEGATED')) rawTx = [].concat(_toConsumableArray(rawTx), ['0x', [['0x01', '0x', '0x']]]);\n  return {\n    rawTransaction: txType + RLP.encode(rawTx).slice(2),\n    signatures: sig,\n    feePayerSignatures: undefined\n  };\n}\n\nfunction _combineFeePayerRawTransaction(rlpEncoded, feePayerSignatures, transaction, senderSignature) {\n  var decodedValues = RLP.decode(rlpEncoded);\n\n  var _decodedValues2 = _slicedToArray(decodedValues, 1),\n      data = _decodedValues2[0];\n\n  var _RLP$decode3 = RLP.decode(data),\n      _RLP$decode4 = _toArray(_RLP$decode3),\n      txType = _RLP$decode4[0],\n      rawTx = _RLP$decode4.slice(1);\n\n  if (!Array.isArray(feePayerSignatures[0])) feePayerSignatures = [feePayerSignatures];\n  senderSignature = refineSignatures(senderSignature);\n  feePayerSignatures = refineSignatures(feePayerSignatures);\n  rawTx = [].concat(_toConsumableArray(rawTx), [senderSignature, transaction.feePayer.toLowerCase(), feePayerSignatures]);\n  return {\n    rawTransaction: txType + RLP.encode(rawTx).slice(2),\n    signatures: senderSignature,\n    feePayerSignatures: feePayerSignatures\n  };\n} // refineSignatures removes duplication and empty signatures\n\n\nfunction refineSignatures(sigArray) {\n  var set = new Set();\n  var result = [];\n\n  var _iterator = _createForOfIteratorHelper(sigArray),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var sig = _step.value;\n\n      if (sig.length > 0 && !utils.isEmptySig(sig)) {\n        var sigString = sig.join('');\n\n        if (!set.has(sigString)) {\n          set.add(sigString, true);\n          result.push(sig);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (result.length === 0) result = [['0x01', '0x', '0x']];\n  return result;\n}\n\nfunction extractSignatures(rawTransaction) {\n  var senderSignatures = [];\n  var feePayerSignatures = [];\n\n  var decoded = _decodeFromRawTransaction(rawTransaction);\n\n  senderSignatures = senderSignatures.concat(decoded.signatures);\n\n  if (decoded.feePayerSignatures) {\n    feePayerSignatures = feePayerSignatures.concat(decoded.feePayerSignatures);\n  }\n\n  return {\n    senderSignatures: senderSignatures,\n    feePayerSignatures: feePayerSignatures,\n    decodedTransaction: decoded\n  };\n}\n\nfunction splitFeePayer(rawTransaction) {\n  var typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n  if (!typeString || !typeString.includes('FEE_DELEGATED')) throw new Error(\"Failed to split fee payer: not a fee delegated transaction type('\".concat(typeString || 'LEGACY', \"')\"));\n  var txType = rawTransaction.slice(0, 4);\n  var decodedValues = RLP.decode(utils.addHexPrefix(rawTransaction.slice(4)));\n  var detachFeePayer = decodedValues.splice(0, decodedValues.length - 2);\n  detachFeePayer.push('0x');\n  detachFeePayer.push([['0x01', '0x', '0x']]);\n  return {\n    senderRawTransaction: txType + RLP.encode(detachFeePayer).slice(2),\n    feePayer: decodedValues[0],\n    feePayerSignatures: decodedValues[1]\n  };\n}\n\nfunction decodeFromRawTransaction(rawTransaction, type) {\n  var decodeResult = _decodeFromRawTransaction(rawTransaction, type);\n\n  switch (decodeResult.type) {\n    case 'ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        decodeResult = parseAccountKey(decodeResult);\n      }\n  }\n\n  return decodeResult;\n}\n\nfunction _decodeFromRawTransaction(rawTransaction, type) {\n  var typeString = type;\n\n  if (typeString === undefined || typeString !== 'LEGACY') {\n    typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n\n    if (typeString === undefined) {\n      typeString = 'LEGACY';\n    } else {\n      rawTransaction = \"0x\".concat(rawTransaction.slice(4));\n    }\n  }\n\n  switch (typeString) {\n    case 'LEGACY':\n      {\n        var _RLP$decode5 = RLP.decode(rawTransaction),\n            _RLP$decode6 = _slicedToArray(_RLP$decode5, 9),\n            nonce = _RLP$decode6[0],\n            gasPrice = _RLP$decode6[1],\n            gas = _RLP$decode6[2],\n            to = _RLP$decode6[3],\n            value = _RLP$decode6[4],\n            data = _RLP$decode6[5],\n            v = _RLP$decode6[6],\n            r = _RLP$decode6[7],\n            s = _RLP$decode6[8];\n\n        return {\n          type: typeString,\n          nonce: nonce,\n          gasPrice: gasPrice,\n          gas: gas,\n          to: to,\n          value: value,\n          data: data,\n          v: v,\n          r: r,\n          s: s,\n          signatures: [v, r, s]\n        };\n      }\n\n    case 'VALUE_TRANSFER':\n      {\n        var _RLP$decode7 = RLP.decode(rawTransaction),\n            _RLP$decode8 = _slicedToArray(_RLP$decode7, 7),\n            _nonce = _RLP$decode8[0],\n            _gasPrice = _RLP$decode8[1],\n            _gas = _RLP$decode8[2],\n            _to = _RLP$decode8[3],\n            _value = _RLP$decode8[4],\n            from = _RLP$decode8[5],\n            signatures = _RLP$decode8[6];\n\n        return {\n          type: typeString,\n          nonce: _nonce,\n          gasPrice: _gasPrice,\n          gas: _gas,\n          to: _to,\n          value: _value,\n          from: from,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures: signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      {\n        var _RLP$decode9 = RLP.decode(rawTransaction),\n            _RLP$decode10 = _slicedToArray(_RLP$decode9, 9),\n            _nonce2 = _RLP$decode10[0],\n            _gasPrice2 = _RLP$decode10[1],\n            _gas2 = _RLP$decode10[2],\n            _to2 = _RLP$decode10[3],\n            _value2 = _RLP$decode10[4],\n            _from = _RLP$decode10[5],\n            _signatures = _RLP$decode10[6],\n            feePayer = _RLP$decode10[7],\n            feePayerSignatures = _RLP$decode10[8];\n\n        return {\n          type: typeString,\n          nonce: _nonce2,\n          gasPrice: _gasPrice2,\n          gas: _gas2,\n          to: _to2,\n          value: _value2,\n          from: _from,\n          v: _signatures[0][0],\n          r: _signatures[0][1],\n          s: _signatures[0][2],\n          signatures: _signatures,\n          feePayer: feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures: feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      {\n        var _RLP$decode11 = RLP.decode(rawTransaction),\n            _RLP$decode12 = _slicedToArray(_RLP$decode11, 10),\n            _nonce3 = _RLP$decode12[0],\n            _gasPrice3 = _RLP$decode12[1],\n            _gas3 = _RLP$decode12[2],\n            _to3 = _RLP$decode12[3],\n            _value3 = _RLP$decode12[4],\n            _from2 = _RLP$decode12[5],\n            feeRatio = _RLP$decode12[6],\n            _signatures2 = _RLP$decode12[7],\n            _feePayer = _RLP$decode12[8],\n            _feePayerSignatures = _RLP$decode12[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce3,\n          gasPrice: _gasPrice3,\n          gas: _gas3,\n          to: _to3,\n          value: _value3,\n          from: _from2,\n          feeRatio: feeRatio,\n          v: _signatures2[0][0],\n          r: _signatures2[0][1],\n          s: _signatures2[0][2],\n          signatures: _signatures2,\n          feePayer: _feePayer,\n          payerV: _feePayerSignatures[0][0],\n          payerR: _feePayerSignatures[0][1],\n          payerS: _feePayerSignatures[0][2],\n          feePayerSignatures: _feePayerSignatures\n        };\n      }\n\n    case 'VALUE_TRANSFER_MEMO':\n      {\n        var _RLP$decode13 = RLP.decode(rawTransaction),\n            _RLP$decode14 = _slicedToArray(_RLP$decode13, 8),\n            _nonce4 = _RLP$decode14[0],\n            _gasPrice4 = _RLP$decode14[1],\n            _gas4 = _RLP$decode14[2],\n            _to4 = _RLP$decode14[3],\n            _value4 = _RLP$decode14[4],\n            _from3 = _RLP$decode14[5],\n            _data = _RLP$decode14[6],\n            _signatures3 = _RLP$decode14[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce4,\n          gasPrice: _gasPrice4,\n          gas: _gas4,\n          to: _to4,\n          value: _value4,\n          from: _from3,\n          data: _data,\n          v: _signatures3[0][0],\n          r: _signatures3[0][1],\n          s: _signatures3[0][2],\n          signatures: _signatures3\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      {\n        var _RLP$decode15 = RLP.decode(rawTransaction),\n            _RLP$decode16 = _slicedToArray(_RLP$decode15, 10),\n            _nonce5 = _RLP$decode16[0],\n            _gasPrice5 = _RLP$decode16[1],\n            _gas5 = _RLP$decode16[2],\n            _to5 = _RLP$decode16[3],\n            _value5 = _RLP$decode16[4],\n            _from4 = _RLP$decode16[5],\n            _data2 = _RLP$decode16[6],\n            _signatures4 = _RLP$decode16[7],\n            _feePayer2 = _RLP$decode16[8],\n            _feePayerSignatures2 = _RLP$decode16[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce5,\n          gasPrice: _gasPrice5,\n          gas: _gas5,\n          to: _to5,\n          value: _value5,\n          from: _from4,\n          data: _data2,\n          v: _signatures4[0][0],\n          r: _signatures4[0][1],\n          s: _signatures4[0][2],\n          signatures: _signatures4,\n          feePayer: _feePayer2,\n          payerV: _feePayerSignatures2[0][0],\n          payerR: _feePayerSignatures2[0][1],\n          payerS: _feePayerSignatures2[0][2],\n          feePayerSignatures: _feePayerSignatures2\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      {\n        var _RLP$decode17 = RLP.decode(rawTransaction),\n            _RLP$decode18 = _slicedToArray(_RLP$decode17, 11),\n            _nonce6 = _RLP$decode18[0],\n            _gasPrice6 = _RLP$decode18[1],\n            _gas6 = _RLP$decode18[2],\n            _to6 = _RLP$decode18[3],\n            _value6 = _RLP$decode18[4],\n            _from5 = _RLP$decode18[5],\n            _data3 = _RLP$decode18[6],\n            _feeRatio = _RLP$decode18[7],\n            _signatures5 = _RLP$decode18[8],\n            _feePayer3 = _RLP$decode18[9],\n            _feePayerSignatures3 = _RLP$decode18[10];\n\n        return {\n          type: typeString,\n          nonce: _nonce6,\n          gasPrice: _gasPrice6,\n          gas: _gas6,\n          to: _to6,\n          value: _value6,\n          from: _from5,\n          data: _data3,\n          feeRatio: _feeRatio,\n          v: _signatures5[0][0],\n          r: _signatures5[0][1],\n          s: _signatures5[0][2],\n          signatures: _signatures5,\n          feePayer: _feePayer3,\n          payerV: _feePayerSignatures3[0][0],\n          payerR: _feePayerSignatures3[0][1],\n          payerS: _feePayerSignatures3[0][2],\n          feePayerSignatures: _feePayerSignatures3\n        };\n      }\n\n    case 'ACCOUNT_CREATION':\n      {\n        throw new Error(creationNotSupportError);\n      }\n\n    case 'ACCOUNT_UPDATE':\n      {\n        var _RLP$decode19 = RLP.decode(rawTransaction),\n            _RLP$decode20 = _slicedToArray(_RLP$decode19, 6),\n            _nonce7 = _RLP$decode20[0],\n            _gasPrice7 = _RLP$decode20[1],\n            _gas7 = _RLP$decode20[2],\n            _from6 = _RLP$decode20[3],\n            accountKey = _RLP$decode20[4],\n            _signatures6 = _RLP$decode20[5];\n\n        return {\n          type: typeString,\n          nonce: _nonce7,\n          gasPrice: _gasPrice7,\n          gas: _gas7,\n          from: _from6,\n          accountKey: accountKey,\n          v: _signatures6[0][0],\n          r: _signatures6[0][1],\n          s: _signatures6[0][2],\n          signatures: _signatures6\n        };\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      {\n        var _RLP$decode21 = RLP.decode(rawTransaction),\n            _RLP$decode22 = _slicedToArray(_RLP$decode21, 8),\n            _nonce8 = _RLP$decode22[0],\n            _gasPrice8 = _RLP$decode22[1],\n            _gas8 = _RLP$decode22[2],\n            _from7 = _RLP$decode22[3],\n            _accountKey = _RLP$decode22[4],\n            _signatures7 = _RLP$decode22[5],\n            _feePayer4 = _RLP$decode22[6],\n            _feePayerSignatures4 = _RLP$decode22[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce8,\n          gasPrice: _gasPrice8,\n          gas: _gas8,\n          from: _from7,\n          accountKey: _accountKey,\n          v: _signatures7[0][0],\n          r: _signatures7[0][1],\n          s: _signatures7[0][2],\n          signatures: _signatures7,\n          feePayer: _feePayer4,\n          payerV: _feePayerSignatures4[0][0],\n          payerR: _feePayerSignatures4[0][1],\n          payerS: _feePayerSignatures4[0][2],\n          feePayerSignatures: _feePayerSignatures4\n        };\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        var _RLP$decode23 = RLP.decode(rawTransaction),\n            _RLP$decode24 = _slicedToArray(_RLP$decode23, 9),\n            _nonce9 = _RLP$decode24[0],\n            _gasPrice9 = _RLP$decode24[1],\n            _gas9 = _RLP$decode24[2],\n            _from8 = _RLP$decode24[3],\n            _accountKey2 = _RLP$decode24[4],\n            _feeRatio2 = _RLP$decode24[5],\n            _signatures8 = _RLP$decode24[6],\n            _feePayer5 = _RLP$decode24[7],\n            _feePayerSignatures5 = _RLP$decode24[8];\n\n        return {\n          type: typeString,\n          nonce: _nonce9,\n          gasPrice: _gasPrice9,\n          gas: _gas9,\n          from: _from8,\n          accountKey: _accountKey2,\n          feeRatio: _feeRatio2,\n          v: _signatures8[0][0],\n          r: _signatures8[0][1],\n          s: _signatures8[0][2],\n          signatures: _signatures8,\n          feePayer: _feePayer5,\n          payerV: _feePayerSignatures5[0][0],\n          payerR: _feePayerSignatures5[0][1],\n          payerS: _feePayerSignatures5[0][2],\n          feePayerSignatures: _feePayerSignatures5\n        };\n      }\n\n    case 'SMART_CONTRACT_DEPLOY':\n      {\n        var _RLP$decode25 = RLP.decode(rawTransaction),\n            _RLP$decode26 = _slicedToArray(_RLP$decode25, 10),\n            _nonce10 = _RLP$decode26[0],\n            _gasPrice10 = _RLP$decode26[1],\n            _gas10 = _RLP$decode26[2],\n            _to7 = _RLP$decode26[3],\n            _value7 = _RLP$decode26[4],\n            _from9 = _RLP$decode26[5],\n            _data4 = _RLP$decode26[6],\n            humanReadable = _RLP$decode26[7],\n            codeFormat = _RLP$decode26[8],\n            _signatures9 = _RLP$decode26[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce10,\n          gasPrice: _gasPrice10,\n          gas: _gas10,\n          to: _to7,\n          value: _value7,\n          from: _from9,\n          data: _data4,\n          humanReadable: humanReadable === '0x01',\n          codeFormat: codeFormat,\n          v: _signatures9[0][0],\n          r: _signatures9[0][1],\n          s: _signatures9[0][2],\n          signatures: _signatures9\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      {\n        var _RLP$decode27 = RLP.decode(rawTransaction),\n            _RLP$decode28 = _slicedToArray(_RLP$decode27, 12),\n            _nonce11 = _RLP$decode28[0],\n            _gasPrice11 = _RLP$decode28[1],\n            _gas11 = _RLP$decode28[2],\n            _to8 = _RLP$decode28[3],\n            _value8 = _RLP$decode28[4],\n            _from10 = _RLP$decode28[5],\n            _data5 = _RLP$decode28[6],\n            _humanReadable = _RLP$decode28[7],\n            _codeFormat = _RLP$decode28[8],\n            _signatures10 = _RLP$decode28[9],\n            _feePayer6 = _RLP$decode28[10],\n            _feePayerSignatures6 = _RLP$decode28[11];\n\n        return {\n          type: typeString,\n          nonce: _nonce11,\n          gasPrice: _gasPrice11,\n          gas: _gas11,\n          to: _to8,\n          value: _value8,\n          from: _from10,\n          data: _data5,\n          humanReadable: _humanReadable === '0x01',\n          codeFormat: _codeFormat,\n          v: _signatures10[0][0],\n          r: _signatures10[0][1],\n          s: _signatures10[0][2],\n          signatures: _signatures10,\n          feePayer: _feePayer6,\n          payerV: _feePayerSignatures6[0][0],\n          payerR: _feePayerSignatures6[0][1],\n          payerS: _feePayerSignatures6[0][2],\n          feePayerSignatures: _feePayerSignatures6\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      {\n        var _RLP$decode29 = RLP.decode(rawTransaction),\n            _RLP$decode30 = _slicedToArray(_RLP$decode29, 13),\n            _nonce12 = _RLP$decode30[0],\n            _gasPrice12 = _RLP$decode30[1],\n            _gas12 = _RLP$decode30[2],\n            _to9 = _RLP$decode30[3],\n            _value9 = _RLP$decode30[4],\n            _from11 = _RLP$decode30[5],\n            _data6 = _RLP$decode30[6],\n            _humanReadable2 = _RLP$decode30[7],\n            _feeRatio3 = _RLP$decode30[8],\n            _codeFormat2 = _RLP$decode30[9],\n            _signatures11 = _RLP$decode30[10],\n            _feePayer7 = _RLP$decode30[11],\n            _feePayerSignatures7 = _RLP$decode30[12];\n\n        return {\n          type: typeString,\n          nonce: _nonce12,\n          gasPrice: _gasPrice12,\n          gas: _gas12,\n          to: _to9,\n          value: _value9,\n          from: _from11,\n          data: _data6,\n          humanReadable: _humanReadable2 === '0x01',\n          feeRatio: _feeRatio3,\n          codeFormat: _codeFormat2,\n          v: _signatures11[0][0],\n          r: _signatures11[0][1],\n          s: _signatures11[0][2],\n          signatures: _signatures11,\n          feePayer: _feePayer7,\n          payerV: _feePayerSignatures7[0][0],\n          payerR: _feePayerSignatures7[0][1],\n          payerS: _feePayerSignatures7[0][2],\n          feePayerSignatures: _feePayerSignatures7\n        };\n      }\n\n    case 'SMART_CONTRACT_EXECUTION':\n      {\n        var _RLP$decode31 = RLP.decode(rawTransaction),\n            _RLP$decode32 = _slicedToArray(_RLP$decode31, 8),\n            _nonce13 = _RLP$decode32[0],\n            _gasPrice13 = _RLP$decode32[1],\n            _gas13 = _RLP$decode32[2],\n            _to10 = _RLP$decode32[3],\n            _value10 = _RLP$decode32[4],\n            _from12 = _RLP$decode32[5],\n            _data7 = _RLP$decode32[6],\n            _signatures12 = _RLP$decode32[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce13,\n          gasPrice: _gasPrice13,\n          gas: _gas13,\n          to: _to10,\n          value: _value10,\n          from: _from12,\n          data: _data7,\n          v: _signatures12[0][0],\n          r: _signatures12[0][1],\n          s: _signatures12[0][2],\n          signatures: _signatures12\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      {\n        var _RLP$decode33 = RLP.decode(rawTransaction),\n            _RLP$decode34 = _slicedToArray(_RLP$decode33, 10),\n            _nonce14 = _RLP$decode34[0],\n            _gasPrice14 = _RLP$decode34[1],\n            _gas14 = _RLP$decode34[2],\n            _to11 = _RLP$decode34[3],\n            _value11 = _RLP$decode34[4],\n            _from13 = _RLP$decode34[5],\n            _data8 = _RLP$decode34[6],\n            _signatures13 = _RLP$decode34[7],\n            _feePayer8 = _RLP$decode34[8],\n            _feePayerSignatures8 = _RLP$decode34[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce14,\n          gasPrice: _gasPrice14,\n          gas: _gas14,\n          to: _to11,\n          value: _value11,\n          from: _from13,\n          data: _data8,\n          v: _signatures13[0][0],\n          r: _signatures13[0][1],\n          s: _signatures13[0][2],\n          signatures: _signatures13,\n          feePayer: _feePayer8,\n          payerV: _feePayerSignatures8[0][0],\n          payerR: _feePayerSignatures8[0][1],\n          payerS: _feePayerSignatures8[0][2],\n          feePayerSignatures: _feePayerSignatures8\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        var _RLP$decode35 = RLP.decode(rawTransaction),\n            _RLP$decode36 = _slicedToArray(_RLP$decode35, 11),\n            _nonce15 = _RLP$decode36[0],\n            _gasPrice15 = _RLP$decode36[1],\n            _gas15 = _RLP$decode36[2],\n            _to12 = _RLP$decode36[3],\n            _value12 = _RLP$decode36[4],\n            _from14 = _RLP$decode36[5],\n            _data9 = _RLP$decode36[6],\n            _feeRatio4 = _RLP$decode36[7],\n            _signatures14 = _RLP$decode36[8],\n            _feePayer9 = _RLP$decode36[9],\n            _feePayerSignatures9 = _RLP$decode36[10];\n\n        return {\n          type: typeString,\n          nonce: _nonce15,\n          gasPrice: _gasPrice15,\n          gas: _gas15,\n          to: _to12,\n          value: _value12,\n          from: _from14,\n          data: _data9,\n          feeRatio: _feeRatio4,\n          v: _signatures14[0][0],\n          r: _signatures14[0][1],\n          s: _signatures14[0][2],\n          signatures: _signatures14,\n          feePayer: _feePayer9,\n          payerV: _feePayerSignatures9[0][0],\n          payerR: _feePayerSignatures9[0][1],\n          payerS: _feePayerSignatures9[0][2],\n          feePayerSignatures: _feePayerSignatures9\n        };\n      }\n\n    case 'CANCEL':\n      {\n        var _RLP$decode37 = RLP.decode(rawTransaction),\n            _RLP$decode38 = _slicedToArray(_RLP$decode37, 5),\n            _nonce16 = _RLP$decode38[0],\n            _gasPrice16 = _RLP$decode38[1],\n            _gas16 = _RLP$decode38[2],\n            _from15 = _RLP$decode38[3],\n            _signatures15 = _RLP$decode38[4];\n\n        return {\n          type: typeString,\n          nonce: _nonce16,\n          gasPrice: _gasPrice16,\n          gas: _gas16,\n          from: _from15,\n          v: _signatures15[0][0],\n          r: _signatures15[0][1],\n          s: _signatures15[0][2],\n          signatures: _signatures15\n        };\n      }\n\n    case 'FEE_DELEGATED_CANCEL':\n      {\n        var _RLP$decode39 = RLP.decode(rawTransaction),\n            _RLP$decode40 = _slicedToArray(_RLP$decode39, 7),\n            _nonce17 = _RLP$decode40[0],\n            _gasPrice17 = _RLP$decode40[1],\n            _gas17 = _RLP$decode40[2],\n            _from16 = _RLP$decode40[3],\n            _signatures16 = _RLP$decode40[4],\n            _feePayer10 = _RLP$decode40[5],\n            _feePayerSignatures10 = _RLP$decode40[6];\n\n        return {\n          type: typeString,\n          nonce: _nonce17,\n          gasPrice: _gasPrice17,\n          gas: _gas17,\n          from: _from16,\n          v: _signatures16[0][0],\n          r: _signatures16[0][1],\n          s: _signatures16[0][2],\n          signatures: _signatures16,\n          feePayer: _feePayer10,\n          payerV: _feePayerSignatures10[0][0],\n          payerR: _feePayerSignatures10[0][1],\n          payerS: _feePayerSignatures10[0][2],\n          feePayerSignatures: _feePayerSignatures10\n        };\n      }\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      {\n        var _RLP$decode41 = RLP.decode(rawTransaction),\n            _RLP$decode42 = _slicedToArray(_RLP$decode41, 8),\n            _nonce18 = _RLP$decode42[0],\n            _gasPrice18 = _RLP$decode42[1],\n            _gas18 = _RLP$decode42[2],\n            _from17 = _RLP$decode42[3],\n            _feeRatio5 = _RLP$decode42[4],\n            _signatures17 = _RLP$decode42[5],\n            _feePayer11 = _RLP$decode42[6],\n            _feePayerSignatures11 = _RLP$decode42[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce18,\n          gasPrice: _gasPrice18,\n          gas: _gas18,\n          from: _from17,\n          feeRatio: _feeRatio5,\n          v: _signatures17[0][0],\n          r: _signatures17[0][1],\n          s: _signatures17[0][2],\n          signatures: _signatures17,\n          feePayer: _feePayer11,\n          payerV: _feePayerSignatures11[0][0],\n          payerR: _feePayerSignatures11[0][1],\n          payerS: _feePayerSignatures11[0][2],\n          feePayerSignatures: _feePayerSignatures11\n        };\n      }\n\n    case 'CHAIN_DATA_ANCHORING':\n      {\n        var _RLP$decode43 = RLP.decode(rawTransaction),\n            _RLP$decode44 = _slicedToArray(_RLP$decode43, 6),\n            _nonce19 = _RLP$decode44[0],\n            _gasPrice19 = _RLP$decode44[1],\n            _gas19 = _RLP$decode44[2],\n            _from18 = _RLP$decode44[3],\n            _data10 = _RLP$decode44[4],\n            _signatures18 = _RLP$decode44[5];\n\n        return {\n          type: typeString,\n          nonce: _nonce19,\n          gasPrice: _gasPrice19,\n          gas: _gas19,\n          from: _from18,\n          data: _data10,\n          v: _signatures18[0][0],\n          r: _signatures18[0][1],\n          s: _signatures18[0][2],\n          signatures: _signatures18\n        };\n      }\n  }\n}\n\nfunction overwriteSignature(rawTransaction, txObj, signature, feePayerSignature) {\n  if (signature === undefined) {\n    signature = [txObj.v, txObj.r, txObj.s];\n  }\n\n  if (txObj.type.includes('FEE_DELEGATED') && feePayerSignature === undefined) {\n    feePayerSignature = [txObj.payerV, txObj.payerR, txObj.payerS];\n  }\n\n  if (txObj.type === 'LEGACY') {\n    var decodeLegacy = RLP.decode(rawTransaction);\n    decodeLegacy = decodeLegacy.slice(0, 6).concat(signature);\n    return RLP.encode(decodeLegacy);\n  }\n\n  var type = rawTransaction.slice(0, 4);\n  var typeDetached = \"0x\".concat(rawTransaction.slice(4));\n  var data = RLP.decode(typeDetached);\n\n  if (txObj.type.includes('FEE_DELEGATED')) {\n    data[data.length - 3] = [signature];\n    data[data.length - 1] = [feePayerSignature];\n  } else {\n    data[data.length - 1] = [signature];\n  }\n\n  return type + RLP.encode(data).slice(2);\n}\n\nfunction getSenderTxHash(rawTransaction) {\n  var typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n  if (typeString === undefined || !typeString.includes('FEE_DELEGATED')) return Hash.keccak256(rawTransaction);\n  var type = rawTransaction.slice(0, 4);\n  var typeDetached = \"0x\".concat(rawTransaction.slice(4));\n  var data = RLP.decode(typeDetached);\n  return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2));\n}\n\nmodule.exports = {\n  encodeRLPByTxType: encodeRLPByTxType,\n  makeRawTransaction: makeRawTransaction,\n  decodeFromRawTransaction: decodeFromRawTransaction,\n  overwriteSignature: overwriteSignature,\n  getSenderTxHash: getSenderTxHash,\n  splitFeePayer: splitFeePayer,\n  extractSignatures: extractSignatures\n};","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/makeRawTransaction.js"],"names":["RLP","require","Hash","utils","rlpEncodeForLegacyTransaction","rlpEncodeForValueTransfer","rlpEncodeForValueTransferMemo","rlpEncodeForFeeDelegatedValueTransferMemoWithRatio","rlpEncodeForFeeDelegatedValueTransfer","rlpEncodeForFeeDelegatedValueTransferWithRatio","rlpEncodeForFeeDelegatedValueTransferMemo","rlpEncodeForAccountUpdate","rlpEncodeForContractDeploy","rlpEncodeForContractExecution","rlpEncodeForFeeDelegatedAccountUpdate","rlpEncodeForFeeDelegatedAccountUpdateWithRatio","rlpEncodeForFeeDelegatedSmartContractDeploy","rlpEncodeForFeeDelegatedSmartContractDeployWithRatio","rlpEncodeForFeeDelegatedSmartContractExecution","rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio","rlpEncodeForCancel","rlpEncodeForFeeDelegatedCancel","rlpEncodeForFeeDelegatedCancelWithRatio","rlpEncodeForChainDataAnchoring","parseAccountKey","creationNotSupportError","encodeRLPByTxType","transaction","type","senderRawTransaction","getTxTypeStringFromRawTransaction","Error","makeRawTransaction","rlpEncoded","sig","decodedValues","decode","rawTx","_combineSenderRawTransaction","decoded","decodeFromRawTransaction","_combineFeePayerRawTransaction","signatures","feePayer","feePayerSignatures","slice","concat","rawTransaction","encode","undefined","data","txType","Array","isArray","refineSignatures","typeString","includes","senderSignature","toLowerCase","sigArray","set","Set","result","length","isEmptySig","sigString","join","has","add","push","extractSignatures","senderSignatures","_decodeFromRawTransaction","decodedTransaction","splitFeePayer","addHexPrefix","detachFeePayer","splice","decodeResult","nonce","gasPrice","gas","to","value","v","r","s","from","payerV","payerR","payerS","feeRatio","accountKey","humanReadable","codeFormat","overwriteSignature","txObj","signature","feePayerSignature","decodeLegacy","typeDetached","getSenderTxHash","keccak256","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Hash = require('eth-lib/lib/hash')\nconst utils = require('../../../caver-utils')\n\nconst {\n    rlpEncodeForLegacyTransaction,\n    rlpEncodeForValueTransfer,\n    rlpEncodeForValueTransferMemo,\n    rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\n    rlpEncodeForFeeDelegatedValueTransfer,\n    rlpEncodeForFeeDelegatedValueTransferWithRatio,\n    rlpEncodeForFeeDelegatedValueTransferMemo,\n    rlpEncodeForAccountUpdate,\n    rlpEncodeForContractDeploy,\n    rlpEncodeForContractExecution,\n    rlpEncodeForFeeDelegatedAccountUpdate,\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n    rlpEncodeForFeeDelegatedSmartContractDeploy,\n    rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\n    rlpEncodeForFeeDelegatedSmartContractExecution,\n    rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio,\n\n    rlpEncodeForCancel,\n    rlpEncodeForFeeDelegatedCancel,\n    rlpEncodeForFeeDelegatedCancelWithRatio,\n    rlpEncodeForChainDataAnchoring,\n\n    parseAccountKey,\n} = require('./transactionType')\n\nconst creationNotSupportError = 'ACCOUNT_CREATION transaction type is not supported yet.'\n\nfunction encodeRLPByTxType(transaction) {\n    transaction.type = transaction.senderRawTransaction\n        ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction)\n        : transaction.type\n\n    switch (transaction.type) {\n        case 'ACCOUNT_CREATION':\n            throw new Error(creationNotSupportError)\n        case 'ACCOUNT_UPDATE':\n            return rlpEncodeForAccountUpdate(transaction)\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n            return rlpEncodeForFeeDelegatedAccountUpdate(transaction)\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n            return rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction)\n        case 'VALUE_TRANSFER':\n            return rlpEncodeForValueTransfer(transaction)\n        case 'VALUE_TRANSFER_MEMO':\n            return rlpEncodeForValueTransferMemo(transaction)\n        case 'FEE_DELEGATED_VALUE_TRANSFER':\n            return rlpEncodeForFeeDelegatedValueTransfer(transaction)\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n            return rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction)\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n            return rlpEncodeForFeeDelegatedValueTransferMemo(transaction)\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n            return rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction)\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n            return rlpEncodeForFeeDelegatedSmartContractDeploy(transaction)\n        case 'SMART_CONTRACT_DEPLOY':\n            return rlpEncodeForContractDeploy(transaction)\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n            return rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction)\n        case 'SMART_CONTRACT_EXECUTION':\n            return rlpEncodeForContractExecution(transaction)\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n            return rlpEncodeForFeeDelegatedSmartContractExecution(transaction)\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n            return rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction)\n        case 'CANCEL':\n            return rlpEncodeForCancel(transaction)\n        case 'FEE_DELEGATED_CANCEL':\n            return rlpEncodeForFeeDelegatedCancel(transaction)\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n            return rlpEncodeForFeeDelegatedCancelWithRatio(transaction)\n        case 'CHAIN_DATA_ANCHORING':\n            return rlpEncodeForChainDataAnchoring(transaction)\n        case 'LEGACY':\n        default:\n            return rlpEncodeForLegacyTransaction(transaction)\n    }\n}\n\n// case1) sig === [v, r, s]\n// case2) sig ===\nfunction makeRawTransaction(rlpEncoded, sig, transaction) {\n    const decodedValues = RLP.decode(rlpEncoded)\n    let rawTx\n\n    transaction.type = transaction.senderRawTransaction\n        ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction)\n        : transaction.type\n\n    switch (transaction.type) {\n        case 'ACCOUNT_CREATION':\n            throw new Error(creationNotSupportError)\n        case 'VALUE_TRANSFER':\n        case 'VALUE_TRANSFER_MEMO':\n        case 'ACCOUNT_UPDATE':\n        case 'SMART_CONTRACT_DEPLOY':\n        case 'SMART_CONTRACT_EXECUTION':\n        case 'CANCEL':\n        case 'CHAIN_DATA_ANCHORING':\n            return _combineSenderRawTransaction(rlpEncoded, sig)\n        case 'FEE_DELEGATED_VALUE_TRANSFER':\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n        case 'FEE_DELEGATED_CANCEL':\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO': {\n            if (transaction.senderRawTransaction) {\n                const decoded = decodeFromRawTransaction(transaction.senderRawTransaction)\n                return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, decoded.signatures)\n            }\n            if (transaction.feePayer && transaction.feePayer !== '0x' && transaction.feePayerSignatures) {\n                return _combineFeePayerRawTransaction(rlpEncoded, transaction.feePayerSignatures, transaction, sig)\n            }\n            return _combineSenderRawTransaction(rlpEncoded, sig)\n        }\n        case 'LEGACY':\n        default:\n            rawTx = decodedValues.slice(0, 6).concat(sig[0])\n            return {\n                rawTransaction: RLP.encode(rawTx),\n                signatures: sig[0],\n                feePayerSignatures: undefined,\n            }\n    }\n}\n\nfunction _combineSenderRawTransaction(rlpEncoded, sig) {\n    const decodedValues = RLP.decode(rlpEncoded)\n\n    const [data] = decodedValues\n    let [txType, ...rawTx] = RLP.decode(data)\n\n    if (!Array.isArray(sig[0])) sig = [sig]\n    sig = refineSignatures(sig)\n\n    rawTx = [...rawTx, sig]\n\n    // set default feepayer's information in rawTx\n    const typeString = utils.getTxTypeStringFromRawTransaction(txType)\n    if (typeString !== undefined && typeString.includes('FEE_DELEGATED')) rawTx = [...rawTx, '0x', [['0x01', '0x', '0x']]]\n\n    return {\n        rawTransaction: txType + RLP.encode(rawTx).slice(2),\n        signatures: sig,\n        feePayerSignatures: undefined,\n    }\n}\n\nfunction _combineFeePayerRawTransaction(rlpEncoded, feePayerSignatures, transaction, senderSignature) {\n    const decodedValues = RLP.decode(rlpEncoded)\n\n    const [data] = decodedValues\n    let [txType, ...rawTx] = RLP.decode(data)\n\n    if (!Array.isArray(feePayerSignatures[0])) feePayerSignatures = [feePayerSignatures]\n    senderSignature = refineSignatures(senderSignature)\n    feePayerSignatures = refineSignatures(feePayerSignatures)\n\n    rawTx = [...rawTx, senderSignature, transaction.feePayer.toLowerCase(), feePayerSignatures]\n\n    return {\n        rawTransaction: txType + RLP.encode(rawTx).slice(2),\n        signatures: senderSignature,\n        feePayerSignatures,\n    }\n}\n\n// refineSignatures removes duplication and empty signatures\nfunction refineSignatures(sigArray) {\n    const set = new Set()\n    let result = []\n    for (const sig of sigArray) {\n        if (sig.length > 0 && !utils.isEmptySig(sig)) {\n            const sigString = sig.join('')\n            if (!set.has(sigString)) {\n                set.add(sigString, true)\n                result.push(sig)\n            }\n        }\n    }\n\n    if (result.length === 0) result = [['0x01', '0x', '0x']]\n\n    return result\n}\n\nfunction extractSignatures(rawTransaction) {\n    let senderSignatures = []\n    let feePayerSignatures = []\n\n    const decoded = _decodeFromRawTransaction(rawTransaction)\n    senderSignatures = senderSignatures.concat(decoded.signatures)\n    if (decoded.feePayerSignatures) {\n        feePayerSignatures = feePayerSignatures.concat(decoded.feePayerSignatures)\n    }\n    return { senderSignatures, feePayerSignatures, decodedTransaction: decoded }\n}\n\nfunction splitFeePayer(rawTransaction) {\n    const typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\n\n    if (!typeString || !typeString.includes('FEE_DELEGATED'))\n        throw new Error(`Failed to split fee payer: not a fee delegated transaction type('${typeString || 'LEGACY'}')`)\n\n    const txType = rawTransaction.slice(0, 4)\n    const decodedValues = RLP.decode(utils.addHexPrefix(rawTransaction.slice(4)))\n\n    const detachFeePayer = decodedValues.splice(0, decodedValues.length - 2)\n    detachFeePayer.push('0x')\n    detachFeePayer.push([['0x01', '0x', '0x']])\n\n    return {\n        senderRawTransaction: txType + RLP.encode(detachFeePayer).slice(2),\n        feePayer: decodedValues[0],\n        feePayerSignatures: decodedValues[1],\n    }\n}\n\nfunction decodeFromRawTransaction(rawTransaction, type) {\n    let decodeResult = _decodeFromRawTransaction(rawTransaction, type)\n\n    switch (decodeResult.type) {\n        case 'ACCOUNT_UPDATE':\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO': {\n            decodeResult = parseAccountKey(decodeResult)\n        }\n    }\n    return decodeResult\n}\n\nfunction _decodeFromRawTransaction(rawTransaction, type) {\n    let typeString = type\n    if (typeString === undefined || typeString !== 'LEGACY') {\n        typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\n        if (typeString === undefined) {\n            typeString = 'LEGACY'\n        } else {\n            rawTransaction = `0x${rawTransaction.slice(4)}`\n        }\n    }\n\n    switch (typeString) {\n        case 'LEGACY': {\n            const [nonce, gasPrice, gas, to, value, data, v, r, s] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                data,\n                v,\n                r,\n                s,\n                signatures: [v, r, s],\n            }\n        }\n        case 'VALUE_TRANSFER': {\n            const [nonce, gasPrice, gas, to, value, from, signatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n            }\n        }\n        case 'FEE_DELEGATED_VALUE_TRANSFER': {\n            const [nonce, gasPrice, gas, to, value, from, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO': {\n            const [nonce, gasPrice, gas, to, value, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                feeRatio,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'VALUE_TRANSFER_MEMO': {\n            const [nonce, gasPrice, gas, to, value, from, data, signatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n            }\n        }\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO': {\n            const [nonce, gasPrice, gas, to, value, from, data, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO': {\n            const [nonce, gasPrice, gas, to, value, from, data, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(\n                rawTransaction\n            )\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                feeRatio,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'ACCOUNT_CREATION': {\n            throw new Error(creationNotSupportError)\n        }\n        case 'ACCOUNT_UPDATE': {\n            const [nonce, gasPrice, gas, from, accountKey, signatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                from,\n                accountKey,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n            }\n        }\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE': {\n            const [nonce, gasPrice, gas, from, accountKey, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                from,\n                accountKey,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO': {\n            const [nonce, gasPrice, gas, from, accountKey, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                from,\n                accountKey,\n                feeRatio,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'SMART_CONTRACT_DEPLOY': {\n            const [nonce, gasPrice, gas, to, value, from, data, humanReadable, codeFormat, signatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                humanReadable: humanReadable === '0x01',\n                codeFormat,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n            }\n        }\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY': {\n            const [\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                humanReadable,\n                codeFormat,\n                signatures,\n                feePayer,\n                feePayerSignatures,\n            ] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                humanReadable: humanReadable === '0x01',\n                codeFormat,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO': {\n            const [\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                humanReadable,\n                feeRatio,\n                codeFormat,\n                signatures,\n                feePayer,\n                feePayerSignatures,\n            ] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                humanReadable: humanReadable === '0x01',\n                feeRatio,\n                codeFormat,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'SMART_CONTRACT_EXECUTION': {\n            const [nonce, gasPrice, gas, to, value, from, data, signatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n            }\n        }\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION': {\n            const [nonce, gasPrice, gas, to, value, from, data, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO': {\n            const [nonce, gasPrice, gas, to, value, from, data, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(\n                rawTransaction\n            )\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                from,\n                data,\n                feeRatio,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'CANCEL': {\n            const [nonce, gasPrice, gas, from, signatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                from,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n            }\n        }\n        case 'FEE_DELEGATED_CANCEL': {\n            const [nonce, gasPrice, gas, from, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                from,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO': {\n            const [nonce, gasPrice, gas, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                from,\n                feeRatio,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n                feePayer,\n                payerV: feePayerSignatures[0][0],\n                payerR: feePayerSignatures[0][1],\n                payerS: feePayerSignatures[0][2],\n                feePayerSignatures,\n            }\n        }\n        case 'CHAIN_DATA_ANCHORING': {\n            const [nonce, gasPrice, gas, from, data, signatures] = RLP.decode(rawTransaction)\n            return {\n                type: typeString,\n                nonce,\n                gasPrice,\n                gas,\n                from,\n                data: data,\n                v: signatures[0][0],\n                r: signatures[0][1],\n                s: signatures[0][2],\n                signatures,\n            }\n        }\n    }\n}\n\nfunction overwriteSignature(rawTransaction, txObj, signature, feePayerSignature) {\n    if (signature === undefined) {\n        signature = [txObj.v, txObj.r, txObj.s]\n    }\n    if (txObj.type.includes('FEE_DELEGATED') && feePayerSignature === undefined) {\n        feePayerSignature = [txObj.payerV, txObj.payerR, txObj.payerS]\n    }\n\n    if (txObj.type === 'LEGACY') {\n        let decodeLegacy = RLP.decode(rawTransaction)\n        decodeLegacy = decodeLegacy.slice(0, 6).concat(signature)\n        return RLP.encode(decodeLegacy)\n    }\n\n    const type = rawTransaction.slice(0, 4)\n    const typeDetached = `0x${rawTransaction.slice(4)}`\n\n    const data = RLP.decode(typeDetached)\n    if (txObj.type.includes('FEE_DELEGATED')) {\n        data[data.length - 3] = [signature]\n        data[data.length - 1] = [feePayerSignature]\n    } else {\n        data[data.length - 1] = [signature]\n    }\n\n    return type + RLP.encode(data).slice(2)\n}\n\nfunction getSenderTxHash(rawTransaction) {\n    const typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction)\n    if (typeString === undefined || !typeString.includes('FEE_DELEGATED')) return Hash.keccak256(rawTransaction)\n\n    const type = rawTransaction.slice(0, 4)\n    const typeDetached = `0x${rawTransaction.slice(4)}`\n\n    const data = RLP.decode(typeDetached)\n\n    return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2))\n}\n\nmodule.exports = {\n    encodeRLPByTxType,\n    makeRawTransaction,\n    decodeFromRawTransaction,\n    overwriteSignature,\n    getSenderTxHash,\n    splitFeePayer,\n    extractSignatures,\n}\n"]},"metadata":{},"sourceType":"script"}