{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nvar AccountKeyPublic = require('./accountKeyPublic');\n\nvar AccountKeyMultiSig = require('./accountKeyMultiSig');\n\nvar utils = require('../../../../caver-utils');\n\nvar AccountKeyRoleBased = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function AccountKeyRoleBased() {\n    var keyObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, AccountKeyRoleBased);\n\n    if (keyObj instanceof AccountKeyRoleBased) keyObj = keyObj.keys;\n    if (typeof keyObj !== 'object') throw new Error('RoleBasedKey should be created with Object');\n    validateKeyObject(keyObj);\n    this._transactionKey = makeAccountKey(keyObj.transactionKey);\n    this._updateKey = makeAccountKey(keyObj.updateKey);\n    this._feePayerKey = makeAccountKey(keyObj.feePayerKey);\n    this.type = AccountKeyEnum.ACCOUNT_KEY_ROLEBASED;\n  }\n\n  _createClass(AccountKeyRoleBased, [{\n    key: \"toPublicKey\",\n    value: function toPublicKey(toPublicKeyFunc) {\n      var returnObject = {};\n      if (this._transactionKey !== undefined) returnObject.transactionKey = this._transactionKey.toPublicKey(toPublicKeyFunc);\n      if (this._updateKey !== undefined) returnObject.updateKey = this._updateKey.toPublicKey(toPublicKeyFunc);\n      if (this._feePayerKey !== undefined) returnObject.feePayerKey = this._feePayerKey.toPublicKey(toPublicKeyFunc);\n      return returnObject;\n    }\n  }, {\n    key: \"update\",\n    value: function update(keys) {\n      // In the case of AccountKeyRoleBased, the key that does not update is not defined.\n      // To handle this case, when updating, only update the key for the defined role.\n      if (keys._transactionKey) this._transactionKey = keys._transactionKey;\n      if (keys._updateKey) this._updateKey = keys._updateKey;\n      if (keys._feePayerKey) this._feePayerKey = keys._feePayerKey;\n    }\n  }, {\n    key: \"defaultKey\",\n    get: function get() {\n      var definedKey = this._transactionKey ? this._transactionKey : this._updateKey ? this._updateKey : this._feePayerKey ? this._feePayerKey : undefined;\n      if (!definedKey) throw new Error('There is no key defined in AccountKeyRoleBased.');\n      return definedKey.defaultKey;\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      var keys = {};\n      if (this._transactionKey !== undefined) keys.transactionKey = this._transactionKey.keys;\n      if (this._updateKey !== undefined) keys.updateKey = this._updateKey.keys;\n      if (this._feePayerKey !== undefined) keys.feePayerKey = this._feePayerKey.keys;\n      return keys;\n    }\n  }, {\n    key: \"transactionKey\",\n    get: function get() {\n      if (!this._transactionKey) return undefined;\n      return this._transactionKey.keys;\n    }\n  }, {\n    key: \"updateKey\",\n    get: function get() {\n      if (!this._updateKey) return undefined;\n      return this._updateKey.keys;\n    }\n  }, {\n    key: \"feePayerKey\",\n    get: function get() {\n      if (!this._feePayerKey) return undefined;\n      return this._feePayerKey.keys;\n    }\n  }]);\n\n  return AccountKeyRoleBased;\n}();\n\nfunction makeAccountKey(key) {\n  if (key === undefined) return undefined;\n  if (Array.isArray(key) || key instanceof AccountKeyMultiSig) return new AccountKeyMultiSig(key);\n  if (typeof key !== 'string') throw new Error('Invalid account key type');\n  return new AccountKeyPublic(key);\n}\n\nfunction validateKeyObject(keyObject) {\n  var key = Object.keys(keyObject);\n  if (key.length === 0) throw new Error('Failed to create AccountKeyRoleBased: empty object');\n  key.map(function (role) {\n    if (!utils.isValidRole(role)) throw new Error(\"Failed to create AccountKeyRoleBased. Invalid role is defined : \".concat(role));\n\n    if (Array.isArray(keyObject[role])) {\n      var _iterator = _createForOfIteratorHelper(keyObject[role]),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          var parsed = utils.parsePrivateKey(p);\n          p = parsed.privateKey;\n          if (!utils.isValidPrivateKey(p)) throw new Error(\"Failed to create AccountKeyRoleBased. Invalid private key : \".concat(p));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } else if (!utils.isValidPrivateKey(keyObject[role])) throw new Error(\"Failed to create AccountKeyRoleBased. Invalid private key : \".concat(keyObject[role]));\n  });\n}\n\nmodule.exports = AccountKeyRoleBased;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/accountKey/accountKeyRoleBased.js"],"names":["AccountKeyEnum","require","AccountKeyPublic","AccountKeyMultiSig","utils","AccountKeyRoleBased","keyObj","keys","Error","validateKeyObject","_transactionKey","makeAccountKey","transactionKey","_updateKey","updateKey","_feePayerKey","feePayerKey","type","ACCOUNT_KEY_ROLEBASED","toPublicKeyFunc","returnObject","undefined","toPublicKey","definedKey","defaultKey","key","Array","isArray","keyObject","Object","length","map","role","isValidRole","p","parsed","parsePrivateKey","privateKey","isValidPrivateKey","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum\nconst AccountKeyPublic = require('./accountKeyPublic')\nconst AccountKeyMultiSig = require('./accountKeyMultiSig')\nconst utils = require('../../../../caver-utils')\n\nclass AccountKeyRoleBased {\n    constructor(keyObj = {}) {\n        if (keyObj instanceof AccountKeyRoleBased) keyObj = keyObj.keys\n\n        if (typeof keyObj !== 'object') throw new Error('RoleBasedKey should be created with Object')\n\n        validateKeyObject(keyObj)\n\n        this._transactionKey = makeAccountKey(keyObj.transactionKey)\n        this._updateKey = makeAccountKey(keyObj.updateKey)\n        this._feePayerKey = makeAccountKey(keyObj.feePayerKey)\n        this.type = AccountKeyEnum.ACCOUNT_KEY_ROLEBASED\n    }\n\n    get defaultKey() {\n        const definedKey = this._transactionKey\n            ? this._transactionKey\n            : this._updateKey\n            ? this._updateKey\n            : this._feePayerKey\n            ? this._feePayerKey\n            : undefined\n\n        if (!definedKey) throw new Error('There is no key defined in AccountKeyRoleBased.')\n\n        return definedKey.defaultKey\n    }\n\n    get keys() {\n        const keys = {}\n\n        if (this._transactionKey !== undefined) keys.transactionKey = this._transactionKey.keys\n        if (this._updateKey !== undefined) keys.updateKey = this._updateKey.keys\n        if (this._feePayerKey !== undefined) keys.feePayerKey = this._feePayerKey.keys\n\n        return keys\n    }\n\n    get transactionKey() {\n        if (!this._transactionKey) return undefined\n        return this._transactionKey.keys\n    }\n\n    get updateKey() {\n        if (!this._updateKey) return undefined\n        return this._updateKey.keys\n    }\n\n    get feePayerKey() {\n        if (!this._feePayerKey) return undefined\n        return this._feePayerKey.keys\n    }\n\n    toPublicKey(toPublicKeyFunc) {\n        const returnObject = {}\n\n        if (this._transactionKey !== undefined) returnObject.transactionKey = this._transactionKey.toPublicKey(toPublicKeyFunc)\n        if (this._updateKey !== undefined) returnObject.updateKey = this._updateKey.toPublicKey(toPublicKeyFunc)\n        if (this._feePayerKey !== undefined) returnObject.feePayerKey = this._feePayerKey.toPublicKey(toPublicKeyFunc)\n\n        return returnObject\n    }\n\n    update(keys) {\n        // In the case of AccountKeyRoleBased, the key that does not update is not defined.\n        // To handle this case, when updating, only update the key for the defined role.\n        if (keys._transactionKey) this._transactionKey = keys._transactionKey\n        if (keys._updateKey) this._updateKey = keys._updateKey\n        if (keys._feePayerKey) this._feePayerKey = keys._feePayerKey\n    }\n}\n\nfunction makeAccountKey(key) {\n    if (key === undefined) return undefined\n    if (Array.isArray(key) || key instanceof AccountKeyMultiSig) return new AccountKeyMultiSig(key)\n    if (typeof key !== 'string') throw new Error('Invalid account key type')\n\n    return new AccountKeyPublic(key)\n}\n\nfunction validateKeyObject(keyObject) {\n    const key = Object.keys(keyObject)\n    if (key.length === 0) throw new Error('Failed to create AccountKeyRoleBased: empty object')\n\n    key.map(role => {\n        if (!utils.isValidRole(role)) throw new Error(`Failed to create AccountKeyRoleBased. Invalid role is defined : ${role}`)\n\n        if (Array.isArray(keyObject[role])) {\n            for (let p of keyObject[role]) {\n                const parsed = utils.parsePrivateKey(p)\n                p = parsed.privateKey\n                if (!utils.isValidPrivateKey(p)) throw new Error(`Failed to create AccountKeyRoleBased. Invalid private key : ${p}`)\n            }\n        } else if (!utils.isValidPrivateKey(keyObject[role]))\n            throw new Error(`Failed to create AccountKeyRoleBased. Invalid private key : ${keyObject[role]}`)\n    })\n}\n\nmodule.exports = AccountKeyRoleBased\n"]},"metadata":{},"sourceType":"script"}