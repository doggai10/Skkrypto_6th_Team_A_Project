{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n/**\n * Representing an AccountKeyPublic.\n * @class\n */\n\n\nvar AccountKeyPublic =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  _createClass(AccountKeyPublic, null, [{\n    key: \"decode\",\n\n    /**\n     * Decodes an RLP-encoded AccountKeyPublic string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\n     * @return {AccountKeyPublic}\n     */\n    value: function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) throw new Error(\"Cannot decode to AccountKeyPublic. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG, \": \").concat(rlpEncodedKey));\n      var publicKey = RLP.decode(\"0x\".concat(rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)));\n      return new AccountKeyPublic(publicKey);\n    }\n    /**\n     * Creates AccountKeyPublic instance from x, y point\n     * @param {string} x - The x point.\n     * @param {string} y - The y point.\n     * @return {AccountKeyPublic}\n     */\n\n  }, {\n    key: \"fromXYPoint\",\n    value: function fromXYPoint(x, y) {\n      var xPoint = utils.leftPad(utils.stripHexPrefix(x), 64);\n      var yPoint = utils.leftPad(utils.stripHexPrefix(y), 64);\n      var pubKey = \"0x\".concat(xPoint + yPoint);\n      return new AccountKeyPublic(pubKey);\n    }\n    /**\n     * Creates AccountKeyPublic instance from public key string\n     * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\n     * @return {AccountKeyPublic}\n     */\n\n  }, {\n    key: \"fromPublicKey\",\n    value: function fromPublicKey(pubKey) {\n      return new AccountKeyPublic(pubKey);\n    }\n    /**\n     * Creates an instance of AccountKeyPublic.\n     * @param {string} publicKey - a public key\n     */\n\n  }]);\n\n  function AccountKeyPublic(publicKey) {\n    _classCallCheck(this, AccountKeyPublic);\n\n    this.publicKey = publicKey;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(AccountKeyPublic, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns an RLP-encoded AccountKeyPublic string.\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      var compressedPublicKey = utils.compressPublicKey(this.publicKey);\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2);\n    }\n    /**\n     * Returns the x and y coordinates of publicKey.\n     * @return {Array.<string>}\n     */\n\n  }, {\n    key: \"getXYPoint\",\n    value: function getXYPoint() {\n      return utils.xyPointFromPublicKey(this.publicKey);\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._publicKey;\n    },\n    set: function set(p) {\n      if (!utils.isValidPublicKey(p)) throw new Error(\"Invalid public key: \".concat(p));\n      this._publicKey = utils.addHexPrefix(p);\n    }\n  }]);\n\n  return AccountKeyPublic;\n}();\n\nmodule.exports = AccountKeyPublic;","map":null,"metadata":{},"sourceType":"script"}