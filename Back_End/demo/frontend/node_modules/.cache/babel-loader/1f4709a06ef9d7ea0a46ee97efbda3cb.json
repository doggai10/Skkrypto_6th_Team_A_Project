{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar AccountLib = require('eth-lib/lib/account');\n\nvar utils = require('../../../caver-utils/src');\n\nvar PrivateKey = require('./privateKey');\n\nvar _require = require('./keyringHelper'),\n    KEY_ROLE = _require.KEY_ROLE,\n    isMultipleKeysFormat = _require.isMultipleKeysFormat,\n    isRoleBasedKeysFormat = _require.isRoleBasedKeysFormat;\n\nvar _require2 = require('./keyringHelper'),\n    decryptKey = _require2.decryptKey;\n\nvar SingleKeyring = require('./singleKeyring');\n\nvar MultipleKeyring = require('./multipleKeyring');\n\nvar RoleBasedKeyring = require('./roleBasedKeyring');\n\nvar SignatureData = require('./signatureData');\n/**\n * representing a KeyringFactory which supports create functions for Keyring(SingleKeyring/MultipleKeyring/RoleBasedKeyring)\n * @class\n */\n\n\nvar KeyringFactory = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function KeyringFactory() {\n    _classCallCheck(this, KeyringFactory);\n  }\n\n  _createClass(KeyringFactory, null, [{\n    key: \"generate\",\n\n    /**\n     * generates a keyring instance\n     *\n     * `caver.wallet.keyring.generate()`\n     *\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {SingleKeyring}\n     */\n    value: function generate(entropy) {\n      var random = AccountLib.create(entropy || utils.randomHex(32));\n      return KeyringFactory.createWithSingleKey(random.address, random.privateKey);\n    }\n    /**\n     * generates a single private key string\n     *\n     * `caver.wallet.keyring.generateSingleKey()`\n     *\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {String}\n     */\n\n  }, {\n    key: \"generateSingleKey\",\n    value: function generateSingleKey(entropy) {\n      return AccountLib.create(entropy || utils.randomHex(32)).privateKey;\n    }\n    /**\n     * generates an array of private key strings\n     *\n     * `caver.wallet.keyring.generateMultipleKeys()`\n     *\n     * @param {number} num A length of keys.\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {Array.<String>}\n     */\n\n  }, {\n    key: \"generateMultipleKeys\",\n    value: function generateMultipleKeys(num, entropy) {\n      if (num === undefined || !_.isNumber(num) || _.isString(num)) {\n        throw new Error(\"To generate random multiple private keys, the number of keys should be defined.\");\n      }\n\n      var randomKeys = [];\n\n      for (var i = 0; i < num; i++) {\n        randomKeys.push(AccountLib.create(entropy || utils.randomHex(32)).privateKey);\n      }\n\n      return randomKeys;\n    }\n    /**\n     * generates an array in which keys to be used for each role are defined as an array.\n     *\n     * `caver.wallet.keyring.generateRoleBasedKeys()`\n     *\n     * @param {Array.<number>} numArr An array containing the number of keys for each role.\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {Array.<Array.<String>>}\n     */\n\n  }, {\n    key: \"generateRoleBasedKeys\",\n    value: function generateRoleBasedKeys(numArr, entropy) {\n      if (numArr === undefined || !_.isArray(numArr) || _.isString(numArr)) {\n        throw new Error(\"To generate random role-based private keys, an array containing the number of keys for each role should be defined.\");\n      }\n\n      if (numArr.length > KEY_ROLE.roleLast) {\n        throw new Error(\"Unsupported role. The length of array should be less than \".concat(KEY_ROLE.roleLast, \".\"));\n      }\n\n      var randomKeys = [[], [], []];\n\n      for (var i = 0; i < numArr.length; i++) {\n        for (var j = 0; j < numArr[i]; j++) {\n          randomKeys[i].push(AccountLib.create(entropy || utils.randomHex(32)).privateKey);\n        }\n      }\n\n      return randomKeys;\n    }\n    /**\n     * creates a keyring instance with parameters\n     *\n     * `caver.wallet.keyring.create('0x${address in hex}', '0x{private key}')`\n     * `caver.wallet.keyring.create('0x${address in hex}', ['0x{private key}', '0x{private key}'])`\n     * `caver.wallet.keyring.create('0x${address in hex}', [['0x{private key}', '0x{private key}'], ['0x{private key}'], ['0x{private key}', '0x{private key}']])`\n     *\n     * @param {string} address An address of keyring.\n     * @param {string|Array.<string>|Array.<Array.<string>>} key Private key(s) to use in keyring.\n     * @return {AbstractKeyring}\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(address, key) {\n      if (_.isString(key)) return KeyringFactory.createWithSingleKey(address, key);\n      if (isMultipleKeysFormat(key)) return KeyringFactory.createWithMultipleKey(address, key);\n      if (isRoleBasedKeysFormat(key)) return KeyringFactory.createWithRoleBasedKey(address, key);\n      throw new Error(\"Unsupported key type: \".concat(typeof key));\n    }\n    /**\n     * creates a keyring instance from a private key string. KlaytnWalletKey format also can be handled.\n     *\n     * @param {string} privateKey The key parameter can be either normal private key or KlaytnWalletKey format.\n     * @return {SingleKeyring}\n     */\n\n  }, {\n    key: \"createFromPrivateKey\",\n    value: function createFromPrivateKey(privateKey) {\n      if (!_.isString(privateKey)) throw new Error(\"Invalid format of parameter. 'privateKey' should be in format of string\");\n      if (utils.isKlaytnWalletKey(privateKey)) return KeyringFactory.createFromKlaytnWalletKey(privateKey);\n      var acct = AccountLib.fromPrivate(utils.addHexPrefix(privateKey));\n      return KeyringFactory.createWithSingleKey(acct.address, acct.privateKey);\n    }\n    /**\n     * creates a keyring instance from a KlaytnWalletKey string.\n     *\n     * @param {string} klaytnWalletKey A key string in KlaytnWalletKey format.\n     * @return {SingleKeyring}\n     */\n\n  }, {\n    key: \"createFromKlaytnWalletKey\",\n    value: function createFromKlaytnWalletKey(klaytnWalletKey) {\n      if (!_.isString(klaytnWalletKey)) throw new Error(\"Invalid format of parameter. 'klaytnWalletKey' should be in format of string\");\n\n      if (!utils.isKlaytnWalletKey(klaytnWalletKey)) {\n        throw new Error(\"Invalid KlaytnWalletKey: \".concat(klaytnWalletKey));\n      }\n\n      var parsed = utils.parsePrivateKey(klaytnWalletKey);\n      return KeyringFactory.createWithSingleKey(parsed.address, parsed.privateKey);\n    }\n    /**\n     * creates a keyring instance from an address and a private key string.\n     *\n     * @param {string} address An address of keyring.\n     * @param {string} key A private key string.\n     * @return {SingleKeyring}\n     */\n\n  }, {\n    key: \"createWithSingleKey\",\n    value: function createWithSingleKey(address, key) {\n      if (!_.isString(key)) throw new Error(\"Invalid format of parameter. Use 'fromMultipleKey' or 'fromRoleBasedKey' for two or more keys.\");\n      if (utils.isKlaytnWalletKey(key)) throw new Error(\"Invalid format of parameter. Use 'fromKlaytnWalletKey' to create Keyring from KlaytnWalletKey.\");\n      return new SingleKeyring(address, key);\n    }\n    /**\n     * creates a keyring instance from an address and multiple private key strings.\n     *\n     * @param {string} address An address of keyring.\n     * @param {Array.<string>} keyArray An array of private key strings.\n     * @return {MultipleKeyring}\n     */\n\n  }, {\n    key: \"createWithMultipleKey\",\n    value: function createWithMultipleKey(address, keyArray) {\n      if (!isMultipleKeysFormat(keyArray)) throw new Error(\"Invalid format of parameter. 'keyArray' should be an array of private key strings.\");\n      return new MultipleKeyring(address, keyArray);\n    }\n    /**\n     * creates a keyring instance from an address and an array in which keys to be used for each role are defined as an array.\n     *\n     * @param {string} address An address of keyring.\n     * @param {Array.<Array.<string>>} roledBasedKeyArray A two-dimensional array containing arrays of private key strings for each role.\n     * @return {RoleBasedKeyring}\n     */\n\n  }, {\n    key: \"createWithRoleBasedKey\",\n    value: function createWithRoleBasedKey(address, roledBasedKeyArray) {\n      if (!isRoleBasedKeysFormat(roledBasedKeyArray)) throw new Error(\"Invalid format of parameter. 'roledBasedKeyArray' should be in the form of an array defined as an array for the keys to be used for each role.\");\n      return new RoleBasedKeyring(address, roledBasedKeyArray);\n    }\n    /**\n     * decrypts a keystore v3 or v4 JSON and returns keyring instance.\n     *\n     * @param {object} keystore The encrypted keystore to decrypt.\n     * @param {string} password The password to use for decryption.\n     * @return {AbstractKeyring}\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(keystore, password) {\n      var json = _.isObject(keystore) ? keystore : JSON.parse(keystore);\n      if (json.version !== 3 && json.version !== 4) console.warn('This is not a V3 or V4 wallet.');\n\n      if (json.version === 3 && !json.crypto) {\n        throw new Error(\"Invalid keystore V3 format: 'crypto' is not defined.\");\n      } else if (json.version === 4 && !json.keyring) {\n        throw new Error(\"Invalid keystore V4 format: 'keyring' is not defined.\");\n      }\n\n      if (json.crypto) {\n        if (json.keyring) throw new Error(\"Invalid key store format: 'crypto' and 'keyring' cannot be defined together.\");\n        json.keyring = [json.crypto];\n        delete json.crypto;\n      } // AccountKeyRoleBased format\n\n\n      if (_.isArray(json.keyring[0])) {\n        var keys = [];\n        var transactionKey = decryptKey(json.keyring[KEY_ROLE.roleTransactionKey], password);\n        transactionKey ? keys.push(transactionKey) : keys.push([]);\n        var updateKey = decryptKey(json.keyring[KEY_ROLE.roleAccountUpdateKey], password);\n        updateKey ? keys.push(updateKey) : keys.push([]);\n        var feePayerKey = decryptKey(json.keyring[KEY_ROLE.roleFeePayerKey], password);\n        feePayerKey ? keys.push(feePayerKey) : keys.push([]);\n        return KeyringFactory.createWithRoleBasedKey(json.address, keys);\n      }\n\n      var decrypted = decryptKey(json.keyring, password);\n      decrypted = _.isArray(decrypted) ? decrypted : [decrypted];\n      if (decrypted.length === 1) return KeyringFactory.createWithSingleKey(json.address, decrypted[0]);\n      return KeyringFactory.createWithMultipleKey(json.address, decrypted);\n    } // /**\n    //  * encrypts a keyring and returns a keystore v4 object.\n    //  *\n    //  * @param {string|Array.<string>|Array.<string>|Keyring} key The key parameter can be an instance of Keyring, a normal private key(KlaytnWalletKey format also supported),\n    //  *                                                           an array of private key strings, or a two-dimensional array containing arrays of private key strings for each role,\n    //  * @param {string} password The password to be used for encryption. The encrypted key store can be decrypted with this password.\n    //  * @param {object} options The options to use when encrypt a keyring. See `keyring.encrypt` for more detail about options.\n    //  * @return {object}\n    //  */\n    // static encrypt(key, password, options = {}) {\n    //     let keyring\n    //     if (_.isArray(key)) {\n    //         if (options.address === undefined)\n    //             throw new Error(`The address must be defined inside the options object to encrypt multiple keys.`)\n    //         if (isRoleBasedKeysFormat(key)) {\n    //             keyring = KeyringFactory.createWithRoleBasedKey(options.address, key)\n    //         } else if (isMultipleKeysFormat(key)) {\n    //             keyring = KeyringFactory.createWithMultipleKey(options.address, key)\n    //         } else {\n    //             throw new Error(`Invalid key format.`)\n    //         }\n    //     } else if (key instanceof AbstractKeyring) {\n    //         keyring = key\n    //     } else if (_.isString(key)) {\n    //         if (options.address) {\n    //             if (utils.isKlaytnWalletKey(key)) {\n    //                 keyring = KeyringFactory.createFromKlaytnWalletKey(key)\n    //                 if (keyring.address.toLowerCase() !== options.address.toLowerCase()) {\n    //                     throw new Error(\n    //                         `The address defined in options(${options.address}) does not match the address of KlaytnWalletKey(${keyring.address}) entered as a parameter.`\n    //                     )\n    //                 }\n    //             } else {\n    //                 keyring = KeyringFactory.createWithSingleKey(options.address, key)\n    //             }\n    //         } else {\n    //             keyring = KeyringFactory.createFromPrivateKey(key)\n    //         }\n    //     } else {\n    //         throw new Error(`Invalid key format.`)\n    //     }\n    //     return keyring.encrypt(password, options)\n    // }\n    // /**\n    //  * encrypts a keyring and returns a keystore v3 object.\n    //  *\n    //  * @param {string|Keyring} key The key parameter can be a normal private key(KlaytnWalletKey format also supported) or an instance of Keyring.\n    //  * @param {string} password The password to be used for keyring encryption. The encrypted key store can be decrypted with this password.\n    //  * @param {object} options The options to use when encrypt a keyring. See `keyring.encrypt` for more detail about options.\n    //  * @return {object}\n    //  */\n    // static encryptV3(key, password, options = {}) {\n    //     if (!_.isString(key) && !(key instanceof Keyring)) {\n    //         throw new Error(`Invalid parameter. key should be a private key string, KlaytnWalletKey or instance of Keyring`)\n    //     }\n    //     let keyring\n    //     if (key instanceof Keyring) {\n    //         keyring = key\n    //     } else if (options.address) {\n    //         if (utils.isKlaytnWalletKey(key)) {\n    //             keyring = KeyringFactory.createFromKlaytnWalletKey(key)\n    //             if (keyring.address.toLowerCase() !== options.address.toLowerCase()) {\n    //                 throw new Error(\n    //                     `The address defined in options(${options.address}) does not match the address of KlaytnWalletKey(${keyring.address}) entered as a parameter.`\n    //                 )\n    //             }\n    //         } else {\n    //             keyring = KeyringFactory.createWithSingleKey(options.address, key)\n    //         }\n    //     } else {\n    //         keyring = KeyringFactory.createFromPrivateKey(key)\n    //     }\n    //     return keyring.encryptV3(password, options)\n    // }\n\n  }]);\n\n  return KeyringFactory;\n}();\n\nKeyringFactory.privateKey = PrivateKey;\nKeyringFactory.singleKeyring = SingleKeyring;\nKeyringFactory.multipleKeyring = MultipleKeyring;\nKeyringFactory.roleBasedKeyring = RoleBasedKeyring;\nKeyringFactory.role = KEY_ROLE;\nKeyringFactory.signatureData = SignatureData;\nmodule.exports = KeyringFactory;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-wallet/src/keyring/keyringFactory.js"],"names":["_","require","AccountLib","utils","PrivateKey","KEY_ROLE","isMultipleKeysFormat","isRoleBasedKeysFormat","decryptKey","SingleKeyring","MultipleKeyring","RoleBasedKeyring","SignatureData","KeyringFactory","entropy","random","create","randomHex","createWithSingleKey","address","privateKey","num","undefined","isNumber","isString","Error","randomKeys","i","push","numArr","isArray","length","roleLast","j","key","createWithMultipleKey","createWithRoleBasedKey","isKlaytnWalletKey","createFromKlaytnWalletKey","acct","fromPrivate","addHexPrefix","klaytnWalletKey","parsed","parsePrivateKey","keyArray","roledBasedKeyArray","keystore","password","json","isObject","JSON","parse","version","console","warn","crypto","keyring","keys","transactionKey","roleTransactionKey","updateKey","roleAccountUpdateKey","feePayerKey","roleFeePayerKey","decrypted","singleKeyring","multipleKeyring","roleBasedKeyring","role","signatureData","module","exports"],"mappings":"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,SAAnD,CAAP;AACH,K,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;AAGJpD,cAAc,CAACO,UAAf,GAA4BhB,UAA5B;AACAS,cAAc,CAACqD,aAAf,GAA+BzD,aAA/B;AACAI,cAAc,CAACsD,eAAf,GAAiCzD,eAAjC;AACAG,cAAc,CAACuD,gBAAf,GAAkCzD,gBAAlC;AACAE,cAAc,CAACwD,IAAf,GAAsBhE,QAAtB;AACAQ,cAAc,CAACyD,aAAf,GAA+B1D,aAA/B;AAEA2D,MAAM,CAACC,OAAP,GAAiB3D,cAAjB","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst AccountLib = require('eth-lib/lib/account')\n\nconst utils = require('../../../caver-utils/src')\nconst PrivateKey = require('./privateKey')\nconst { KEY_ROLE, isMultipleKeysFormat, isRoleBasedKeysFormat } = require('./keyringHelper')\nconst { decryptKey } = require('./keyringHelper')\nconst SingleKeyring = require('./singleKeyring')\nconst MultipleKeyring = require('./multipleKeyring')\nconst RoleBasedKeyring = require('./roleBasedKeyring')\nconst SignatureData = require('./signatureData')\n\n/**\n * representing a KeyringFactory which supports create functions for Keyring(SingleKeyring/MultipleKeyring/RoleBasedKeyring)\n * @class\n */\nclass KeyringFactory {\n    /**\n     * generates a keyring instance\n     *\n     * `caver.wallet.keyring.generate()`\n     *\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {SingleKeyring}\n     */\n    static generate(entropy) {\n        const random = AccountLib.create(entropy || utils.randomHex(32))\n        return KeyringFactory.createWithSingleKey(random.address, random.privateKey)\n    }\n\n    /**\n     * generates a single private key string\n     *\n     * `caver.wallet.keyring.generateSingleKey()`\n     *\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {String}\n     */\n    static generateSingleKey(entropy) {\n        return AccountLib.create(entropy || utils.randomHex(32)).privateKey\n    }\n\n    /**\n     * generates an array of private key strings\n     *\n     * `caver.wallet.keyring.generateMultipleKeys()`\n     *\n     * @param {number} num A length of keys.\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {Array.<String>}\n     */\n    static generateMultipleKeys(num, entropy) {\n        if (num === undefined || !_.isNumber(num) || _.isString(num)) {\n            throw new Error(`To generate random multiple private keys, the number of keys should be defined.`)\n        }\n\n        const randomKeys = []\n        for (let i = 0; i < num; i++) {\n            randomKeys.push(AccountLib.create(entropy || utils.randomHex(32)).privateKey)\n        }\n        return randomKeys\n    }\n\n    /**\n     * generates an array in which keys to be used for each role are defined as an array.\n     *\n     * `caver.wallet.keyring.generateRoleBasedKeys()`\n     *\n     * @param {Array.<number>} numArr An array containing the number of keys for each role.\n     * @param {string} [entropy] A random string to increase entropy.\n     * @return {Array.<Array.<String>>}\n     */\n    static generateRoleBasedKeys(numArr, entropy) {\n        if (numArr === undefined || !_.isArray(numArr) || _.isString(numArr)) {\n            throw new Error(\n                `To generate random role-based private keys, an array containing the number of keys for each role should be defined.`\n            )\n        }\n        if (numArr.length > KEY_ROLE.roleLast) {\n            throw new Error(`Unsupported role. The length of array should be less than ${KEY_ROLE.roleLast}.`)\n        }\n\n        const randomKeys = [[], [], []]\n        for (let i = 0; i < numArr.length; i++) {\n            for (let j = 0; j < numArr[i]; j++) {\n                randomKeys[i].push(AccountLib.create(entropy || utils.randomHex(32)).privateKey)\n            }\n        }\n        return randomKeys\n    }\n\n    /**\n     * creates a keyring instance with parameters\n     *\n     * `caver.wallet.keyring.create('0x${address in hex}', '0x{private key}')`\n     * `caver.wallet.keyring.create('0x${address in hex}', ['0x{private key}', '0x{private key}'])`\n     * `caver.wallet.keyring.create('0x${address in hex}', [['0x{private key}', '0x{private key}'], ['0x{private key}'], ['0x{private key}', '0x{private key}']])`\n     *\n     * @param {string} address An address of keyring.\n     * @param {string|Array.<string>|Array.<Array.<string>>} key Private key(s) to use in keyring.\n     * @return {AbstractKeyring}\n     */\n    static create(address, key) {\n        if (_.isString(key)) return KeyringFactory.createWithSingleKey(address, key)\n        if (isMultipleKeysFormat(key)) return KeyringFactory.createWithMultipleKey(address, key)\n        if (isRoleBasedKeysFormat(key)) return KeyringFactory.createWithRoleBasedKey(address, key)\n\n        throw new Error(`Unsupported key type: ${typeof key}`)\n    }\n\n    /**\n     * creates a keyring instance from a private key string. KlaytnWalletKey format also can be handled.\n     *\n     * @param {string} privateKey The key parameter can be either normal private key or KlaytnWalletKey format.\n     * @return {SingleKeyring}\n     */\n    static createFromPrivateKey(privateKey) {\n        if (!_.isString(privateKey)) throw new Error(`Invalid format of parameter. 'privateKey' should be in format of string`)\n        if (utils.isKlaytnWalletKey(privateKey)) return KeyringFactory.createFromKlaytnWalletKey(privateKey)\n\n        const acct = AccountLib.fromPrivate(utils.addHexPrefix(privateKey))\n        return KeyringFactory.createWithSingleKey(acct.address, acct.privateKey)\n    }\n\n    /**\n     * creates a keyring instance from a KlaytnWalletKey string.\n     *\n     * @param {string} klaytnWalletKey A key string in KlaytnWalletKey format.\n     * @return {SingleKeyring}\n     */\n    static createFromKlaytnWalletKey(klaytnWalletKey) {\n        if (!_.isString(klaytnWalletKey)) throw new Error(`Invalid format of parameter. 'klaytnWalletKey' should be in format of string`)\n        if (!utils.isKlaytnWalletKey(klaytnWalletKey)) {\n            throw new Error(`Invalid KlaytnWalletKey: ${klaytnWalletKey}`)\n        }\n        const parsed = utils.parsePrivateKey(klaytnWalletKey)\n        return KeyringFactory.createWithSingleKey(parsed.address, parsed.privateKey)\n    }\n\n    /**\n     * creates a keyring instance from an address and a private key string.\n     *\n     * @param {string} address An address of keyring.\n     * @param {string} key A private key string.\n     * @return {SingleKeyring}\n     */\n    static createWithSingleKey(address, key) {\n        if (!_.isString(key))\n            throw new Error(`Invalid format of parameter. Use 'fromMultipleKey' or 'fromRoleBasedKey' for two or more keys.`)\n        if (utils.isKlaytnWalletKey(key))\n            throw new Error(`Invalid format of parameter. Use 'fromKlaytnWalletKey' to create Keyring from KlaytnWalletKey.`)\n\n        return new SingleKeyring(address, key)\n    }\n\n    /**\n     * creates a keyring instance from an address and multiple private key strings.\n     *\n     * @param {string} address An address of keyring.\n     * @param {Array.<string>} keyArray An array of private key strings.\n     * @return {MultipleKeyring}\n     */\n    static createWithMultipleKey(address, keyArray) {\n        if (!isMultipleKeysFormat(keyArray))\n            throw new Error(`Invalid format of parameter. 'keyArray' should be an array of private key strings.`)\n\n        return new MultipleKeyring(address, keyArray)\n    }\n\n    /**\n     * creates a keyring instance from an address and an array in which keys to be used for each role are defined as an array.\n     *\n     * @param {string} address An address of keyring.\n     * @param {Array.<Array.<string>>} roledBasedKeyArray A two-dimensional array containing arrays of private key strings for each role.\n     * @return {RoleBasedKeyring}\n     */\n    static createWithRoleBasedKey(address, roledBasedKeyArray) {\n        if (!isRoleBasedKeysFormat(roledBasedKeyArray))\n            throw new Error(\n                `Invalid format of parameter. 'roledBasedKeyArray' should be in the form of an array defined as an array for the keys to be used for each role.`\n            )\n\n        return new RoleBasedKeyring(address, roledBasedKeyArray)\n    }\n\n    /**\n     * decrypts a keystore v3 or v4 JSON and returns keyring instance.\n     *\n     * @param {object} keystore The encrypted keystore to decrypt.\n     * @param {string} password The password to use for decryption.\n     * @return {AbstractKeyring}\n     */\n    static decrypt(keystore, password) {\n        const json = _.isObject(keystore) ? keystore : JSON.parse(keystore)\n\n        if (json.version !== 3 && json.version !== 4) console.warn('This is not a V3 or V4 wallet.')\n\n        if (json.version === 3 && !json.crypto) {\n            throw new Error(\"Invalid keystore V3 format: 'crypto' is not defined.\")\n        } else if (json.version === 4 && !json.keyring) {\n            throw new Error(\"Invalid keystore V4 format: 'keyring' is not defined.\")\n        }\n\n        if (json.crypto) {\n            if (json.keyring) throw new Error(\"Invalid key store format: 'crypto' and 'keyring' cannot be defined together.\")\n\n            json.keyring = [json.crypto]\n            delete json.crypto\n        }\n\n        // AccountKeyRoleBased format\n        if (_.isArray(json.keyring[0])) {\n            const keys = []\n            const transactionKey = decryptKey(json.keyring[KEY_ROLE.roleTransactionKey], password)\n            transactionKey ? keys.push(transactionKey) : keys.push([])\n\n            const updateKey = decryptKey(json.keyring[KEY_ROLE.roleAccountUpdateKey], password)\n            updateKey ? keys.push(updateKey) : keys.push([])\n\n            const feePayerKey = decryptKey(json.keyring[KEY_ROLE.roleFeePayerKey], password)\n            feePayerKey ? keys.push(feePayerKey) : keys.push([])\n\n            return KeyringFactory.createWithRoleBasedKey(json.address, keys)\n        }\n\n        let decrypted = decryptKey(json.keyring, password)\n        decrypted = _.isArray(decrypted) ? decrypted : [decrypted]\n        if (decrypted.length === 1) return KeyringFactory.createWithSingleKey(json.address, decrypted[0])\n\n        return KeyringFactory.createWithMultipleKey(json.address, decrypted)\n    }\n\n    // /**\n    //  * encrypts a keyring and returns a keystore v4 object.\n    //  *\n    //  * @param {string|Array.<string>|Array.<string>|Keyring} key The key parameter can be an instance of Keyring, a normal private key(KlaytnWalletKey format also supported),\n    //  *                                                           an array of private key strings, or a two-dimensional array containing arrays of private key strings for each role,\n    //  * @param {string} password The password to be used for encryption. The encrypted key store can be decrypted with this password.\n    //  * @param {object} options The options to use when encrypt a keyring. See `keyring.encrypt` for more detail about options.\n    //  * @return {object}\n    //  */\n    // static encrypt(key, password, options = {}) {\n    //     let keyring\n    //     if (_.isArray(key)) {\n    //         if (options.address === undefined)\n    //             throw new Error(`The address must be defined inside the options object to encrypt multiple keys.`)\n\n    //         if (isRoleBasedKeysFormat(key)) {\n    //             keyring = KeyringFactory.createWithRoleBasedKey(options.address, key)\n    //         } else if (isMultipleKeysFormat(key)) {\n    //             keyring = KeyringFactory.createWithMultipleKey(options.address, key)\n    //         } else {\n    //             throw new Error(`Invalid key format.`)\n    //         }\n    //     } else if (key instanceof AbstractKeyring) {\n    //         keyring = key\n    //     } else if (_.isString(key)) {\n    //         if (options.address) {\n    //             if (utils.isKlaytnWalletKey(key)) {\n    //                 keyring = KeyringFactory.createFromKlaytnWalletKey(key)\n    //                 if (keyring.address.toLowerCase() !== options.address.toLowerCase()) {\n    //                     throw new Error(\n    //                         `The address defined in options(${options.address}) does not match the address of KlaytnWalletKey(${keyring.address}) entered as a parameter.`\n    //                     )\n    //                 }\n    //             } else {\n    //                 keyring = KeyringFactory.createWithSingleKey(options.address, key)\n    //             }\n    //         } else {\n    //             keyring = KeyringFactory.createFromPrivateKey(key)\n    //         }\n    //     } else {\n    //         throw new Error(`Invalid key format.`)\n    //     }\n\n    //     return keyring.encrypt(password, options)\n    // }\n\n    // /**\n    //  * encrypts a keyring and returns a keystore v3 object.\n    //  *\n    //  * @param {string|Keyring} key The key parameter can be a normal private key(KlaytnWalletKey format also supported) or an instance of Keyring.\n    //  * @param {string} password The password to be used for keyring encryption. The encrypted key store can be decrypted with this password.\n    //  * @param {object} options The options to use when encrypt a keyring. See `keyring.encrypt` for more detail about options.\n    //  * @return {object}\n    //  */\n    // static encryptV3(key, password, options = {}) {\n    //     if (!_.isString(key) && !(key instanceof Keyring)) {\n    //         throw new Error(`Invalid parameter. key should be a private key string, KlaytnWalletKey or instance of Keyring`)\n    //     }\n\n    //     let keyring\n    //     if (key instanceof Keyring) {\n    //         keyring = key\n    //     } else if (options.address) {\n    //         if (utils.isKlaytnWalletKey(key)) {\n    //             keyring = KeyringFactory.createFromKlaytnWalletKey(key)\n    //             if (keyring.address.toLowerCase() !== options.address.toLowerCase()) {\n    //                 throw new Error(\n    //                     `The address defined in options(${options.address}) does not match the address of KlaytnWalletKey(${keyring.address}) entered as a parameter.`\n    //                 )\n    //             }\n    //         } else {\n    //             keyring = KeyringFactory.createWithSingleKey(options.address, key)\n    //         }\n    //     } else {\n    //         keyring = KeyringFactory.createFromPrivateKey(key)\n    //     }\n\n    //     return keyring.encryptV3(password, options)\n    // }\n}\n\nKeyringFactory.privateKey = PrivateKey\nKeyringFactory.singleKeyring = SingleKeyring\nKeyringFactory.multipleKeyring = MultipleKeyring\nKeyringFactory.roleBasedKeyring = RoleBasedKeyring\nKeyringFactory.role = KEY_ROLE\nKeyringFactory.signatureData = SignatureData\n\nmodule.exports = KeyringFactory\n"]},"metadata":{},"sourceType":"script"}