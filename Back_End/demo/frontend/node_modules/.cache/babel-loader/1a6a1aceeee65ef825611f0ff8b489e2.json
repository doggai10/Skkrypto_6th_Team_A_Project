{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar BigNumber = require('bignumber.js');\n\nvar Contract = require('../../caver-contract');\n\nvar _require = require('./kctHelper'),\n    validateDeployParameterForKIP7 = _require.validateDeployParameterForKIP7,\n    determineSendParams = _require.determineSendParams,\n    kip7JsonInterface = _require.kip7JsonInterface,\n    kip7ByteCode = _require.kip7ByteCode,\n    formatParamForUint256 = _require.formatParamForUint256;\n\nvar _require2 = require('../../caver-utils'),\n    isAddress = _require2.isAddress,\n    toBuffer = _require2.toBuffer,\n    isHexStrict = _require2.isHexStrict,\n    toHex = _require2.toHex;\n\nvar KIP7 = /*#__PURE__*/function (_Contract) {\n  \"use strict\";\n\n  _inherits(KIP7, _Contract);\n\n  var _super = _createSuper(KIP7);\n\n  _createClass(KIP7, null, [{\n    key: \"deploy\",\n\n    /**\n     * deploy deploys a KIP-7 token contract to Klaytn network.\n     * `const deployedContract = await caver.klay.KIP7.deploy({\n     *      name: 'TokenName',\n     *      symbol: 'TKN',\n     *      decimals: 18,\n     *      initialSupply: new BigNumber(1000000000000000000),\n     *  }, '0x{address in hex}')`\n     *\n     * @method deploy\n     * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n     * @param {String} privateKey The address of the account to deploy the KIP-7 token contract.\n     * @return {Object}\n     */\n    value: function deploy(tokenInfo, deployer) {\n      validateDeployParameterForKIP7(tokenInfo);\n      var name = tokenInfo.name,\n          symbol = tokenInfo.symbol,\n          decimals = tokenInfo.decimals,\n          initialSupply = tokenInfo.initialSupply;\n      var kip7 = new KIP7();\n      return kip7.deploy({\n        data: kip7ByteCode,\n        arguments: [name, symbol, decimals, initialSupply]\n      }).send({\n        from: deployer,\n        gas: 4000000,\n        value: 0\n      });\n    }\n  }]);\n\n  function KIP7(tokenAddress) {\n    var abi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kip7JsonInterface;\n\n    _classCallCheck(this, KIP7);\n\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    return _super.call(this, abi, tokenAddress);\n  }\n  /**\n   * clone copies a KIP7 instance with the new address parameter set to the target contract address.\n   *\n   * @method clone\n   * @param {String} tokenAddress The address of the token contract.\n   * @return {Object}\n   */\n\n\n  _createClass(KIP7, [{\n    key: \"clone\",\n    value: function clone() {\n      var tokenAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.address;\n      return new this.constructor(tokenAddress, this.options.jsonInterface);\n    }\n    /**\n     * supportsInterface checks whether interface is supported or not.\n     *\n     * @method supportsInterface\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"supportsInterface\",\n    value: function () {\n      var _supportsInterface = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(interfaceId) {\n        var supported;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.methods.supportsInterface(interfaceId).call();\n\n              case 2:\n                supported = _context.sent;\n                return _context.abrupt(\"return\", supported);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function supportsInterface(_x) {\n        return _supportsInterface.apply(this, arguments);\n      }\n\n      return supportsInterface;\n    }()\n    /**\n     * name returns the name of the token.\n     *\n     * @method name\n     * @return {String}\n     */\n\n  }, {\n    key: \"name\",\n    value: function () {\n      var _name = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var name;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.methods.name().call();\n\n              case 2:\n                name = _context2.sent;\n                return _context2.abrupt(\"return\", name);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function name() {\n        return _name.apply(this, arguments);\n      }\n\n      return name;\n    }()\n    /**\n     * symbol returns the symbol of the token.\n     *\n     * @method symbol\n     * @return {String}\n     */\n\n  }, {\n    key: \"symbol\",\n    value: function () {\n      var _symbol = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var symbol;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.methods.symbol().call();\n\n              case 2:\n                symbol = _context3.sent;\n                return _context3.abrupt(\"return\", symbol);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function symbol() {\n        return _symbol.apply(this, arguments);\n      }\n\n      return symbol;\n    }()\n    /**\n     * decimals returns the decimals of the token.\n     *\n     * @method symbol\n     * @return {Number}\n     */\n\n  }, {\n    key: \"decimals\",\n    value: function () {\n      var _decimals = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var decimals;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.methods.decimals().call();\n\n              case 2:\n                decimals = _context4.sent;\n                return _context4.abrupt(\"return\", Number(decimals));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function decimals() {\n        return _decimals.apply(this, arguments);\n      }\n\n      return decimals;\n    }()\n    /**\n     * totalSupply returns the total supply of the token.\n     *\n     * @method totalSupply\n     * @return {BigNumber}\n     */\n\n  }, {\n    key: \"totalSupply\",\n    value: function () {\n      var _totalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var totalSupply;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.methods.totalSupply().call();\n\n              case 2:\n                totalSupply = _context5.sent;\n                return _context5.abrupt(\"return\", new BigNumber(totalSupply));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function totalSupply() {\n        return _totalSupply.apply(this, arguments);\n      }\n\n      return totalSupply;\n    }()\n    /**\n     * balanceOf returns the balance of the account.\n     *\n     * @method balanceOf\n     * @param {String} account The address of the account for which you want to see balance.\n     * @return {BigNumber}\n     */\n\n  }, {\n    key: \"balanceOf\",\n    value: function () {\n      var _balanceOf = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(account) {\n        var balance;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.methods.balanceOf(account).call();\n\n              case 2:\n                balance = _context6.sent;\n                return _context6.abrupt(\"return\", new BigNumber(balance));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function balanceOf(_x2) {\n        return _balanceOf.apply(this, arguments);\n      }\n\n      return balanceOf;\n    }()\n    /**\n     * allowance returns the amount the spender is allowed to use on behalf of the owner.\n     *\n     * @method allowance\n     * @param {String} owner The address of the account that set the spender to use the money on behalf of the owner.\n     * @param {String} spender The address of the account that received the approve amount that can be used on behalf of the owner.\n     * @return {BigNumber}\n     */\n\n  }, {\n    key: \"allowance\",\n    value: function () {\n      var _allowance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(owner, spender) {\n        var allowance;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.methods.allowance(owner, spender).call();\n\n              case 2:\n                allowance = _context7.sent;\n                return _context7.abrupt(\"return\", new BigNumber(allowance));\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function allowance(_x3, _x4) {\n        return _allowance.apply(this, arguments);\n      }\n\n      return allowance;\n    }()\n    /**\n     * isMinter returns whether the account is minter or not.\n     *\n     * @method isMinter\n     * @param {String} account The address of the account you want to check minter or not.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isMinter\",\n    value: function () {\n      var _isMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(account) {\n        var isMinter;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.methods.isMinter(account).call();\n\n              case 2:\n                isMinter = _context8.sent;\n                return _context8.abrupt(\"return\", isMinter);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function isMinter(_x5) {\n        return _isMinter.apply(this, arguments);\n      }\n\n      return isMinter;\n    }()\n    /**\n     * isPauser returns whether the account is pauser or not.\n     *\n     * @method isPauser\n     * @param {String} account The address of the account you want to check pauser or not.\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"isPauser\",\n    value: function () {\n      var _isPauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(account) {\n        var isPauser;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.methods.isPauser(account).call();\n\n              case 2:\n                isPauser = _context9.sent;\n                return _context9.abrupt(\"return\", isPauser);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function isPauser(_x6) {\n        return _isPauser.apply(this, arguments);\n      }\n\n      return isPauser;\n    }()\n    /**\n     * paused returns whether or not the token contract's transaction is paused.\n     *\n     * @method paused\n     * @return {Boolean}\n     */\n\n  }, {\n    key: \"paused\",\n    value: function () {\n      var _paused = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var isPaused;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.methods.paused().call();\n\n              case 2:\n                isPaused = _context10.sent;\n                return _context10.abrupt(\"return\", isPaused);\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function paused() {\n        return _paused.apply(this, arguments);\n      }\n\n      return paused;\n    }()\n    /**\n     * approve sets amount as the allowance of spender over the caller’s tokens.\n     *\n     * @method approve\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"approve\",\n    value: function () {\n      var _approve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(spender, amount) {\n        var sendParam,\n            executableObj,\n            _args11 = arguments;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                sendParam = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : {};\n                executableObj = this.methods.approve(spender, formatParamForUint256(amount));\n                _context11.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context11.sent;\n                return _context11.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function approve(_x7, _x8) {\n        return _approve.apply(this, arguments);\n      }\n\n      return approve;\n    }()\n    /**\n     * transfer moves amount tokens from the caller’s account to recipient.\n     *\n     * @method transfer\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"transfer\",\n    value: function () {\n      var _transfer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(recipient, amount) {\n        var sendParam,\n            executableObj,\n            _args12 = arguments;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                sendParam = _args12.length > 2 && _args12[2] !== undefined ? _args12[2] : {};\n                executableObj = this.methods.transfer(recipient, formatParamForUint256(amount));\n                _context12.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context12.sent;\n                return _context12.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function transfer(_x9, _x10) {\n        return _transfer.apply(this, arguments);\n      }\n\n      return transfer;\n    }()\n    /**\n     * transferFrom moves amount tokens from sender to recipient using the allowance mechanism.\n     * amount is then deducted from the caller’s allowance.\n     *\n     * @method transferFrom\n     * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"transferFrom\",\n    value: function () {\n      var _transferFrom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(sender, recipient, amount) {\n        var sendParam,\n            executableObj,\n            _args13 = arguments;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                sendParam = _args13.length > 3 && _args13[3] !== undefined ? _args13[3] : {};\n                executableObj = this.methods.transferFrom(sender, recipient, formatParamForUint256(amount));\n                _context13.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context13.sent;\n                return _context13.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function transferFrom(_x11, _x12, _x13) {\n        return _transferFrom.apply(this, arguments);\n      }\n\n      return transferFrom;\n    }()\n    /**\n     * safeTransfer safely transfers tokens to another address.\n     *\n     * @method safeTransfer\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"safeTransfer\",\n    value: function () {\n      var _safeTransfer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(recipient, amount, data) {\n        var sendParam,\n            executableObj,\n            _args14 = arguments;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                sendParam = _args14.length > 3 && _args14[3] !== undefined ? _args14[3] : {};\n\n                if (!(data && _.isObject(data))) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                if (!(data.gas !== undefined || data.from !== undefined)) {\n                  _context14.next = 7;\n                  break;\n                }\n\n                if (!(Object.keys(sendParam).length > 0)) {\n                  _context14.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid parameters\");\n\n              case 5:\n                sendParam = data;\n                data = undefined;\n\n              case 7:\n                if (data && !_.isBuffer(data)) {\n                  if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                  data = toBuffer(data);\n                }\n\n                executableObj = data ? this.methods.safeTransfer(recipient, formatParamForUint256(amount), data) : this.methods.safeTransfer(recipient, formatParamForUint256(amount));\n                _context14.next = 11;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 11:\n                sendParam = _context14.sent;\n                return _context14.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 13:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function safeTransfer(_x14, _x15, _x16) {\n        return _safeTransfer.apply(this, arguments);\n      }\n\n      return safeTransfer;\n    }()\n    /**\n     * safeTransferFrom safely transfers tokens to another address.\n     *\n     * @method safeTransferFrom\n     * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"safeTransferFrom\",\n    value: function () {\n      var _safeTransferFrom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(sender, recipient, amount, data) {\n        var sendParam,\n            executableObj,\n            _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                sendParam = _args15.length > 4 && _args15[4] !== undefined ? _args15[4] : {};\n\n                if (!(data && _.isObject(data))) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                if (!(data.gas !== undefined || data.from !== undefined)) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                if (!(Object.keys(sendParam).length > 0)) {\n                  _context15.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid parameters\");\n\n              case 5:\n                sendParam = data;\n                data = undefined;\n\n              case 7:\n                if (data && !_.isBuffer(data)) {\n                  if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                  data = toBuffer(data);\n                }\n\n                executableObj = data ? this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount), data) : this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount));\n                _context15.next = 11;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 11:\n                sendParam = _context15.sent;\n                return _context15.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 13:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function safeTransferFrom(_x17, _x18, _x19, _x20) {\n        return _safeTransferFrom.apply(this, arguments);\n      }\n\n      return safeTransferFrom;\n    }()\n    /**\n     * mint creates amount tokens and assigns them to account, increasing the total supply.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method mint\n     * @param {String} account The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} amount The amount of tokens to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"mint\",\n    value: function () {\n      var _mint = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(account, amount) {\n        var sendParam,\n            executableObj,\n            _args16 = arguments;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                sendParam = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};\n                executableObj = this.methods.mint(account, formatParamForUint256(amount));\n                _context16.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context16.sent;\n                return _context16.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function mint(_x21, _x22) {\n        return _mint.apply(this, arguments);\n      }\n\n      return mint;\n    }()\n    /**\n     * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method addMinter\n     * @param {String} account The address of account to add as minter.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"addMinter\",\n    value: function () {\n      var _addMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(account) {\n        var sendParam,\n            executableObj,\n            _args17 = arguments;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                sendParam = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};\n                executableObj = this.methods.addMinter(account);\n                _context17.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context17.sent;\n                return _context17.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function addMinter(_x23) {\n        return _addMinter.apply(this, arguments);\n      }\n\n      return addMinter;\n    }()\n    /**\n     * renounceMinter renounces privilege of MinterRole.\n     * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n     *\n     * @method renounceMinter\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"renounceMinter\",\n    value: function () {\n      var _renounceMinter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var sendParam,\n            executableObj,\n            _args18 = arguments;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                sendParam = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};\n                executableObj = this.methods.renounceMinter();\n                _context18.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context18.sent;\n                return _context18.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function renounceMinter() {\n        return _renounceMinter.apply(this, arguments);\n      }\n\n      return renounceMinter;\n    }()\n    /**\n     * burn destroys amount tokens from the caller.\n     *\n     * @method burn\n     * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"burn\",\n    value: function () {\n      var _burn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(amount) {\n        var sendParam,\n            executableObj,\n            _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                sendParam = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n                executableObj = this.methods.burn(formatParamForUint256(amount));\n                _context19.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context19.sent;\n                return _context19.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function burn(_x24) {\n        return _burn.apply(this, arguments);\n      }\n\n      return burn;\n    }()\n    /**\n     * burnFrom destroys amount tokens from account is then deducted from the caller’s allowance.\n     *\n     * @method burnFrom\n     * @param {String} account The address of the account that owns the token to be burned with allowance mechanism.\n     * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"burnFrom\",\n    value: function () {\n      var _burnFrom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(account, amount) {\n        var sendParam,\n            executableObj,\n            _args20 = arguments;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                sendParam = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : {};\n                executableObj = this.methods.burnFrom(account, formatParamForUint256(amount));\n                _context20.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context20.sent;\n                return _context20.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function burnFrom(_x25, _x26) {\n        return _burnFrom.apply(this, arguments);\n      }\n\n      return burnFrom;\n    }()\n    /**\n     * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n     * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n     *\n     * @method addPauser\n     * @param {String} account The address of account to add as pauser.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"addPauser\",\n    value: function () {\n      var _addPauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(account) {\n        var sendParam,\n            executableObj,\n            _args21 = arguments;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                sendParam = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : {};\n                executableObj = this.methods.addPauser(account);\n                _context21.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context21.sent;\n                return _context21.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function addPauser(_x27) {\n        return _addPauser.apply(this, arguments);\n      }\n\n      return addPauser;\n    }()\n    /**\n     * pause triggers stopped state that stops sending tokens in emergency situation.\n     * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n     *\n     * @method pause\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"pause\",\n    value: function () {\n      var _pause = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var sendParam,\n            executableObj,\n            _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                sendParam = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};\n                executableObj = this.methods.pause();\n                _context22.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context22.sent;\n                return _context22.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function pause() {\n        return _pause.apply(this, arguments);\n      }\n\n      return pause;\n    }()\n    /**\n     * unpause sets amount as the allowance of spender over the caller’s tokens.\n     * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n     *\n     * @method unpause\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"unpause\",\n    value: function () {\n      var _unpause = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var sendParam,\n            executableObj,\n            _args23 = arguments;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                sendParam = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};\n                executableObj = this.methods.unpause();\n                _context23.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context23.sent;\n                return _context23.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function unpause() {\n        return _unpause.apply(this, arguments);\n      }\n\n      return unpause;\n    }()\n    /**\n     * renouncePauser renounces privilege of PauserRole.\n     * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n     *\n     * @method renouncePauser\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n\n  }, {\n    key: \"renouncePauser\",\n    value: function () {\n      var _renouncePauser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        var sendParam,\n            executableObj,\n            _args24 = arguments;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                sendParam = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};\n                executableObj = this.methods.renouncePauser();\n                _context24.next = 4;\n                return determineSendParams(executableObj, sendParam, this.options.from);\n\n              case 4:\n                sendParam = _context24.sent;\n                return _context24.abrupt(\"return\", executableObj.send(sendParam));\n\n              case 6:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function renouncePauser() {\n        return _renouncePauser.apply(this, arguments);\n      }\n\n      return renouncePauser;\n    }()\n  }]);\n\n  return KIP7;\n}(Contract);\n\nmodule.exports = KIP7;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-kct/src/kip7.js"],"names":["_","require","BigNumber","Contract","validateDeployParameterForKIP7","determineSendParams","kip7JsonInterface","kip7ByteCode","formatParamForUint256","isAddress","toBuffer","isHexStrict","toHex","KIP7","tokenInfo","deployer","name","symbol","decimals","initialSupply","kip7","deploy","data","arguments","send","from","gas","value","tokenAddress","abi","isString","Error","undefined","options","address","constructor","jsonInterface","interfaceId","methods","supportsInterface","call","supported","Number","totalSupply","account","balanceOf","balance","owner","spender","allowance","isMinter","isPauser","paused","isPaused","amount","sendParam","executableObj","approve","recipient","transfer","sender","transferFrom","isObject","Object","keys","length","isBuffer","safeTransfer","safeTransferFrom","mint","addMinter","renounceMinter","burn","burnFrom","addPauser","pause","unpause","renouncePauser","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst BigNumber = require('bignumber.js')\n\nconst Contract = require('../../caver-contract')\nconst {\n    validateDeployParameterForKIP7,\n    determineSendParams,\n    kip7JsonInterface,\n    kip7ByteCode,\n    formatParamForUint256,\n} = require('./kctHelper')\nconst { isAddress, toBuffer, isHexStrict, toHex } = require('../../caver-utils')\n\nclass KIP7 extends Contract {\n    /**\n     * deploy deploys a KIP-7 token contract to Klaytn network.\n     * `const deployedContract = await caver.klay.KIP7.deploy({\n     *      name: 'TokenName',\n     *      symbol: 'TKN',\n     *      decimals: 18,\n     *      initialSupply: new BigNumber(1000000000000000000),\n     *  }, '0x{address in hex}')`\n     *\n     * @method deploy\n     * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n     * @param {String} privateKey The address of the account to deploy the KIP-7 token contract.\n     * @return {Object}\n     */\n    static deploy(tokenInfo, deployer) {\n        validateDeployParameterForKIP7(tokenInfo)\n\n        const { name, symbol, decimals, initialSupply } = tokenInfo\n        const kip7 = new KIP7()\n\n        return kip7\n            .deploy({\n                data: kip7ByteCode,\n                arguments: [name, symbol, decimals, initialSupply],\n            })\n            .send({ from: deployer, gas: 4000000, value: 0 })\n    }\n\n    constructor(tokenAddress, abi = kip7JsonInterface) {\n        if (tokenAddress) {\n            if (_.isString(tokenAddress)) {\n                if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`)\n            } else {\n                abi = tokenAddress\n                tokenAddress = undefined\n            }\n        }\n\n        super(abi, tokenAddress)\n    }\n\n    /**\n     * clone copies a KIP7 instance with the new address parameter set to the target contract address.\n     *\n     * @method clone\n     * @param {String} tokenAddress The address of the token contract.\n     * @return {Object}\n     */\n    clone(tokenAddress = this.options.address) {\n        return new this.constructor(tokenAddress, this.options.jsonInterface)\n    }\n\n    /**\n     * supportsInterface checks whether interface is supported or not.\n     *\n     * @method supportsInterface\n     * @return {Boolean}\n     */\n    async supportsInterface(interfaceId) {\n        const supported = await this.methods.supportsInterface(interfaceId).call()\n        return supported\n    }\n\n    /**\n     * name returns the name of the token.\n     *\n     * @method name\n     * @return {String}\n     */\n    async name() {\n        const name = await this.methods.name().call()\n        return name\n    }\n\n    /**\n     * symbol returns the symbol of the token.\n     *\n     * @method symbol\n     * @return {String}\n     */\n    async symbol() {\n        const symbol = await this.methods.symbol().call()\n        return symbol\n    }\n\n    /**\n     * decimals returns the decimals of the token.\n     *\n     * @method symbol\n     * @return {Number}\n     */\n    async decimals() {\n        const decimals = await this.methods.decimals().call()\n        return Number(decimals)\n    }\n\n    /**\n     * totalSupply returns the total supply of the token.\n     *\n     * @method totalSupply\n     * @return {BigNumber}\n     */\n    async totalSupply() {\n        const totalSupply = await this.methods.totalSupply().call()\n        return new BigNumber(totalSupply)\n    }\n\n    /**\n     * balanceOf returns the balance of the account.\n     *\n     * @method balanceOf\n     * @param {String} account The address of the account for which you want to see balance.\n     * @return {BigNumber}\n     */\n    async balanceOf(account) {\n        const balance = await this.methods.balanceOf(account).call()\n        return new BigNumber(balance)\n    }\n\n    /**\n     * allowance returns the amount the spender is allowed to use on behalf of the owner.\n     *\n     * @method allowance\n     * @param {String} owner The address of the account that set the spender to use the money on behalf of the owner.\n     * @param {String} spender The address of the account that received the approve amount that can be used on behalf of the owner.\n     * @return {BigNumber}\n     */\n    async allowance(owner, spender) {\n        const allowance = await this.methods.allowance(owner, spender).call()\n        return new BigNumber(allowance)\n    }\n\n    /**\n     * isMinter returns whether the account is minter or not.\n     *\n     * @method isMinter\n     * @param {String} account The address of the account you want to check minter or not.\n     * @return {Boolean}\n     */\n    async isMinter(account) {\n        const isMinter = await this.methods.isMinter(account).call()\n        return isMinter\n    }\n\n    /**\n     * isPauser returns whether the account is pauser or not.\n     *\n     * @method isPauser\n     * @param {String} account The address of the account you want to check pauser or not.\n     * @return {Boolean}\n     */\n    async isPauser(account) {\n        const isPauser = await this.methods.isPauser(account).call()\n        return isPauser\n    }\n\n    /**\n     * paused returns whether or not the token contract's transaction is paused.\n     *\n     * @method paused\n     * @return {Boolean}\n     */\n    async paused() {\n        const isPaused = await this.methods.paused().call()\n        return isPaused\n    }\n\n    /**\n     * approve sets amount as the allowance of spender over the caller’s tokens.\n     *\n     * @method approve\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async approve(spender, amount, sendParam = {}) {\n        const executableObj = this.methods.approve(spender, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * transfer moves amount tokens from the caller’s account to recipient.\n     *\n     * @method transfer\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async transfer(recipient, amount, sendParam = {}) {\n        const executableObj = this.methods.transfer(recipient, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * transferFrom moves amount tokens from sender to recipient using the allowance mechanism.\n     * amount is then deducted from the caller’s allowance.\n     *\n     * @method transferFrom\n     * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async transferFrom(sender, recipient, amount, sendParam = {}) {\n        const executableObj = this.methods.transferFrom(sender, recipient, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * safeTransfer safely transfers tokens to another address.\n     *\n     * @method safeTransfer\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async safeTransfer(recipient, amount, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransfer(recipient, formatParamForUint256(amount), data)\n            : this.methods.safeTransfer(recipient, formatParamForUint256(amount))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * safeTransferFrom safely transfers tokens to another address.\n     *\n     * @method safeTransferFrom\n     * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async safeTransferFrom(sender, recipient, amount, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount), data)\n            : this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * mint creates amount tokens and assigns them to account, increasing the total supply.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method mint\n     * @param {String} account The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} amount The amount of tokens to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async mint(account, amount, sendParam = {}) {\n        const executableObj = this.methods.mint(account, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method addMinter\n     * @param {String} account The address of account to add as minter.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async addMinter(account, sendParam = {}) {\n        const executableObj = this.methods.addMinter(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renounceMinter renounces privilege of MinterRole.\n     * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n     *\n     * @method renounceMinter\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async renounceMinter(sendParam = {}) {\n        const executableObj = this.methods.renounceMinter()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * burn destroys amount tokens from the caller.\n     *\n     * @method burn\n     * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async burn(amount, sendParam = {}) {\n        const executableObj = this.methods.burn(formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * burnFrom destroys amount tokens from account is then deducted from the caller’s allowance.\n     *\n     * @method burnFrom\n     * @param {String} account The address of the account that owns the token to be burned with allowance mechanism.\n     * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async burnFrom(account, amount, sendParam = {}) {\n        const executableObj = this.methods.burnFrom(account, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n     * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n     *\n     * @method addPauser\n     * @param {String} account The address of account to add as pauser.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async addPauser(account, sendParam = {}) {\n        const executableObj = this.methods.addPauser(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * pause triggers stopped state that stops sending tokens in emergency situation.\n     * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n     *\n     * @method pause\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async pause(sendParam = {}) {\n        const executableObj = this.methods.pause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * unpause sets amount as the allowance of spender over the caller’s tokens.\n     * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n     *\n     * @method unpause\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async unpause(sendParam = {}) {\n        const executableObj = this.methods.unpause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renouncePauser renounces privilege of PauserRole.\n     * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n     *\n     * @method renouncePauser\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async renouncePauser(sendParam = {}) {\n        const executableObj = this.methods.renouncePauser()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n}\n\nmodule.exports = KIP7\n"]},"metadata":{},"sourceType":"script"}