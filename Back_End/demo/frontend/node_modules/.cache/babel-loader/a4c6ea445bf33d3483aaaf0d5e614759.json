{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG,\n    CODE_FORMAT = _require.CODE_FORMAT,\n    getCodeFormatTag = _require.getCodeFormatTag;\n\nvar utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy)) throw new Error(\"Cannot decode to FeeDelegatedSmartContractDeploy. The prefix must be \".concat(TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 12),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      to = _RLP$decode2[3],\n      value = _RLP$decode2[4],\n      from = _RLP$decode2[5],\n      input = _RLP$decode2[6],\n      humanReadable = _RLP$decode2[7],\n      codeFormat = _RLP$decode2[8],\n      signatures = _RLP$decode2[9],\n      feePayer = _RLP$decode2[10],\n      feePayerSignatures = _RLP$decode2[11];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to: to,\n    value: utils.trimLeadingZero(value),\n    from: from,\n    input: input,\n    humanReadable: humanReadable === '0x1',\n    codeFormat: codeFormat,\n    signatures: signatures,\n    feePayer: feePayer,\n    feePayerSignatures: feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated smart contract deploy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedsmartcontractdeploy to see more detail.\n * @class\n */\n\n\nvar FeeDelegatedSmartContractDeploy = /*#__PURE__*/function (_AbstractFeeDelegated) {\n  \"use strict\";\n\n  _inherits(FeeDelegatedSmartContractDeploy, _AbstractFeeDelegated);\n\n  var _super = _createSuper(FeeDelegatedSmartContractDeploy);\n\n  _createClass(FeeDelegatedSmartContractDeploy, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedSmartContractDeploy transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated smart contract deploy transaction.\n     * @return {FeeDelegatedSmartContractDeploy}\n     */\n    value: function decode(rlpEncoded) {\n      return new FeeDelegatedSmartContractDeploy(_decode(rlpEncoded));\n    }\n    /**\n     * Creates a fee delegated smart contract deploy transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedSmartContractDeploy transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `to`, `value`, `input`, `humanReadable`, `codeForamt`,\n     *                               `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n\n  }]);\n\n  function FeeDelegatedSmartContractDeploy(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, FeeDelegatedSmartContractDeploy);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy, createTxObj);\n    _this.to = createTxObj.to || '0x';\n    _this.value = createTxObj.value || '0x0';\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    _this.input = createTxObj.input || createTxObj.data;\n    _this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false;\n    _this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM;\n    return _this;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(FeeDelegatedSmartContractDeploy, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      var feePayerSignatures = this.feePayerSignatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat)]);\n    }\n  }, {\n    key: \"to\",\n    get: function get() {\n      return this._to;\n    },\n    set: function set(address) {\n      if (address !== '0x') throw new Error(\"Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.\");\n      this._to = address.toLowerCase();\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(val) {\n      this._value = utils.numberToHex(val);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"input\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(input) {\n      if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n      this._input = utils.addHexPrefix(input);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(data) {\n      this._input = data;\n    }\n    /**\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"humanReadable\",\n    get: function get() {\n      return this._humanReadable;\n    },\n    set: function set(hr) {\n      if (!_.isBoolean(hr)) throw new Error(\"Invalid humanReadable \".concat(hr));\n      this._humanReadable = hr;\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"codeFormat\",\n    get: function get() {\n      return this._codeFormat;\n    },\n    set: function set(cf) {\n      this._codeFormat = getCodeFormatTag(cf);\n    }\n  }]);\n\n  return FeeDelegatedSmartContractDeploy;\n}(AbstractFeeDelegatedTransaction);\n\nmodule.exports = FeeDelegatedSmartContractDeploy;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/smartContractDeploy/feeDelegatedSmartContractDeploy.js"],"names":["_","require","RLP","Bytes","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","CODE_FORMAT","getCodeFormatTag","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedSmartContractDeploy","Error","typeDettached","slice","decode","nonce","gasPrice","gas","to","value","from","input","humanReadable","codeFormat","signatures","feePayer","feePayerSignatures","trimLeadingZero","FeeDelegatedSmartContractDeploy","createTxObj","isString","data","undefined","EVM","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","_to","address","_value","val","numberToHex","_input","isHex","_humanReadable","hr","isBoolean","_codeFormat","cf","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, CODE_FORMAT, getCodeFormatTag } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy))\n        throw new Error(\n            `Cannot decode to FeeDelegatedSmartContractDeploy. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, signatures, feePayer, feePayerSignatures] = RLP.decode(\n        typeDettached\n    )\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        from,\n        input,\n        humanReadable: humanReadable === '0x1',\n        codeFormat,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated smart contract deploy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedsmartcontractdeploy to see more detail.\n * @class\n */\nclass FeeDelegatedSmartContractDeploy extends AbstractFeeDelegatedTransaction {\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedSmartContractDeploy transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated smart contract deploy transaction.\n     * @return {FeeDelegatedSmartContractDeploy}\n     */\n    static decode(rlpEncoded) {\n        return new FeeDelegatedSmartContractDeploy(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a fee delegated smart contract deploy transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedSmartContractDeploy transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `to`, `value`, `input`, `humanReadable`, `codeForamt`,\n     *                               `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy, createTxObj)\n        this.to = createTxObj.to || '0x'\n        this.value = createTxObj.value || '0x0'\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n\n        this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false\n        this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (address !== '0x') throw new Error(`Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * @type {string}\n     */\n    get data() {\n        return this._input\n    }\n\n    set data(data) {\n        this._input = data\n    }\n\n    /**\n     * @type {boolean}\n     */\n    get humanReadable() {\n        return this._humanReadable\n    }\n\n    set humanReadable(hr) {\n        if (!_.isBoolean(hr)) throw new Error(`Invalid humanReadable ${hr}`)\n        this._humanReadable = hr\n    }\n\n    /**\n     * @type {string}\n     */\n    get codeFormat() {\n        return this._codeFormat\n    }\n\n    set codeFormat(cf) {\n        this._codeFormat = getCodeFormatTag(cf)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.to.toLowerCase(),\n                Bytes.fromNat(this.value),\n                this.from.toLowerCase(),\n                this.input,\n                Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'),\n                Bytes.fromNat(this.codeFormat),\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.from.toLowerCase(),\n            this.input,\n            Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'),\n            Bytes.fromNat(this.codeFormat),\n        ])\n    }\n}\n\nmodule.exports = FeeDelegatedSmartContractDeploy\n"]},"metadata":{},"sourceType":"script"}