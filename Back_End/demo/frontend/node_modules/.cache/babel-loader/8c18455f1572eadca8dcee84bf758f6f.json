{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable class-methods-use-this */\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar utils = require('../../../caver-utils/src');\n/**\n * representing a Keyring which includes `address` and `private keys` by roles.\n * @class\n */\n\n\nvar AbstractKeyring = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * creates a keyring.\n   * @param {string} address - The address of keyring.\n   */\n  function AbstractKeyring(address) {\n    _classCallCheck(this, AbstractKeyring);\n\n    this.address = address;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(AbstractKeyring, [{\n    key: \"sign\",\n\n    /**\n     * signs with transactionHash with a key and returns signature(s).\n     * This method has to be overrided in classes which extends AbstractKeyring.\n     *\n     * @return {Array.<string>|Array.<Array.<string>>}\n     */\n    value: function sign(transactionHash, chainId, role, index) {\n      throw new Error(\"Not implemented.\");\n    }\n    /**\n     * signs with hashed message and returns result object that includes `signatures`, `message` and `messageHash`.\n     * This method has to be overrided in classes which extends AbstractKeyring.\n     *\n     * @return {object}\n     */\n\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message, role, index) {\n      throw new Error(\"Not implemented.\");\n    }\n    /**\n     * encrypts a keyring and returns a keystore v4 object.\n     * This method has to be overrided in classes which extends AbstractKeyring.\n     *\n     * @return {object}\n     */\n\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(password) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      throw new Error(\"Not implemented.\");\n    }\n    /**\n     * returns a copied singleKeyring instance.\n     * This method has to be overrided in classes which extends AbstractKeyring.\n     *\n     * @return {AbstractKeyring}\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      throw new Error(\"Not implemented.\");\n    }\n    /**\n     * returns KlaytnWalletKey format. If keyring uses more than one private key, this function will throw error.\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getKlaytnWalletKey\",\n    value: function getKlaytnWalletKey() {\n      throw new Error(\"Not supported for this class.\");\n    }\n    /**\n     * encrypts a keyring and returns a keystore v3 object.\n     *\n     * @param {string} password The password to be used for keyring encryption. The encrypted key store can be decrypted with this password.\n     * @param {object} options The options to use when encrypt a keyring. See `keyring.encrypt` for more detail about options.\n     * @return {object}\n     */\n\n  }, {\n    key: \"encryptV3\",\n    value: function encryptV3(password, options) {\n      throw new Error(\"Not supported for this class. Use 'keyring.encrypt(password)'.\");\n    }\n    /**\n     * returns true if keyring has decoupled key.\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isDecoupled\",\n    value: function isDecoupled() {\n      return true;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this._address;\n    },\n    set: function set(addressInput) {\n      if (!utils.isAddress(addressInput)) throw new Error(\"Invalid address : \".concat(addressInput));\n      this._address = utils.addHexPrefix(addressInput).toLowerCase();\n    }\n  }]);\n\n  return AbstractKeyring;\n}();\n\nmodule.exports = AbstractKeyring;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-wallet/src/keyring/abstractKeyring.js"],"names":["utils","require","AbstractKeyring","address","transactionHash","chainId","role","index","Error","message","password","options","_address","addressInput","isAddress","addHexPrefix","toLowerCase","module","exports"],"mappings":";;;;AAAA;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,0BAAD,CAArB;AAEA;AACA;AACA;AACA;;;IACMC,e;;;AACF;AACJ;AACA;AACA;AACI,2BAAYC,OAAZ,EAAqB;AAAA;;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH;AAED;AACJ;AACA;;;;;;AAWI;AACJ;AACA;AACA;AACA;AACA;yBACSC,e,EAAiBC,O,EAASC,I,EAAMC,K,EAAO;AACxC,YAAM,IAAIC,KAAJ,oBAAN;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;gCACgBC,O,EAASH,I,EAAMC,K,EAAO;AAC9B,YAAM,IAAIC,KAAJ,oBAAN;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;4BACYE,Q,EAAwB;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AAC5B,YAAM,IAAIH,KAAJ,oBAAN;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;2BACW;AACH,YAAM,IAAIA,KAAJ,oBAAN;AACH;AAED;AACJ;AACA;AACA;AACA;;;;yCACyB;AACjB,YAAM,IAAIA,KAAJ,iCAAN;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;8BACcE,Q,EAAUC,O,EAAS;AACzB,YAAM,IAAIH,KAAJ,kEAAN;AACH;AAED;AACJ;AACA;AACA;AACA;;;;kCACkB;AACV,aAAO,IAAP;AACH;;;wBA7Ea;AACV,aAAO,KAAKI,QAAZ;AACH,K;sBAEWC,Y,EAAc;AACtB,UAAI,CAACb,KAAK,CAACc,SAAN,CAAgBD,YAAhB,CAAL,EAAoC,MAAM,IAAIL,KAAJ,6BAA+BK,YAA/B,EAAN;AAEpC,WAAKD,QAAL,GAAgBZ,KAAK,CAACe,YAAN,CAAmBF,YAAnB,EAAiCG,WAAjC,EAAhB;AACH;;;;;;AAwELC,MAAM,CAACC,OAAP,GAAiBhB,eAAjB","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable class-methods-use-this */\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst utils = require('../../../caver-utils/src')\n\n/**\n * representing a Keyring which includes `address` and `private keys` by roles.\n * @class\n */\nclass AbstractKeyring {\n    /**\n     * creates a keyring.\n     * @param {string} address - The address of keyring.\n     */\n    constructor(address) {\n        this.address = address\n    }\n\n    /**\n     * @type {string}\n     */\n    get address() {\n        return this._address\n    }\n\n    set address(addressInput) {\n        if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`)\n\n        this._address = utils.addHexPrefix(addressInput).toLowerCase()\n    }\n\n    /**\n     * signs with transactionHash with a key and returns signature(s).\n     * This method has to be overrided in classes which extends AbstractKeyring.\n     *\n     * @return {Array.<string>|Array.<Array.<string>>}\n     */\n    sign(transactionHash, chainId, role, index) {\n        throw new Error(`Not implemented.`)\n    }\n\n    /**\n     * signs with hashed message and returns result object that includes `signatures`, `message` and `messageHash`.\n     * This method has to be overrided in classes which extends AbstractKeyring.\n     *\n     * @return {object}\n     */\n    signMessage(message, role, index) {\n        throw new Error(`Not implemented.`)\n    }\n\n    /**\n     * encrypts a keyring and returns a keystore v4 object.\n     * This method has to be overrided in classes which extends AbstractKeyring.\n     *\n     * @return {object}\n     */\n    encrypt(password, options = {}) {\n        throw new Error(`Not implemented.`)\n    }\n\n    /**\n     * returns a copied singleKeyring instance.\n     * This method has to be overrided in classes which extends AbstractKeyring.\n     *\n     * @return {AbstractKeyring}\n     */\n    copy() {\n        throw new Error(`Not implemented.`)\n    }\n\n    /**\n     * returns KlaytnWalletKey format. If keyring uses more than one private key, this function will throw error.\n     *\n     * @return {string}\n     */\n    getKlaytnWalletKey() {\n        throw new Error(`Not supported for this class.`)\n    }\n\n    /**\n     * encrypts a keyring and returns a keystore v3 object.\n     *\n     * @param {string} password The password to be used for keyring encryption. The encrypted key store can be decrypted with this password.\n     * @param {object} options The options to use when encrypt a keyring. See `keyring.encrypt` for more detail about options.\n     * @return {object}\n     */\n    encryptV3(password, options) {\n        throw new Error(`Not supported for this class. Use 'keyring.encrypt(password)'.`)\n    }\n\n    /**\n     * returns true if keyring has decoupled key.\n     *\n     * @return {boolean}\n     */\n    isDecoupled() {\n        return true\n    }\n}\n\nmodule.exports = AbstractKeyring\n"]},"metadata":{},"sourceType":"script"}