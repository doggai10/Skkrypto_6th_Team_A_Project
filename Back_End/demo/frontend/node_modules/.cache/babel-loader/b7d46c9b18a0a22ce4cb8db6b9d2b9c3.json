{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar _ = require('lodash');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar AbstractFeeDelegatedWithRatioTransaction = require('../abstractFeeDelegatedWithRatioTransaction');\n\nvar utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio)) throw new Error(\"Cannot decode to FeeDelegatedValueTransferWithRatio. The prefix must be \".concat(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 10),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      to = _RLP$decode2[3],\n      value = _RLP$decode2[4],\n      from = _RLP$decode2[5],\n      feeRatio = _RLP$decode2[6],\n      signatures = _RLP$decode2[7],\n      feePayer = _RLP$decode2[8],\n      feePayerSignatures = _RLP$decode2[9];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to: to,\n    value: utils.trimLeadingZero(value),\n    from: from,\n    feeRatio: utils.trimLeadingZero(feeRatio),\n    signatures: signatures,\n    feePayer: feePayer,\n    feePayerSignatures: feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated value transfer with ratio transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedvaluetransferwithratio to see more detail.\n * @class\n */\n\n\nvar FeeDelegatedValueTransferWithRatio = /*#__PURE__*/function (_AbstractFeeDelegated) {\n  \"use strict\";\n\n  _inherits(FeeDelegatedValueTransferWithRatio, _AbstractFeeDelegated);\n\n  var _super = _createSuper(FeeDelegatedValueTransferWithRatio);\n\n  _createClass(FeeDelegatedValueTransferWithRatio, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedValueTransferWithRatio transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated value transfer with ratio transaction.\n     * @return {FeeDelegatedValueTransferWithRatio}\n     */\n    value: function decode(rlpEncoded) {\n      return new FeeDelegatedValueTransferWithRatio(_decode(rlpEncoded));\n    }\n    /**\n     * Creates a fee delegated value transfer with ratio transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n\n  }]);\n\n  function FeeDelegatedValueTransferWithRatio(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, FeeDelegatedValueTransferWithRatio);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio, createTxObj);\n    _this.to = createTxObj.to;\n    _this.value = createTxObj.value;\n    return _this;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(FeeDelegatedValueTransferWithRatio, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      var feePayerSignatures = this.feePayerSignatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.feeRatio, signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.feeRatio]);\n    }\n  }, {\n    key: \"to\",\n    get: function get() {\n      return this._to;\n    },\n    set: function set(address) {\n      if (!utils.isAddress(address)) throw new Error(\"Invalid address of to: \".concat(address));\n      this._to = address.toLowerCase();\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(val) {\n      this._value = utils.numberToHex(val);\n    }\n  }]);\n\n  return FeeDelegatedValueTransferWithRatio;\n}(AbstractFeeDelegatedWithRatioTransaction);\n\nmodule.exports = FeeDelegatedValueTransferWithRatio;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/valueTransfer/feeDelegatedValueTransferWithRatio.js"],"names":["RLP","require","Bytes","_","TX_TYPE_STRING","TX_TYPE_TAG","AbstractFeeDelegatedWithRatioTransaction","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedValueTransferWithRatio","Error","typeDettached","slice","decode","nonce","gasPrice","gas","to","value","from","feeRatio","signatures","feePayer","feePayerSignatures","trimLeadingZero","FeeDelegatedValueTransferWithRatio","createTxObj","isString","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","_to","address","isAddress","_value","val","numberToHex","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst AbstractFeeDelegatedWithRatioTransaction = require('../abstractFeeDelegatedWithRatioTransaction')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio))\n        throw new Error(\n            `Cannot decode to FeeDelegatedValueTransferWithRatio. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, to, value, from, feeRatio, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        from,\n        feeRatio: utils.trimLeadingZero(feeRatio),\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated value transfer with ratio transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/partial-fee-delegation#txtypefeedelegatedvaluetransferwithratio to see more detail.\n * @class\n */\nclass FeeDelegatedValueTransferWithRatio extends AbstractFeeDelegatedWithRatioTransaction {\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedValueTransferWithRatio transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated value transfer with ratio transaction.\n     * @return {FeeDelegatedValueTransferWithRatio}\n     */\n    static decode(rlpEncoded) {\n        return new FeeDelegatedValueTransferWithRatio(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a fee delegated value transfer with ratio transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferWithRatio transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `feeRatio`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio, createTxObj)\n        this.to = createTxObj.to\n        this.value = createTxObj.value\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.to.toLowerCase(),\n                Bytes.fromNat(this.value),\n                this.from.toLowerCase(),\n                this.feeRatio,\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferWithRatio,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.from.toLowerCase(),\n            this.feeRatio,\n        ])\n    }\n}\n\nmodule.exports = FeeDelegatedValueTransferWithRatio\n"]},"metadata":{},"sourceType":"script"}