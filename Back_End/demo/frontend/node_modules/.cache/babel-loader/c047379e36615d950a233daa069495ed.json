{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar isValidRole = require('../../../../caver-utils').isValidRole;\n\nvar isValidPublicKey = require('../../../../caver-utils').isValidPublicKey;\n\nvar AccountForUpdate =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  function AccountForUpdate(address, keyForUpdate, options) {\n    _classCallCheck(this, AccountForUpdate);\n\n    this.address = address;\n    this.keyForUpdate = keyFormatter(keyForUpdate, options);\n  }\n\n  _createClass(AccountForUpdate, [{\n    key: \"fillUpdateObject\",\n    value: function fillUpdateObject(updateObject) {\n      delete updateObject.key;\n      Object.assign(updateObject, this.keyForUpdate);\n    }\n  }]);\n\n  return AccountForUpdate;\n}();\n\nfunction keyFormatter(keyForUpdate, options) {\n  var keyObject = {};\n\n  if (typeof keyForUpdate === 'string') {\n    if (options) throw new Error('Failed to keyFormatter for AccountForUpdate: AccountKeyPublic/legacyKey/failKey cannot have options');\n\n    switch (keyForUpdate) {\n      case 'legacyKey':\n        keyObject.legacyKey = true;\n        break;\n\n      case 'failKey':\n        keyObject.failKey = true;\n        break;\n\n      default:\n        if (!isValidPublicKey(keyForUpdate)) throw new Error('Invalid public key');\n        keyObject.publicKey = keyForUpdate;\n        break;\n    }\n  } else if (Array.isArray(keyForUpdate)) {\n    if (!options || !options.threshold || !options.weight) throw new Error('For AccountKeyMultiSig, threshold and weight should be defined in options object.');\n    if (!Array.isArray(options.weight)) throw new Error('The weight should be defined as a array.');\n    if (options.weight.length !== keyForUpdate.length) throw new Error('The length of keys in AccountKeyMultiSig and the length of weight array do not match.');\n    keyObject.multisig = {\n      threshold: options.threshold,\n      keys: []\n    };\n    var weightSum = 0;\n\n    for (var i = 0; i < keyForUpdate.length; i++) {\n      var key = keyForUpdate[i];\n      if (!isValidPublicKey(key)) throw new Error('Invalid public key');\n      keyObject.multisig.keys.push({\n        weight: options.weight[i],\n        publicKey: key\n      });\n      weightSum += options.weight[i];\n    }\n\n    if (weightSum < options.threshold) throw new Error('Invalid options for AccountKeyMultiSig: The sum of weights is less than the threshold.');\n  } else {\n    for (var _key in keyForUpdate) {\n      if (!isValidRole(_key)) throw new Error(\"Invalid role is defined: \".concat(_key));\n      options = options || {};\n\n      if (_key === 'transactionKey') {\n        keyObject.roleTransactionKey = keyFormatter(keyForUpdate[_key], options.transactionKey);\n      }\n\n      if (_key === 'updateKey') {\n        keyObject.roleAccountUpdateKey = keyFormatter(keyForUpdate[_key], options.updateKey);\n      }\n\n      if (_key === 'feePayerKey') {\n        keyObject.roleFeePayerKey = keyFormatter(keyForUpdate[_key], options.feePayerKey);\n      }\n    }\n  }\n\n  return keyObject;\n}\n\nmodule.exports = AccountForUpdate;","map":null,"metadata":{},"sourceType":"script"}