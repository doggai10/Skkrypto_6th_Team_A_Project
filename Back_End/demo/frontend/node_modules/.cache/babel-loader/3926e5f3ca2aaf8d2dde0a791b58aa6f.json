{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractTransaction = require('../abstractTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeChainDataAnchoring)) throw new Error(\"Cannot decode to ChainDataAnchoring. The prefix must be \".concat(TX_TYPE_TAG.TxTypeChainDataAnchoring, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 6),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      from = _RLP$decode2[3],\n      input = _RLP$decode2[4],\n      signatures = _RLP$decode2[5];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from: from,\n    input: input,\n    signatures: signatures\n  };\n}\n/**\n * Represents a chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypechaindataanchoring to see more detail.\n * @class\n */\n\n\nvar ChainDataAnchoring = /*#__PURE__*/function (_AbstractTransaction) {\n  \"use strict\";\n\n  _inherits(ChainDataAnchoring, _AbstractTransaction);\n\n  var _super = _createSuper(ChainDataAnchoring);\n\n  _createClass(ChainDataAnchoring, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns a ChainDataAnchoring transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded chain data anchoring transaction.\n     * @return {ChainDataAnchoring}\n     */\n    value: function decode(rlpEncoded) {\n      return new ChainDataAnchoring(_decode(rlpEncoded));\n    }\n    /**\n     * Creates a chain data anchoring transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a ChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures` and `chainId`.\n     */\n\n  }]);\n\n  function ChainDataAnchoring(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, ChainDataAnchoring);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeChainDataAnchoring, createTxObj);\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    _this.input = createTxObj.input || createTxObj.data;\n    return _this;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(ChainDataAnchoring, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeChainDataAnchoring + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input, signatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeChainDataAnchoring, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input]);\n    }\n  }, {\n    key: \"input\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(input) {\n      if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n      this._input = utils.toHex(input);\n    }\n  }]);\n\n  return ChainDataAnchoring;\n}(AbstractTransaction);\n\nmodule.exports = ChainDataAnchoring;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/chainDataAnchoring/chainDataAnchoring.js"],"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeChainDataAnchoring","Error","typeDettached","slice","decode","nonce","gasPrice","gas","from","input","signatures","trimLeadingZero","ChainDataAnchoring","createTxObj","isString","data","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","_input","isHex","toHex","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeChainDataAnchoring))\n        throw new Error(`Cannot decode to ChainDataAnchoring. The prefix must be ${TX_TYPE_TAG.TxTypeChainDataAnchoring}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, input, signatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        input,\n        signatures,\n    }\n}\n\n/**\n * Represents a chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypechaindataanchoring to see more detail.\n * @class\n */\nclass ChainDataAnchoring extends AbstractTransaction {\n    /**\n     * decodes the RLP-encoded string and returns a ChainDataAnchoring transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded chain data anchoring transaction.\n     * @return {ChainDataAnchoring}\n     */\n    static decode(rlpEncoded) {\n        return new ChainDataAnchoring(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a chain data anchoring transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a ChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeChainDataAnchoring, createTxObj)\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.toHex(input)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeChainDataAnchoring +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.input,\n                signatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeChainDataAnchoring,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.input,\n        ])\n    }\n}\n\nmodule.exports = ChainDataAnchoring\n"]},"metadata":{},"sourceType":"script"}