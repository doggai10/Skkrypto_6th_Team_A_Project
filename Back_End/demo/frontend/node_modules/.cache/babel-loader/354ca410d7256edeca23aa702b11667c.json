{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG;\n/**\n * Representing an AccountKeyFail.\n * @class\n */\n\n\nvar AccountKeyFail = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function AccountKeyFail() {\n    _classCallCheck(this, AccountKeyFail);\n  }\n\n  _createClass(AccountKeyFail, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns an RLP-encoded AccountKeyFail string.\n     * @return {string}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    value: function getRLPEncoding() {\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG;\n    }\n  }], [{\n    key: \"decode\",\n\n    /**\n     * Decodes an RLP-encoded AccountKeyFail string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyFail string.\n     * @return {AccountKeyFail}\n     */\n    value: function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG)) throw new Error(\"Cannot decode to AccountKeyFail. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG, \": \").concat(rlpEncodedKey));\n      return new AccountKeyFail();\n    }\n  }]);\n\n  return AccountKeyFail;\n}();\n\nmodule.exports = AccountKeyFail;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyFail.js"],"names":["utils","require","ACCOUNT_KEY_TAG","AccountKeyFail","ACCOUNT_KEY_FAIL_TAG","rlpEncodedKey","addHexPrefix","startsWith","Error","module","exports"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAArB;;eAC4BA,OAAO,CAAC,oBAAD,C;IAA3BC,e,YAAAA,e;AAER;AACA;AACA;AACA;;;IACMC,c;;;;;;;;;;AAcF;AACJ;AACA;AACA;AACI;qCACiB;AACb,aAAOD,eAAe,CAACE,oBAAvB;AACH;;;;AApBD;AACJ;AACA;AACA;AACA;2BACkBC,a,EAAe;AACzBA,MAAAA,aAAa,GAAGL,KAAK,CAACM,YAAN,CAAmBD,aAAnB,CAAhB;AACA,UAAI,CAACA,aAAa,CAACE,UAAd,CAAyBL,eAAe,CAACE,oBAAzC,CAAL,EACI,MAAM,IAAII,KAAJ,+DAAiEN,eAAe,CAACE,oBAAjF,eAA0GC,aAA1G,EAAN;AAEJ,aAAO,IAAIF,cAAJ,EAAP;AACH;;;;;;AAYLM,MAAM,CAACC,OAAP,GAAiBP,cAAjB","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst utils = require('../../../caver-utils')\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\n\n/**\n * Representing an AccountKeyFail.\n * @class\n */\nclass AccountKeyFail {\n    /**\n     * Decodes an RLP-encoded AccountKeyFail string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyFail string.\n     * @return {AccountKeyFail}\n     */\n    static decode(rlpEncodedKey) {\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG))\n            throw new Error(`Cannot decode to AccountKeyFail. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG}: ${rlpEncodedKey}`)\n\n        return new AccountKeyFail()\n    }\n\n    /**\n     * Returns an RLP-encoded AccountKeyFail string.\n     * @return {string}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    getRLPEncoding() {\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_FAIL_TAG\n    }\n}\n\nmodule.exports = AccountKeyFail\n"]},"metadata":{},"sourceType":"script"}