{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n/**\n * Representing an options for AccountKeyWeightedMultiSig.\n * This class will define threshold and weights.\n * @class\n */\n\n\nvar WeightedMultiSigOptions = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(WeightedMultiSigOptions, null, [{\n    key: \"fromObject\",\n\n    /**\n     * Creates an instance of WeightedMultiSigOptions.\n     * @param {object} options - An object which defines 'threshold' and 'weights'.\n     * @return {WeightedMultiSigOptions}\n     */\n    value: function fromObject(options) {\n      // To support the previous options format(threshold and weight)\n      if (options.weight && !options.weights) {\n        options.weights = options.weight;\n        delete options.weight;\n      } // Returns empty WeightedMultiSigOptions if options not define threshold and weights like '{}'\n\n\n      if (options.threshold === undefined && options.weights === undefined) return new WeightedMultiSigOptions();\n      if (options.threshold === undefined || options.weights === undefined) throw new Error(\"Invalid object for creating WeightedMultiSigOptions. 'threshold' and 'weights' should be defined.\");\n      return new WeightedMultiSigOptions(options.threshold, options.weights);\n    }\n    /**\n     * Creates an instance of WeightedMultiSigOptions.\n     * @param {number} threshold - a threshold\n     * @param {Array.<number>} weights - an array of weight of key\n     */\n\n  }]);\n\n  function WeightedMultiSigOptions(threshold, weights) {\n    _classCallCheck(this, WeightedMultiSigOptions);\n\n    if (threshold !== undefined && weights === undefined || threshold === undefined && weights !== undefined) {\n      throw new Error(\"For creating an WeightedMultiSigOptions, 'threshold' and 'weights' should be defined.\");\n    }\n\n    if (threshold !== undefined) this.threshold = threshold;\n    if (weights !== undefined) this.weights = weights;\n  }\n  /**\n   * @type {number}\n   */\n\n\n  _createClass(WeightedMultiSigOptions, [{\n    key: \"isEmpty\",\n\n    /**\n     * Returns 'true' if WeightedMultiSigOptions is empty.\n     * @return {Boolean}\n     */\n    value: function isEmpty() {\n      return this.threshold === undefined && this.weights === undefined;\n    }\n  }, {\n    key: \"threshold\",\n    get: function get() {\n      return this._threshold;\n    },\n    set: function set(th) {\n      if (!_.isNumber(th)) throw new Error(\"The threshold must be number type.\");\n      if (!validateWeightedSum(th, this.weights)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n      this._threshold = th;\n    }\n    /**\n     * @type {Array.<number>}\n     */\n\n  }, {\n    key: \"weights\",\n    get: function get() {\n      return this._weights;\n    },\n    set: function set(weightArr) {\n      if (!_.isArray(weightArr)) throw new Error(\"weight should be an array that stores the weight of each public key.\");\n\n      var _iterator = _createForOfIteratorHelper(weightArr),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var w = _step.value;\n          if (!_.isNumber(w)) throw new Error(\"The weight of each key must be number type.\");\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!validateWeightedSum(this.threshold, weightArr)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n      this._weights = weightArr;\n    }\n  }]);\n\n  return WeightedMultiSigOptions;\n}();\n/**\n * validates threshold and sum of weights.\n * @param {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\n * @param {Array.<number>} weights - An array of weights.\n * @return {Boolean}\n */\n\n\nfunction validateWeightedSum(threshold, weights) {\n  if (threshold === undefined || weights === undefined) return true;\n  var weightSum = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(weights),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var w = _step2.value;\n      weightSum += w;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (threshold > weightSum) return false;\n  return true;\n}\n\nmodule.exports = WeightedMultiSigOptions;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-account/src/accountKey/weightedMultiSigOptions.js"],"names":["_","require","WeightedMultiSigOptions","options","weight","weights","threshold","undefined","Error","_threshold","th","isNumber","validateWeightedSum","_weights","weightArr","isArray","w","weightSum","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\n\n/**\n * Representing an options for AccountKeyWeightedMultiSig.\n * This class will define threshold and weights.\n * @class\n */\nclass WeightedMultiSigOptions {\n    /**\n     * Creates an instance of WeightedMultiSigOptions.\n     * @param {object} options - An object which defines 'threshold' and 'weights'.\n     * @return {WeightedMultiSigOptions}\n     */\n    static fromObject(options) {\n        // To support the previous options format(threshold and weight)\n        if (options.weight && !options.weights) {\n            options.weights = options.weight\n            delete options.weight\n        }\n\n        // Returns empty WeightedMultiSigOptions if options not define threshold and weights like '{}'\n        if (options.threshold === undefined && options.weights === undefined) return new WeightedMultiSigOptions()\n\n        if (options.threshold === undefined || options.weights === undefined)\n            throw new Error(`Invalid object for creating WeightedMultiSigOptions. 'threshold' and 'weights' should be defined.`)\n\n        return new WeightedMultiSigOptions(options.threshold, options.weights)\n    }\n\n    /**\n     * Creates an instance of WeightedMultiSigOptions.\n     * @param {number} threshold - a threshold\n     * @param {Array.<number>} weights - an array of weight of key\n     */\n    constructor(threshold, weights) {\n        if ((threshold !== undefined && weights === undefined) || (threshold === undefined && weights !== undefined)) {\n            throw new Error(`For creating an WeightedMultiSigOptions, 'threshold' and 'weights' should be defined.`)\n        }\n        if (threshold !== undefined) this.threshold = threshold\n        if (weights !== undefined) this.weights = weights\n    }\n\n    /**\n     * @type {number}\n     */\n    get threshold() {\n        return this._threshold\n    }\n\n    set threshold(th) {\n        if (!_.isNumber(th)) throw new Error(`The threshold must be number type.`)\n\n        if (!validateWeightedSum(th, this.weights))\n            throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.')\n\n        this._threshold = th\n    }\n\n    /**\n     * @type {Array.<number>}\n     */\n    get weights() {\n        return this._weights\n    }\n\n    set weights(weightArr) {\n        if (!_.isArray(weightArr)) throw new Error(`weight should be an array that stores the weight of each public key.`)\n        for (const w of weightArr) {\n            if (!_.isNumber(w)) throw new Error(`The weight of each key must be number type.`)\n        }\n\n        if (!validateWeightedSum(this.threshold, weightArr))\n            throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.')\n\n        this._weights = weightArr\n    }\n\n    /**\n     * Returns 'true' if WeightedMultiSigOptions is empty.\n     * @return {Boolean}\n     */\n    isEmpty() {\n        return this.threshold === undefined && this.weights === undefined\n    }\n}\n\n/**\n * validates threshold and sum of weights.\n * @param {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\n * @param {Array.<number>} weights - An array of weights.\n * @return {Boolean}\n */\nfunction validateWeightedSum(threshold, weights) {\n    if (threshold === undefined || weights === undefined) return true\n\n    let weightSum = 0\n\n    for (const w of weights) weightSum += w\n\n    if (threshold > weightSum) return false\n\n    return true\n}\n\nmodule.exports = WeightedMultiSigOptions\n"]},"metadata":{},"sourceType":"script"}