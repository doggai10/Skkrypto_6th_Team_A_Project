{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-helpers/src/errors.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\nvar constants = require('./constants');\n\nvar hasErrorMessage = function hasErrorMessage(result) {\n  return !!result && !!result.error && !!result.error.message;\n};\n\nvar txErrorTable = {\n  '0x2': 'VM error occurs while running smart contract',\n  '0x3': 'max call depth exceeded',\n  '0x4': 'contract address collision',\n  '0x5': 'contract creation code storage out of gas',\n  '0x6': 'evm: max code size exceeded',\n  '0x7': 'out of gas',\n  '0x8': 'evm: write protection',\n  '0x9': 'evm: execution reverted',\n  '0xa': 'reached the opcode count limit',\n  '0xb': 'account already exists',\n  '0xc': 'not a program account (e.g., an account having code and storage)',\n  '0xd': 'Human-readable address is not supported now',\n  '0xe': 'fee ratio is out of range [1, 99]',\n  '0xf': 'AccountKeyFail is not updatable',\n  '0x10': 'different account key type',\n  '0x11': 'AccountKeyNil cannot be initialized to an account',\n  '0x12': 'public key is not on curve',\n  '0x13': 'key weight is zero',\n  '0x14': 'key is not serializable',\n  '0x15': 'duplicated key',\n  '0x16': 'weighted sum overflow',\n  '0x17': 'unsatisfiable threshold. Weighted sum of keys is less than the threshold.',\n  '0x18': 'length is zero',\n  '0x19': 'length too long',\n  '0x1a': 'nested role-based key',\n  '0x1b': 'a legacy transaction must be with a legacy account key',\n  '0x1c': 'deprecated feature',\n  '0x1d': 'not supported',\n  '0x1e': 'smart contract code format is invalid'\n};\nmodule.exports = {\n  InvalidConnection: function InvalidConnection(host) {\n    return new Error(\"CONNECTION ERROR: Couldn't connect to node \".concat(host, \".\"));\n  },\n  RequestFailed: function RequestFailed(err) {\n    return new Error(\"Request failed: \".concat(err));\n  },\n  ConnectionTimeout: function ConnectionTimeout(ms) {\n    return new Error(\"CONNECTION TIMEOUT: timeout of \".concat(ms, \"ms achived\"));\n  },\n  ConnectionNotOpenError: function ConnectionNotOpenError(event) {\n    var error = new Error('connection not open on send()');\n\n    if (event) {\n      error.code = event.code;\n      error.reason = event.reason;\n    }\n\n    return error;\n  },\n  InvalidProvider: function InvalidProvider() {\n    return new Error('Provider not set or invalid');\n  },\n  InvalidNumberOfParams: function InvalidNumberOfParams(got, expected, method) {\n    return new Error(\"\\n    Invalid number of parameters for \\\"\".concat(method, \"\\\". Got \").concat(got, \" expected \").concat(expected, \"!\\n    \"));\n  },\n  ErrorResponse: function ErrorResponse(result) {\n    var message = hasErrorMessage(result) ? result.error.message : JSON.stringify(result);\n    return new Error(\"Returned error: \".concat(message));\n  },\n  InvalidResponse: function InvalidResponse(result) {\n    if (result === null) return new Error('Invalid response: null');\n    var message = hasErrorMessage(result) ? result.error.message : \"Invalid JSON RPC response: \".concat(JSON.stringify(result));\n    return new Error(message);\n  },\n  needNameCallPropertyToCreateMethod: new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.'),\n  blockHashNull: new Error('blockHash null'),\n  contractCouldntBeStored: new Error(\"The contract code couldn't be stored, please check your gas limit.\"),\n  receiptDidntContainContractAddress: new Error(\"The transaction receipt didn't contain a contract address.\"),\n  transactionReverted: function transactionReverted(receiptJSON) {\n    return new Error(\"Transaction has been reverted by the EVM:\\n\".concat(receiptJSON));\n  },\n  transactionRanOutOfGas: function transactionRanOutOfGas(receiptJSON) {\n    return new Error(\"Transaction ran out of gas. Please provide more gas:\\n\".concat(receiptJSON));\n  },\n  invalidGasPrice: function invalidGasPrice() {\n    return new Error(\"Invalid gas price. Please provide valid gas price: \".concat(constants.VALID_GAS_PRICE));\n  },\n  invalidGasLimit: function invalidGasLimit() {\n    return new Error('Invalid gas limit. Please provide valid gas.');\n  },\n  invalidData: function invalidData() {\n    return new Error('Invalid data. Please provide valid hex-strict data.');\n  },\n  notAllowedZeroGas: function notAllowedZeroGas() {\n    return new Error(\"gas can't be 0. Please provide more gas.\");\n  },\n  txErrorTable: txErrorTable\n};","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-core-helpers/src/errors.js"],"names":["constants","require","hasErrorMessage","result","error","message","txErrorTable","module","exports","InvalidConnection","host","Error","RequestFailed","err","ConnectionTimeout","ms","ConnectionNotOpenError","event","code","reason","InvalidProvider","InvalidNumberOfParams","got","expected","method","ErrorResponse","JSON","stringify","InvalidResponse","needNameCallPropertyToCreateMethod","blockHashNull","contractCouldntBeStored","receiptDidntContainContractAddress","transactionReverted","receiptJSON","transactionRanOutOfGas","invalidGasPrice","VALID_GAS_PRICE","invalidGasLimit","invalidData","notAllowedZeroGas"],"mappings":"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","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-helpers/src/errors.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\nconst constants = require('./constants')\n\nconst hasErrorMessage = result => !!result && !!result.error && !!result.error.message\n\nconst txErrorTable = {\n    '0x2': 'VM error occurs while running smart contract',\n    '0x3': 'max call depth exceeded',\n    '0x4': 'contract address collision',\n    '0x5': 'contract creation code storage out of gas',\n    '0x6': 'evm: max code size exceeded',\n    '0x7': 'out of gas',\n    '0x8': 'evm: write protection',\n    '0x9': 'evm: execution reverted',\n    '0xa': 'reached the opcode count limit',\n    '0xb': 'account already exists',\n    '0xc': 'not a program account (e.g., an account having code and storage)',\n    '0xd': 'Human-readable address is not supported now',\n    '0xe': 'fee ratio is out of range [1, 99]',\n    '0xf': 'AccountKeyFail is not updatable',\n    '0x10': 'different account key type',\n    '0x11': 'AccountKeyNil cannot be initialized to an account',\n    '0x12': 'public key is not on curve',\n    '0x13': 'key weight is zero',\n    '0x14': 'key is not serializable',\n    '0x15': 'duplicated key',\n    '0x16': 'weighted sum overflow',\n    '0x17': 'unsatisfiable threshold. Weighted sum of keys is less than the threshold.',\n    '0x18': 'length is zero',\n    '0x19': 'length too long',\n    '0x1a': 'nested role-based key',\n    '0x1b': 'a legacy transaction must be with a legacy account key',\n    '0x1c': 'deprecated feature',\n    '0x1d': 'not supported',\n    '0x1e': 'smart contract code format is invalid',\n}\n\nmodule.exports = {\n    InvalidConnection: host => new Error(`CONNECTION ERROR: Couldn't connect to node ${host}.`),\n    RequestFailed: err => new Error(`Request failed: ${err}`),\n    ConnectionTimeout: ms => new Error(`CONNECTION TIMEOUT: timeout of ${ms}ms achived`),\n    ConnectionNotOpenError: event => {\n        const error = new Error('connection not open on send()')\n        if (event) {\n            error.code = event.code\n            error.reason = event.reason\n        }\n\n        return error\n    },\n    InvalidProvider: () => new Error('Provider not set or invalid'),\n    InvalidNumberOfParams: (got, expected, method) =>\n        new Error(`\n    Invalid number of parameters for \"${method}\". Got ${got} expected ${expected}!\n    `),\n    ErrorResponse: result => {\n        const message = hasErrorMessage(result) ? result.error.message : JSON.stringify(result)\n        return new Error(`Returned error: ${message}`)\n    },\n    InvalidResponse: result => {\n        if (result === null) return new Error('Invalid response: null')\n        const message = hasErrorMessage(result) ? result.error.message : `Invalid JSON RPC response: ${JSON.stringify(result)}`\n        return new Error(message)\n    },\n    needNameCallPropertyToCreateMethod: new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.'),\n    blockHashNull: new Error('blockHash null'),\n    contractCouldntBeStored: new Error(\"The contract code couldn't be stored, please check your gas limit.\"),\n    receiptDidntContainContractAddress: new Error(\"The transaction receipt didn't contain a contract address.\"),\n    transactionReverted: receiptJSON => new Error(`Transaction has been reverted by the EVM:\\n${receiptJSON}`),\n    transactionRanOutOfGas: receiptJSON => new Error(`Transaction ran out of gas. Please provide more gas:\\n${receiptJSON}`),\n    invalidGasPrice: () => new Error(`Invalid gas price. Please provide valid gas price: ${constants.VALID_GAS_PRICE}`),\n    invalidGasLimit: () => new Error('Invalid gas limit. Please provide valid gas.'),\n    invalidData: () => new Error('Invalid data. Please provide valid hex-strict data.'),\n    notAllowedZeroGas: () => new Error(\"gas can't be 0. Please provide more gas.\"),\n    txErrorTable,\n}\n"]},"metadata":{},"sourceType":"script"}