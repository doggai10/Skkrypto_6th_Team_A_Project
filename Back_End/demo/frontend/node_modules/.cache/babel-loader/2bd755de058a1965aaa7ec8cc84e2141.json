{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractTransaction = require('../abstractTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING;\n\nvar utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n\n  var _RLP$decode = RLP.decode(rlpEncoded),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 9),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      to = _RLP$decode2[3],\n      value = _RLP$decode2[4],\n      input = _RLP$decode2[5],\n      v = _RLP$decode2[6],\n      r = _RLP$decode2[7],\n      s = _RLP$decode2[8];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to: to,\n    value: utils.trimLeadingZero(value),\n    input: utils.trimLeadingZero(input),\n    signatures: [v, r, s]\n  };\n}\n/**\n * Represents a legacy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction to see more detail.\n * @class\n */\n\n\nvar LegacyTransaction = /*#__PURE__*/function (_AbstractTransaction) {\n  \"use strict\";\n\n  _inherits(LegacyTransaction, _AbstractTransaction);\n\n  var _super = _createSuper(LegacyTransaction);\n\n  _createClass(LegacyTransaction, null, [{\n    key: \"decode\",\n    value: function decode(rlpEncoded) {\n      return new LegacyTransaction(_decode(rlpEncoded));\n    }\n    /**\n     * Creates a legacy transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\n     */\n\n  }]);\n\n  function LegacyTransaction(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, LegacyTransaction);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    createTxObj.from = createTxObj.from || '0x';\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeLegacyTransaction, createTxObj);\n    _this.to = createTxObj.to || '0x';\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    _this.input = createTxObj.input || createTxObj.data || '0x';\n    _this.value = createTxObj.value || '0x0';\n    return _this;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(LegacyTransaction, [{\n    key: \"appendSignatures\",\n\n    /**\n     * Appends signatures array to transaction.\n     * Legacy transaction cannot have more than one signature, so an error occurs if the transaction already has a signature.\n     *\n     * @override\n     * @param {Array.<string>|Array.<Array.<string>>} sig - An array of signatures to append.\n     */\n    value: function appendSignatures(sig) {\n      if (!utils.isEmptySig(this.signatures)) throw new Error(\"signatures already defined. \".concat(this.type, \" cannot include more than one signature. Please use tx.signatures = sigArr to replace.\"));\n\n      if (Array.isArray(sig[0])) {\n        if (sig.length > 1) throw new Error(\"signatures are too long. \".concat(this.type, \" cannot include more than one signature.\"));\n        sig = sig[0];\n      }\n\n      this.signatures = sig;\n    }\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n\n  }, {\n    key: \"getRLPEncoding\",\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      return RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, this.signatures.v, this.signatures.r, this.signatures.s]);\n    }\n    /**\n     * Returns RLP-encoded string for making signature\n     * @override\n     * @return {string}\n     */\n\n  }, {\n    key: \"getRLPEncodingForSignature\",\n    value: function getRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      if (this.chainId === undefined) throw new Error(\"chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.\");\n      return RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, Bytes.fromNat(this.chainId || '0x1'), '0x', '0x']);\n    }\n    /**\n     * LegacyTransaction does not have a common RLP encoding because no other type exists.\n     * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      return this.getRLPEncodingForSignature();\n    }\n  }, {\n    key: \"to\",\n    get: function get() {\n      return this._to;\n    },\n    set: function set(address) {\n      if (address !== '0x' && !utils.isAddress(address)) throw new Error(\"Invalid address \".concat(address));\n      this._to = address.toLowerCase();\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    },\n    set: function set(val) {\n      this._value = utils.numberToHex(val);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"input\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(input) {\n      if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n      this._input = utils.addHexPrefix(input);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(data) {\n      this._input = data;\n    }\n  }]);\n\n  return LegacyTransaction;\n}(AbstractTransaction);\n\nmodule.exports = LegacyTransaction;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/legacyTransaction/legacyTransaction.js"],"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","utils","_decode","rlpEncoded","addHexPrefix","decode","nonce","gasPrice","gas","to","value","input","v","r","s","trimLeadingZero","signatures","LegacyTransaction","createTxObj","isString","from","TxTypeLegacyTransaction","data","Error","sig","isEmptySig","type","Array","isArray","length","validateOptionalValues","encode","fromNat","toLowerCase","chainId","undefined","getRLPEncodingForSignature","_to","address","isAddress","_value","val","numberToHex","_input","isHex","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    const [nonce, gasPrice, gas, to, value, input, v, r, s] = RLP.decode(rlpEncoded)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        input: utils.trimLeadingZero(input),\n        signatures: [v, r, s],\n    }\n}\n/**\n * Represents a legacy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction to see more detail.\n * @class\n */\nclass LegacyTransaction extends AbstractTransaction {\n    static decode(rlpEncoded) {\n        return new LegacyTransaction(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a legacy transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n\n        createTxObj.from = createTxObj.from || '0x'\n\n        super(TX_TYPE_STRING.TxTypeLegacyTransaction, createTxObj)\n        this.to = createTxObj.to || '0x'\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n        this.input = createTxObj.input || createTxObj.data || '0x'\n\n        this.value = createTxObj.value || '0x0'\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (address !== '0x' && !utils.isAddress(address)) throw new Error(`Invalid address ${address}`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * @type {string}\n     */\n    get data() {\n        return this._input\n    }\n\n    set data(data) {\n        this._input = data\n    }\n\n    /**\n     * Appends signatures array to transaction.\n     * Legacy transaction cannot have more than one signature, so an error occurs if the transaction already has a signature.\n     *\n     * @override\n     * @param {Array.<string>|Array.<Array.<string>>} sig - An array of signatures to append.\n     */\n    appendSignatures(sig) {\n        if (!utils.isEmptySig(this.signatures))\n            throw new Error(\n                `signatures already defined. ${this.type} cannot include more than one signature. Please use tx.signatures = sigArr to replace.`\n            )\n\n        if (Array.isArray(sig[0])) {\n            if (sig.length > 1) throw new Error(`signatures are too long. ${this.type} cannot include more than one signature.`)\n            sig = sig[0]\n        }\n\n        this.signatures = sig\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.input,\n            this.signatures.v,\n            this.signatures.r,\n            this.signatures.s,\n        ])\n    }\n\n    /**\n     * Returns RLP-encoded string for making signature\n     * @override\n     * @return {string}\n     */\n    getRLPEncodingForSignature() {\n        this.validateOptionalValues()\n        if (this.chainId === undefined)\n            throw new Error(`chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.`)\n\n        return RLP.encode([\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.input,\n            Bytes.fromNat(this.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n\n    /**\n     * LegacyTransaction does not have a common RLP encoding because no other type exists.\n     * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\n     *\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        return this.getRLPEncodingForSignature()\n    }\n}\n\nmodule.exports = LegacyTransaction\n"]},"metadata":{},"sourceType":"script"}