{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar _ = require('lodash');\n\nvar AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedCancel)) throw new Error(\"Cannot decode to FeeDelegatedCancel. The prefix must be \".concat(TX_TYPE_TAG.TxTypeFeeDelegatedCancel, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 7),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      from = _RLP$decode2[3],\n      signatures = _RLP$decode2[4],\n      feePayer = _RLP$decode2[5],\n      feePayerSignatures = _RLP$decode2[6];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from: from,\n    signatures: signatures,\n    feePayer: feePayer,\n    feePayerSignatures: feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated cancel transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedcancel to see more detail.\n * @class\n */\n\n\nvar FeeDelegatedCancel = /*#__PURE__*/function (_AbstractFeeDelegated) {\n  \"use strict\";\n\n  _inherits(FeeDelegatedCancel, _AbstractFeeDelegated);\n\n  var _super = _createSuper(FeeDelegatedCancel);\n\n  _createClass(FeeDelegatedCancel, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedCancel transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated cancel transaction.\n     * @return {FeeDelegatedCancel}\n     */\n    value: function decode(rlpEncoded) {\n      return new FeeDelegatedCancel(_decode(rlpEncoded));\n    }\n    /**\n     * Creates a fee delegated cancel transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedCancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n\n  }]);\n\n  function FeeDelegatedCancel(createTxObj) {\n    _classCallCheck(this, FeeDelegatedCancel);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    return _super.call(this, TX_TYPE_STRING.TxTypeFeeDelegatedCancel, createTxObj);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  _createClass(FeeDelegatedCancel, [{\n    key: \"getRLPEncoding\",\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      var feePayerSignatures = this.feePayerSignatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeFeeDelegatedCancel + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedCancel, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase()]);\n    }\n  }]);\n\n  return FeeDelegatedCancel;\n}(AbstractFeeDelegatedTransaction);\n\nmodule.exports = FeeDelegatedCancel;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/cancel/feeDelegatedCancel.js"],"names":["RLP","require","Bytes","_","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedCancel","Error","typeDettached","slice","decode","nonce","gasPrice","gas","from","signatures","feePayer","feePayerSignatures","trimLeadingZero","FeeDelegatedCancel","createTxObj","isString","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","module","exports"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAME,CAAC,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAMG,+BAA+B,GAAGH,OAAO,CAAC,oCAAD,CAA/C;;eACwCA,OAAO,CAAC,2CAAD,C;IAAvCI,c,YAAAA,c;IAAgBC,W,YAAAA,W;;AACxB,IAAMC,KAAK,GAAGN,OAAO,CAAC,6BAAD,CAArB;;AAEA,SAASO,OAAT,CAAiBC,UAAjB,EAA6B;AACzBA,EAAAA,UAAU,GAAGF,KAAK,CAACG,YAAN,CAAmBD,UAAnB,CAAb;AACA,MAAI,CAACA,UAAU,CAACE,UAAX,CAAsBL,WAAW,CAACM,wBAAlC,CAAL,EACI,MAAM,IAAIC,KAAJ,mEAAqEP,WAAW,CAACM,wBAAjF,eAA8GH,UAA9G,EAAN;AAEJ,MAAMK,aAAa,eAAQL,UAAU,CAACM,KAAX,CAAiB,CAAjB,CAAR,CAAnB;;AALyB,oBAMsDf,GAAG,CAACgB,MAAJ,CAAWF,aAAX,CANtD;AAAA;AAAA,MAMlBG,KANkB;AAAA,MAMXC,QANW;AAAA,MAMDC,GANC;AAAA,MAMIC,IANJ;AAAA,MAMUC,UANV;AAAA,MAMsBC,QANtB;AAAA,MAMgCC,kBANhC;;AAOzB,SAAO;AACHN,IAAAA,KAAK,EAAEV,KAAK,CAACiB,eAAN,CAAsBP,KAAtB,CADJ;AAEHC,IAAAA,QAAQ,EAAEX,KAAK,CAACiB,eAAN,CAAsBN,QAAtB,CAFP;AAGHC,IAAAA,GAAG,EAAEZ,KAAK,CAACiB,eAAN,CAAsBL,GAAtB,CAHF;AAIHC,IAAAA,IAAI,EAAJA,IAJG;AAKHC,IAAAA,UAAU,EAAVA,UALG;AAMHC,IAAAA,QAAQ,EAARA,QANG;AAOHC,IAAAA,kBAAkB,EAAlBA;AAPG,GAAP;AASH;AAED;AACA;AACA;AACA;AACA;;;IACME,kB;;;;;;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;2BACkBhB,U,EAAY;AACtB,aAAO,IAAIgB,kBAAJ,CAAuBjB,OAAO,CAACC,UAAD,CAA9B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;AACI,8BAAYiB,WAAZ,EAAyB;AAAA;;AACrB,QAAIvB,CAAC,CAACwB,QAAF,CAAWD,WAAX,CAAJ,EAA6BA,WAAW,GAAGlB,OAAO,CAACkB,WAAD,CAArB;AADR,6BAEfrB,cAAc,CAACO,wBAFA,EAE0Bc,WAF1B;AAGxB;AAED;AACJ;AACA;AACA;;;;;qCACqB;AACb,WAAKE,sBAAL;AACA,UAAMP,UAAU,GAAG,KAAKA,UAAL,CAAgBQ,GAAhB,CAAoB,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,MAAJ,EAAJ;AAAA,OAAvB,CAAnB;AACA,UAAMR,kBAAkB,GAAG,KAAKA,kBAAL,CAAwBM,GAAxB,CAA4B,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,MAAJ,EAAJ;AAAA,OAA/B,CAA3B;AAEA,aACIzB,WAAW,CAACM,wBAAZ,GACAZ,GAAG,CAAC+B,MAAJ,CAAW,CACP7B,KAAK,CAAC8B,OAAN,CAAc,KAAKf,KAAnB,CADO,EAEPf,KAAK,CAAC8B,OAAN,CAAc,KAAKd,QAAnB,CAFO,EAGPhB,KAAK,CAAC8B,OAAN,CAAc,KAAKb,GAAnB,CAHO,EAIP,KAAKC,IAAL,CAAUa,WAAV,EAJO,EAKPZ,UALO,EAMP,KAAKC,QAAL,CAAcW,WAAd,EANO,EAOPV,kBAPO,CAAX,EAQGR,KARH,CAQS,CART,CAFJ;AAYH;AAED;AACJ;AACA;AACA;;;;uDACuC;AAC/B,WAAKa,sBAAL;AAEA,aAAO5B,GAAG,CAAC+B,MAAJ,CAAW,CACdzB,WAAW,CAACM,wBADE,EAEdV,KAAK,CAAC8B,OAAN,CAAc,KAAKf,KAAnB,CAFc,EAGdf,KAAK,CAAC8B,OAAN,CAAc,KAAKd,QAAnB,CAHc,EAIdhB,KAAK,CAAC8B,OAAN,CAAc,KAAKb,GAAnB,CAJc,EAKd,KAAKC,IAAL,CAAUa,WAAV,EALc,CAAX,CAAP;AAOH;;;;EA5D4B7B,+B;;AA+DjC8B,MAAM,CAACC,OAAP,GAAiBV,kBAAjB","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedCancel))\n        throw new Error(`Cannot decode to FeeDelegatedCancel. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedCancel}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated cancel transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedcancel to see more detail.\n * @class\n */\nclass FeeDelegatedCancel extends AbstractFeeDelegatedTransaction {\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedCancel transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated cancel transaction.\n     * @return {FeeDelegatedCancel}\n     */\n    static decode(rlpEncoded) {\n        return new FeeDelegatedCancel(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a fee delegated cancel transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedCancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedCancel, createTxObj)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedCancel +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedCancel,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n        ])\n    }\n}\n\nmodule.exports = FeeDelegatedCancel\n"]},"metadata":{},"sourceType":"script"}