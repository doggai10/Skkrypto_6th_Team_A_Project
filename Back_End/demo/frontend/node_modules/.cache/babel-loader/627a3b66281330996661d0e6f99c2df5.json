{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar WeightedPublicKey = require('./weightedPublicKey');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./accountKeyHelper'),\n    ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG,\n    fillWeightedMultiSigOptionsForMultiSig = _require.fillWeightedMultiSigOptionsForMultiSig;\n/**\n * Representing an AccountKeyWeightedMultiSig.\n * @class\n */\n\n\nvar AccountKeyWeightedMultiSig = /*#__PURE__*/function () {\n  \"use strict\";\n\n  _createClass(AccountKeyWeightedMultiSig, null, [{\n    key: \"decode\",\n\n    /**\n     * Decodes an RLP-encoded AccountKeyWeightedMultiSig string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyWeightedMultiSig string.\n     * @return {AccountKeyWeightedMultiSig}\n     */\n    value: function decode(rlpEncodedKey) {\n      rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n      if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) throw new Error(\"Cannot decode to AccountKeyWeightedMultiSig. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG, \": \").concat(rlpEncodedKey));\n\n      var _RLP$decode = RLP.decode(\"0x\".concat(rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length))),\n          _RLP$decode2 = _slicedToArray(_RLP$decode, 2),\n          threshold = _RLP$decode2[0],\n          multiSigkeys = _RLP$decode2[1];\n\n      var weightedPublicKeys = multiSigkeys.map(function (weightedPublicKey) {\n        return new WeightedPublicKey(weightedPublicKey[0], weightedPublicKey[1]);\n      });\n      return new AccountKeyWeightedMultiSig(threshold, weightedPublicKeys);\n    }\n    /**\n     * Creates an instance of AccountKeyWeighedMultiSig.\n     * @param {Array.<string>} publicKeyArray - An array of public key strings.\n     * @param {WeightedMultiSigOptions|object} options - An options which defines threshold and weight.\n     * @return {AccountKeyWeightedMultiSig}\n     */\n\n  }, {\n    key: \"fromPublicKeysAndOptions\",\n    value: function fromPublicKeysAndOptions(publicKeyArray, options) {\n      options = fillWeightedMultiSigOptionsForMultiSig(publicKeyArray.length, options);\n\n      if (publicKeyArray.length !== options.weights.length) {\n        throw new Error(\"The length of public keys is not equal to the length of weight array.\");\n      }\n\n      var weightedPublicKeys = [];\n\n      for (var i = 0; i < publicKeyArray.length; i++) {\n        var weightedPublicKey = new WeightedPublicKey(options.weights[i], publicKeyArray[i]);\n        weightedPublicKeys.push(weightedPublicKey);\n      }\n\n      return new AccountKeyWeightedMultiSig(options.threshold, weightedPublicKeys);\n    }\n    /**\n     * Create an instance of AccountKeyWeightedMultiSig.\n     * @param {number} threshold - The threshold of accountKey.\n     * @param {Array.<WeightedPublicKey>} weightedPublicKeys - An array of instances of WeightedPublicKeys\n     */\n\n  }]);\n\n  function AccountKeyWeightedMultiSig(threshold, weightedPublicKeys) {\n    _classCallCheck(this, AccountKeyWeightedMultiSig);\n\n    this.threshold = threshold;\n    this.weightedPublicKeys = weightedPublicKeys || [];\n  }\n  /**\n   * @type {Number}\n   */\n\n\n  _createClass(AccountKeyWeightedMultiSig, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns an RLP-encoded AccountKeyWeightedMultiSig string.\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      if (this.threshold === undefined) throw new Error('threshold should be specified for a multisig account');\n      if (this.weightedPublicKeys.length === 0) throw new Error('weightedPublicKeys should be specified for a multisig account');\n      var encodedMultisigPublicKeys = [];\n\n      var _iterator = _createForOfIteratorHelper(this.weightedPublicKeys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var weightedPublicKey = _step.value;\n          if (weightedPublicKey.weight === undefined) throw new Error('weight should be specified for a multisig account');\n          if (weightedPublicKey.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account');\n          var compressedPublicKey = utils.compressPublicKey(weightedPublicKey.publicKey);\n          encodedMultisigPublicKeys.push([Bytes.fromNat(utils.numberToHex(weightedPublicKey.weight)), compressedPublicKey]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG + RLP.encode([Bytes.fromNat(utils.numberToHex(this.threshold)), encodedMultisigPublicKeys]).slice(2);\n    }\n  }, {\n    key: \"threshold\",\n    get: function get() {\n      return this._threshold;\n    },\n    set: function set(t) {\n      this._threshold = utils.hexToNumber(t);\n    }\n    /**\n     * @type {Array.<WeightedPublicKey>}\n     */\n\n  }, {\n    key: \"weightedPublicKeys\",\n    get: function get() {\n      return this._weightedPublicKeys;\n    },\n    set: function set(wps) {\n      var _iterator2 = _createForOfIteratorHelper(wps),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var wp = _step2.value;\n          if (!(wp instanceof WeightedPublicKey)) throw new Error(\"Invalid type of weighted public keys.\");\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._weightedPublicKeys = wps;\n    }\n  }]);\n\n  return AccountKeyWeightedMultiSig;\n}();\n\nmodule.exports = AccountKeyWeightedMultiSig;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyWeightedMultiSig.js"],"names":["RLP","require","Bytes","WeightedPublicKey","utils","ACCOUNT_KEY_TAG","fillWeightedMultiSigOptionsForMultiSig","AccountKeyWeightedMultiSig","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","Error","decode","slice","length","threshold","multiSigkeys","weightedPublicKeys","map","weightedPublicKey","publicKeyArray","options","weights","i","push","undefined","encodedMultisigPublicKeys","weight","publicKey","compressedPublicKey","compressPublicKey","fromNat","numberToHex","encode","_threshold","t","hexToNumber","_weightedPublicKeys","wps","wp","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst WeightedPublicKey = require('./weightedPublicKey')\nconst utils = require('../../../caver-utils')\nconst { ACCOUNT_KEY_TAG, fillWeightedMultiSigOptionsForMultiSig } = require('./accountKeyHelper')\n\n/**\n * Representing an AccountKeyWeightedMultiSig.\n * @class\n */\nclass AccountKeyWeightedMultiSig {\n    /**\n     * Decodes an RLP-encoded AccountKeyWeightedMultiSig string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyWeightedMultiSig string.\n     * @return {AccountKeyWeightedMultiSig}\n     */\n    static decode(rlpEncodedKey) {\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG))\n            throw new Error(\n                `Cannot decode to AccountKeyWeightedMultiSig. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG}: ${rlpEncodedKey}`\n            )\n\n        const [threshold, multiSigkeys] = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`)\n        const weightedPublicKeys = multiSigkeys.map(weightedPublicKey => {\n            return new WeightedPublicKey(weightedPublicKey[0], weightedPublicKey[1])\n        })\n        return new AccountKeyWeightedMultiSig(threshold, weightedPublicKeys)\n    }\n\n    /**\n     * Creates an instance of AccountKeyWeighedMultiSig.\n     * @param {Array.<string>} publicKeyArray - An array of public key strings.\n     * @param {WeightedMultiSigOptions|object} options - An options which defines threshold and weight.\n     * @return {AccountKeyWeightedMultiSig}\n     */\n    static fromPublicKeysAndOptions(publicKeyArray, options) {\n        options = fillWeightedMultiSigOptionsForMultiSig(publicKeyArray.length, options)\n        if (publicKeyArray.length !== options.weights.length) {\n            throw new Error(`The length of public keys is not equal to the length of weight array.`)\n        }\n\n        const weightedPublicKeys = []\n\n        for (let i = 0; i < publicKeyArray.length; i++) {\n            const weightedPublicKey = new WeightedPublicKey(options.weights[i], publicKeyArray[i])\n            weightedPublicKeys.push(weightedPublicKey)\n        }\n\n        return new AccountKeyWeightedMultiSig(options.threshold, weightedPublicKeys)\n    }\n\n    /**\n     * Create an instance of AccountKeyWeightedMultiSig.\n     * @param {number} threshold - The threshold of accountKey.\n     * @param {Array.<WeightedPublicKey>} weightedPublicKeys - An array of instances of WeightedPublicKeys\n     */\n    constructor(threshold, weightedPublicKeys) {\n        this.threshold = threshold\n\n        this.weightedPublicKeys = weightedPublicKeys || []\n    }\n\n    /**\n     * @type {Number}\n     */\n    get threshold() {\n        return this._threshold\n    }\n\n    set threshold(t) {\n        this._threshold = utils.hexToNumber(t)\n    }\n\n    /**\n     * @type {Array.<WeightedPublicKey>}\n     */\n    get weightedPublicKeys() {\n        return this._weightedPublicKeys\n    }\n\n    set weightedPublicKeys(wps) {\n        for (const wp of wps) {\n            if (!(wp instanceof WeightedPublicKey)) throw new Error(`Invalid type of weighted public keys.`)\n        }\n        this._weightedPublicKeys = wps\n    }\n\n    /**\n     * Returns an RLP-encoded AccountKeyWeightedMultiSig string.\n     * @return {string}\n     */\n    getRLPEncoding() {\n        if (this.threshold === undefined) throw new Error('threshold should be specified for a multisig account')\n        if (this.weightedPublicKeys.length === 0) throw new Error('weightedPublicKeys should be specified for a multisig account')\n\n        const encodedMultisigPublicKeys = []\n        for (const weightedPublicKey of this.weightedPublicKeys) {\n            if (weightedPublicKey.weight === undefined) throw new Error('weight should be specified for a multisig account')\n            if (weightedPublicKey.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account')\n\n            const compressedPublicKey = utils.compressPublicKey(weightedPublicKey.publicKey)\n\n            encodedMultisigPublicKeys.push([Bytes.fromNat(utils.numberToHex(weightedPublicKey.weight)), compressedPublicKey])\n        }\n\n        return (\n            ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG +\n            RLP.encode([Bytes.fromNat(utils.numberToHex(this.threshold)), encodedMultisigPublicKeys]).slice(2)\n        )\n    }\n}\n\nmodule.exports = AccountKeyWeightedMultiSig\n"]},"metadata":{},"sourceType":"script"}