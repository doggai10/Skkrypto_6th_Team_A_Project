{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar utils = require('../../../caver-utils');\n/**\n * Representing a WeightedPublicKey.\n * @class\n */\n\n\nvar WeightedPublicKey =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  /**\n   * Create an instance of WeightedPublicKey.\n   * @param {number} weight - The weight of the key.\n   * @param {string} publicKey - The public key string.\n   */\n  function WeightedPublicKey(weight, publicKey) {\n    _classCallCheck(this, WeightedPublicKey);\n\n    this.weight = weight;\n    this.publicKey = publicKey;\n  }\n  /**\n   * @type {number}\n   */\n\n\n  _createClass(WeightedPublicKey, [{\n    key: \"encodeToBytes\",\n\n    /**\n     * Returns an encoded weighted public key string.\n     * @return {string}\n     */\n    value: function encodeToBytes() {\n      if (this.weight === undefined) throw new Error('weight should be specified for a multisig account');\n      if (this.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account');\n      var compressedPublicKey = utils.compressPublicKey(this.publicKey);\n      return [Bytes.fromNat(utils.numberToHex(this.weight)), compressedPublicKey];\n    }\n  }, {\n    key: \"weight\",\n    get: function get() {\n      return this._weight;\n    },\n    set: function set(w) {\n      this._weight = utils.hexToNumber(w);\n    }\n    /**\n     * @type {string}\n     */\n\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._publicKey;\n    },\n    set: function set(p) {\n      if (!utils.isValidPublicKey(p)) throw new Error(\"Invalid public key: \".concat(p));\n      this._publicKey = utils.addHexPrefix(p);\n    }\n  }]);\n\n  return WeightedPublicKey;\n}();\n\nmodule.exports = WeightedPublicKey;","map":null,"metadata":{},"sourceType":"script"}