{"ast":null,"code":"var _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar AccountLib = require('eth-lib/lib/account');\n\nvar Nat = require('eth-lib/lib/nat');\n\nvar elliptic = require('elliptic');\n\nvar secp256k1 = new elliptic.ec('secp256k1');\n\nvar utils = require('../../../caver-utils');\n\nvar SignatureData = require('./signatureData');\n/**\n * Representing a PrivateKey class that includes private key string.\n * @class\n */\n\n\nvar PrivateKey = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * creates a privateKey.\n   * @param {string} key - The private key string.\n   */\n  function PrivateKey(key) {\n    _classCallCheck(this, PrivateKey);\n\n    this.privateKey = key;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(PrivateKey, [{\n    key: \"sign\",\n\n    /**\n     * signs with transactionHash with key and returns signature.\n     *\n     * @param {string} transactionHash The hash of transaction.\n     * @param {string|number} chainId The chainId or the network.\n     * @return {SignatureData}\n     */\n    value: function sign(transactionHash, chainId) {\n      chainId = utils.toHex(chainId);\n      var signature = AccountLib.makeSigner(Nat.toNumber(chainId) * 2 + 35)(transactionHash, this.privateKey);\n\n      var _AccountLib$decodeSig = AccountLib.decodeSignature(signature).map(function (sig) {\n        return utils.makeEven(utils.trimLeadingZero(sig));\n      }),\n          _AccountLib$decodeSig2 = _slicedToArray(_AccountLib$decodeSig, 3),\n          v = _AccountLib$decodeSig2[0],\n          r = _AccountLib$decodeSig2[1],\n          s = _AccountLib$decodeSig2[2];\n\n      return new SignatureData([v, r, s]);\n    }\n    /**\n     * signs with hashed data and returns `signature`\n     *\n     * @param {string} messageHash The hash of data to sign.\n     * @return {SignatureData}\n     */\n\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(messageHash) {\n      var signature = AccountLib.sign(messageHash, this.privateKey);\n\n      var _AccountLib$decodeSig3 = AccountLib.decodeSignature(signature),\n          _AccountLib$decodeSig4 = _slicedToArray(_AccountLib$decodeSig3, 3),\n          v = _AccountLib$decodeSig4[0],\n          r = _AccountLib$decodeSig4[1],\n          s = _AccountLib$decodeSig4[2];\n\n      return new SignatureData([v, r, s]);\n    }\n    /**\n     * returns public key string\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function getPublicKey() {\n      var compressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var strippedPrivateKey = utils.stripHexPrefix(this.privateKey);\n      var ecKey = secp256k1.keyFromPrivate(Buffer.from(strippedPrivateKey, 'hex'));\n      if (!compressed) return \"0x\".concat(ecKey.getPublic(false, 'hex').slice(2));\n      return \"0x\".concat(ecKey.getPublic(true, 'hex'));\n    }\n    /**\n     * returns derived address from private key string\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: \"getDerivedAddress\",\n    value: function getDerivedAddress() {\n      return AccountLib.fromPrivate(this.privateKey).address.toLowerCase();\n    }\n  }, {\n    key: \"privateKey\",\n    get: function get() {\n      return this._privateKey;\n    },\n    set: function set(p) {\n      if (!utils.isValidPrivateKey(p)) throw new Error(\"Invalid private key: \".concat(p));\n      this._privateKey = utils.addHexPrefix(p);\n    }\n  }]);\n\n  return PrivateKey;\n}();\n\nmodule.exports = PrivateKey;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-wallet/src/keyring/privateKey.js"],"names":["AccountLib","require","Nat","elliptic","secp256k1","ec","utils","SignatureData","PrivateKey","key","privateKey","transactionHash","chainId","toHex","signature","makeSigner","toNumber","decodeSignature","map","sig","makeEven","trimLeadingZero","v","r","s","messageHash","sign","compressed","strippedPrivateKey","stripHexPrefix","ecKey","keyFromPrivate","Buffer","from","getPublic","slice","fromPrivate","address","toLowerCase","_privateKey","p","isValidPrivateKey","Error","addHexPrefix","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst AccountLib = require('eth-lib/lib/account')\nconst Nat = require('eth-lib/lib/nat')\n\nconst elliptic = require('elliptic')\n\nconst secp256k1 = new elliptic.ec('secp256k1')\n\nconst utils = require('../../../caver-utils')\nconst SignatureData = require('./signatureData')\n\n/**\n * Representing a PrivateKey class that includes private key string.\n * @class\n */\nclass PrivateKey {\n    /**\n     * creates a privateKey.\n     * @param {string} key - The private key string.\n     */\n    constructor(key) {\n        this.privateKey = key\n    }\n\n    /**\n     * @type {string}\n     */\n    get privateKey() {\n        return this._privateKey\n    }\n\n    set privateKey(p) {\n        if (!utils.isValidPrivateKey(p)) throw new Error(`Invalid private key: ${p}`)\n        this._privateKey = utils.addHexPrefix(p)\n    }\n\n    /**\n     * signs with transactionHash with key and returns signature.\n     *\n     * @param {string} transactionHash The hash of transaction.\n     * @param {string|number} chainId The chainId or the network.\n     * @return {SignatureData}\n     */\n    sign(transactionHash, chainId) {\n        chainId = utils.toHex(chainId)\n        const signature = AccountLib.makeSigner(Nat.toNumber(chainId) * 2 + 35)(transactionHash, this.privateKey)\n        const [v, r, s] = AccountLib.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig)))\n        return new SignatureData([v, r, s])\n    }\n\n    /**\n     * signs with hashed data and returns `signature`\n     *\n     * @param {string} messageHash The hash of data to sign.\n     * @return {SignatureData}\n     */\n    signMessage(messageHash) {\n        const signature = AccountLib.sign(messageHash, this.privateKey)\n        const [v, r, s] = AccountLib.decodeSignature(signature)\n        return new SignatureData([v, r, s])\n    }\n\n    /**\n     * returns public key string\n     *\n     * @return {string}\n     */\n    getPublicKey(compressed = false) {\n        const strippedPrivateKey = utils.stripHexPrefix(this.privateKey)\n\n        const ecKey = secp256k1.keyFromPrivate(Buffer.from(strippedPrivateKey, 'hex'))\n\n        if (!compressed) return `0x${ecKey.getPublic(false, 'hex').slice(2)}`\n        return `0x${ecKey.getPublic(true, 'hex')}`\n    }\n\n    /**\n     * returns derived address from private key string\n     *\n     * @return {string}\n     */\n    getDerivedAddress() {\n        return AccountLib.fromPrivate(this.privateKey).address.toLowerCase()\n    }\n}\n\nmodule.exports = PrivateKey\n"]},"metadata":{},"sourceType":"script"}