{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar _ = require('lodash');\n\nvar AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar utils = require('../../../../caver-utils/src');\n\nvar Account = require('../../../../caver-account');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate)) throw new Error(\"Cannot decode to FeeDelegatedAccountUpdate. The prefix must be \".concat(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 8),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      from = _RLP$decode2[3],\n      rlpEncodedKey = _RLP$decode2[4],\n      signatures = _RLP$decode2[5],\n      feePayer = _RLP$decode2[6],\n      feePayerSignatures = _RLP$decode2[7];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from: from,\n    rlpEncodedKey: rlpEncodedKey,\n    signatures: signatures,\n    feePayer: feePayer,\n    feePayerSignatures: feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated account update transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedaccountupdate to see more detail.\n * @class\n */\n\n\nvar FeeDelegatedAccountUpdate = /*#__PURE__*/function (_AbstractFeeDelegated) {\n  \"use strict\";\n\n  _inherits(FeeDelegatedAccountUpdate, _AbstractFeeDelegated);\n\n  var _super = _createSuper(FeeDelegatedAccountUpdate);\n\n  _createClass(FeeDelegatedAccountUpdate, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdate transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated account update transaction.\n     * @return {FeeDelegatedAccountUpdate}\n     */\n    value: function decode(rlpEncoded) {\n      var decoded = _decode(rlpEncoded);\n\n      decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey);\n      return new FeeDelegatedAccountUpdate(decoded);\n    }\n    /**\n     * Creates a fee delegated account update transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n\n  }]);\n\n  function FeeDelegatedAccountUpdate(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, FeeDelegatedAccountUpdate);\n\n    if (_.isString(createTxObj)) {\n      createTxObj = _decode(createTxObj);\n      createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey);\n    }\n\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate, createTxObj);\n    _this.account = createTxObj.account;\n    return _this;\n  }\n  /**\n   * @type {Account}\n   */\n\n\n  _createClass(FeeDelegatedAccountUpdate, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      var feePayerSignatures = this.feePayerSignatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey(), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey()]);\n    }\n  }, {\n    key: \"account\",\n    get: function get() {\n      return this._account;\n    },\n    set: function set(acct) {\n      if (!(acct instanceof Account)) throw new Error(\"Invalid account. 'account' should be instance of 'Account'.\");\n      if (this.from.toLowerCase() !== acct.address.toLowerCase()) throw new Error(\"Transaction from address(\".concat(this.from.toLowerCase(), \") and account address(\").concat(acct.address, \") do not match.\"));\n      this._account = acct;\n    }\n  }]);\n\n  return FeeDelegatedAccountUpdate;\n}(AbstractFeeDelegatedTransaction);\n\nmodule.exports = FeeDelegatedAccountUpdate;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/accountUpdate/feeDelegatedAccountUpdate.js"],"names":["RLP","require","Bytes","_","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","Account","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedAccountUpdate","Error","typeDettached","slice","decode","nonce","gasPrice","gas","from","rlpEncodedKey","signatures","feePayer","feePayerSignatures","trimLeadingZero","FeeDelegatedAccountUpdate","decoded","account","createFromRLPEncoding","createTxObj","isString","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","getRLPEncodingAccountKey","_account","acct","address","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\nconst Account = require('../../../../caver-account')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate))\n        throw new Error(\n            `Cannot decode to FeeDelegatedAccountUpdate. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, rlpEncodedKey, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        rlpEncodedKey,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated account update transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedaccountupdate to see more detail.\n * @class\n */\nclass FeeDelegatedAccountUpdate extends AbstractFeeDelegatedTransaction {\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdate transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated account update transaction.\n     * @return {FeeDelegatedAccountUpdate}\n     */\n    static decode(rlpEncoded) {\n        const decoded = _decode(rlpEncoded)\n        decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey)\n        return new FeeDelegatedAccountUpdate(decoded)\n    }\n\n    /**\n     * Creates a fee delegated account update transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) {\n            createTxObj = _decode(createTxObj)\n            createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey)\n        }\n\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate, createTxObj)\n        this.account = createTxObj.account\n    }\n\n    /**\n     * @type {Account}\n     */\n    get account() {\n        return this._account\n    }\n\n    set account(acct) {\n        if (!(acct instanceof Account)) throw new Error(`Invalid account. 'account' should be instance of 'Account'.`)\n        if (this.from.toLowerCase() !== acct.address.toLowerCase())\n            throw new Error(`Transaction from address(${this.from.toLowerCase()}) and account address(${acct.address}) do not match.`)\n\n        this._account = acct\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.account.getRLPEncodingAccountKey(),\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.account.getRLPEncodingAccountKey(),\n        ])\n    }\n}\n\nmodule.exports = FeeDelegatedAccountUpdate\n"]},"metadata":{},"sourceType":"script"}