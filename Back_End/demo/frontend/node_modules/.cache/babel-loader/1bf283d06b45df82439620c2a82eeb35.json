{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractTransaction = require('../abstractTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeCancel)) throw new Error(\"Cannot decode to Cancel. The prefix must be \".concat(TX_TYPE_TAG.TxTypeCancel, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 5),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      from = _RLP$decode2[3],\n      signatures = _RLP$decode2[4];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from: from,\n    signatures: signatures\n  };\n}\n/**\n * Represents a cancel transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypecancel to see more detail.\n * @class\n */\n\n\nvar Cancel = /*#__PURE__*/function (_AbstractTransaction) {\n  \"use strict\";\n\n  _inherits(Cancel, _AbstractTransaction);\n\n  var _super = _createSuper(Cancel);\n\n  _createClass(Cancel, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns a Cancel transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded cancel transaction.\n     * @return {Cancel}\n     */\n    value: function decode(rlpEncoded) {\n      return new Cancel(_decode(rlpEncoded));\n    }\n    /**\n     * Creates a cancel transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a Cancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     */\n\n  }]);\n\n  function Cancel(createTxObj) {\n    _classCallCheck(this, Cancel);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    return _super.call(this, TX_TYPE_STRING.TxTypeCancel, createTxObj);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  _createClass(Cancel, [{\n    key: \"getRLPEncoding\",\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeCancel + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), signatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeCancel, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase()]);\n    }\n  }]);\n\n  return Cancel;\n}(AbstractTransaction);\n\nmodule.exports = Cancel;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/cancel/cancel.js"],"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeCancel","Error","typeDettached","slice","decode","nonce","gasPrice","gas","from","signatures","trimLeadingZero","Cancel","createTxObj","isString","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeCancel))\n        throw new Error(`Cannot decode to Cancel. The prefix must be ${TX_TYPE_TAG.TxTypeCancel}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, signatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        signatures,\n    }\n}\n\n/**\n * Represents a cancel transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypecancel to see more detail.\n * @class\n */\nclass Cancel extends AbstractTransaction {\n    /**\n     * decodes the RLP-encoded string and returns a Cancel transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded cancel transaction.\n     * @return {Cancel}\n     */\n    static decode(rlpEncoded) {\n        return new Cancel(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a cancel transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a Cancel transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeCancel, createTxObj)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeCancel +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                signatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeCancel,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n        ])\n    }\n}\n\nmodule.exports = Cancel\n"]},"metadata":{},"sourceType":"script"}