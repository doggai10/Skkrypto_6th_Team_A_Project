{"ast":null,"code":"var _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar utils = require('../../../../caver-utils');\n\nvar helpers = require('../../../../caver-core-helpers');\n\nvar _helpers$constants = helpers.constants,\n    VALUE_TRANFSER_TYPE_TAG = _helpers$constants.VALUE_TRANFSER_TYPE_TAG,\n    VALUE_TRANSFER_MEMO_TYPE_TAG = _helpers$constants.VALUE_TRANSFER_MEMO_TYPE_TAG,\n    FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG = _helpers$constants.FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG,\n    FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG,\n    FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG,\n    FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG;\n\nfunction rlpEncodeForValueTransfer(transaction) {\n  return RLP.encode([RLP.encode([VALUE_TRANFSER_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase()]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n} // TODO:\n\n\nfunction rlpEncodeForValueTransferMemo(transaction) {\n  return RLP.encode([RLP.encode([VALUE_TRANSFER_MEMO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransfer(transaction) {\n  if (transaction.senderRawTransaction) {\n    // fee payer rlp encoding.\n    var typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    var _utils$rlpDecode = utils.rlpDecode(typeDetacehdRawTransaction),\n        _utils$rlpDecode2 = _slicedToArray(_utils$rlpDecode, 7),\n        nonce = _utils$rlpDecode2[0],\n        gasPrice = _utils$rlpDecode2[1],\n        gas = _utils$rlpDecode2[2],\n        to = _utils$rlpDecode2[3],\n        value = _utils$rlpDecode2[4],\n        from = _utils$rlpDecode2[5],\n        _utils$rlpDecode2$ = _slicedToArray(_utils$rlpDecode2[6], 1),\n        _utils$rlpDecode2$$ = _slicedToArray(_utils$rlpDecode2$[0], 3),\n        v = _utils$rlpDecode2$$[0],\n        r = _utils$rlpDecode2$$[1],\n        s = _utils$rlpDecode2$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase()]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase()]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction) {\n  if (transaction.senderRawTransaction) {\n    // fee payer rlp encoding.\n    var typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    var _utils$rlpDecode3 = utils.rlpDecode(typeDetacehdRawTransaction),\n        _utils$rlpDecode4 = _slicedToArray(_utils$rlpDecode3, 8),\n        nonce = _utils$rlpDecode4[0],\n        gasPrice = _utils$rlpDecode4[1],\n        gas = _utils$rlpDecode4[2],\n        to = _utils$rlpDecode4[3],\n        value = _utils$rlpDecode4[4],\n        from = _utils$rlpDecode4[5],\n        feeRatio = _utils$rlpDecode4[6],\n        _utils$rlpDecode4$ = _slicedToArray(_utils$rlpDecode4[7], 1),\n        _utils$rlpDecode4$$ = _slicedToArray(_utils$rlpDecode4$[0], 3),\n        v = _utils$rlpDecode4$$[0],\n        r = _utils$rlpDecode4$$[1],\n        s = _utils$rlpDecode4$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), feeRatio]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferMemo(transaction) {\n  if (transaction.senderRawTransaction) {\n    // fee payer rlp encoding.\n    var typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    var _utils$rlpDecode5 = utils.rlpDecode(typeDetacehdRawTransaction),\n        _utils$rlpDecode6 = _slicedToArray(_utils$rlpDecode5, 8),\n        nonce = _utils$rlpDecode6[0],\n        gasPrice = _utils$rlpDecode6[1],\n        gas = _utils$rlpDecode6[2],\n        to = _utils$rlpDecode6[3],\n        value = _utils$rlpDecode6[4],\n        from = _utils$rlpDecode6[5],\n        data = _utils$rlpDecode6[6],\n        _utils$rlpDecode6$ = _slicedToArray(_utils$rlpDecode6[7], 1),\n        _utils$rlpDecode6$$ = _slicedToArray(_utils$rlpDecode6$[0], 3),\n        v = _utils$rlpDecode6$$[0],\n        r = _utils$rlpDecode6$$[1],\n        s = _utils$rlpDecode6$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), data]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction) {\n  if (transaction.senderRawTransaction) {\n    // fee payer rlp encoding.\n    var typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    var _utils$rlpDecode7 = utils.rlpDecode(typeDetacehdRawTransaction),\n        _utils$rlpDecode8 = _slicedToArray(_utils$rlpDecode7, 9),\n        nonce = _utils$rlpDecode8[0],\n        gasPrice = _utils$rlpDecode8[1],\n        gas = _utils$rlpDecode8[2],\n        to = _utils$rlpDecode8[3],\n        value = _utils$rlpDecode8[4],\n        from = _utils$rlpDecode8[5],\n        data = _utils$rlpDecode8[6],\n        feeRatio = _utils$rlpDecode8[7],\n        _utils$rlpDecode8$ = _slicedToArray(_utils$rlpDecode8[8], 1),\n        _utils$rlpDecode8$$ = _slicedToArray(_utils$rlpDecode8$[0], 3),\n        v = _utils$rlpDecode8$$[0],\n        r = _utils$rlpDecode8$$[1],\n        s = _utils$rlpDecode8$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), data, Bytes.fromNat(feeRatio)]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data, Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nmodule.exports = {\n  rlpEncodeForValueTransfer: rlpEncodeForValueTransfer,\n  rlpEncodeForValueTransferMemo: rlpEncodeForValueTransferMemo,\n  rlpEncodeForFeeDelegatedValueTransfer: rlpEncodeForFeeDelegatedValueTransfer,\n  rlpEncodeForFeeDelegatedValueTransferWithRatio: rlpEncodeForFeeDelegatedValueTransferWithRatio,\n  rlpEncodeForFeeDelegatedValueTransferMemo: rlpEncodeForFeeDelegatedValueTransferMemo,\n  rlpEncodeForFeeDelegatedValueTransferMemoWithRatio: rlpEncodeForFeeDelegatedValueTransferMemoWithRatio\n};","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/transactionType/valueTransfer.js"],"names":["RLP","require","Bytes","utils","helpers","constants","VALUE_TRANFSER_TYPE_TAG","VALUE_TRANSFER_MEMO_TYPE_TAG","FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG","FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG","FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG","FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG","rlpEncodeForValueTransfer","transaction","encode","fromNat","nonce","gasPrice","gas","to","toLowerCase","value","from","chainId","rlpEncodeForValueTransferMemo","data","rlpEncodeForFeeDelegatedValueTransfer","senderRawTransaction","typeDetacehdRawTransaction","slice","rlpDecode","v","r","s","feePayer","rlpEncodeForFeeDelegatedValueTransferWithRatio","feeRatio","rlpEncodeForFeeDelegatedValueTransferMemo","rlpEncodeForFeeDelegatedValueTransferMemoWithRatio","module","exports"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAMG,OAAO,GAAGH,OAAO,CAAC,gCAAD,CAAvB;;yBASIG,OAAO,CAACC,S;IANRC,uB,sBAAAA,uB;IACAC,4B,sBAAAA,4B;IACAC,qC,sBAAAA,qC;IACAC,0C,sBAAAA,0C;IACAC,qD,sBAAAA,qD;IACAC,gD,sBAAAA,gD;;AAGJ,SAASC,yBAAT,CAAmCC,WAAnC,EAAgD;AAC5C,SAAOb,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPR,uBADO,EAEPJ,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACG,KAA1B,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACI,QAA1B,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACK,GAA1B,CAJO,EAKPL,WAAW,CAACM,EAAZ,CAAeC,WAAf,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACQ,KAA1B,CANO,EAOPR,WAAW,CAACS,IAAZ,CAAiBF,WAAjB,EAPO,CAAX,CADc,EAUdlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAVc,EAWd,IAXc,EAYd,IAZc,CAAX,CAAP;AAcH,C,CAED;;;AACA,SAASC,6BAAT,CAAuCX,WAAvC,EAAoD;AAChD,SAAOb,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPP,4BADO,EAEPL,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACG,KAA1B,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACI,QAA1B,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACK,GAA1B,CAJO,EAKPL,WAAW,CAACM,EAAZ,CAAeC,WAAf,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACQ,KAA1B,CANO,EAOPR,WAAW,CAACS,IAAZ,CAAiBF,WAAjB,EAPO,EAQPP,WAAW,CAACY,IARL,CAAX,CADc,EAWdvB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAXc,EAYd,IAZc,EAad,IAbc,CAAX,CAAP;AAeH;;AAED,SAASG,qCAAT,CAA+Cb,WAA/C,EAA4D;AACxD,MAAIA,WAAW,CAACc,oBAAhB,EAAsC;AAClC;AACA,QAAMC,0BAA0B,eAAQf,WAAW,CAACc,oBAAZ,CAAiCE,KAAjC,CAAuC,CAAvC,CAAR,CAAhC,CAFkC,CAIlC;;AAJkC,2BAK2B1B,KAAK,CAAC2B,SAAN,CAAgBF,0BAAhB,CAL3B;AAAA;AAAA,QAK3BZ,KAL2B;AAAA,QAKpBC,QALoB;AAAA,QAKVC,GALU;AAAA,QAKLC,EALK;AAAA,QAKDE,KALC;AAAA,QAKMC,IALN;AAAA;AAAA;AAAA,QAKcS,CALd;AAAA,QAKiBC,CALjB;AAAA,QAKoBC,CALpB;;AAOlC,WAAOjC,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPN,qCADO,EAEPN,KAAK,CAACa,OAAN,CAAcC,KAAd,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcE,QAAd,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcG,GAAd,CAJO,EAKPC,EAAE,CAACC,WAAH,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcM,KAAd,CANO,EAOPC,IAAI,CAACF,WAAL,EAPO,CAAX,CADc,EAUdP,WAAW,CAACqB,QAAZ,CAAqBd,WAArB,EAVc,EAWdlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAXc,EAYd,IAZc,EAad,IAbc,CAAX,CAAP;AAeH;;AACD,SAAOvB,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPN,qCADO,EAEPN,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACG,KAA1B,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACI,QAA1B,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACK,GAA1B,CAJO,EAKPL,WAAW,CAACM,EAAZ,CAAeC,WAAf,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACQ,KAA1B,CANO,EAOPR,WAAW,CAACS,IAAZ,CAAiBF,WAAjB,EAPO,CAAX,CADc,EAUdlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAVc,EAWd,IAXc,EAYd,IAZc,CAAX,CAAP;AAcH;;AAED,SAASY,8CAAT,CAAwDtB,WAAxD,EAAqE;AACjE,MAAIA,WAAW,CAACc,oBAAhB,EAAsC;AAClC;AACA,QAAMC,0BAA0B,eAAQf,WAAW,CAACc,oBAAZ,CAAiCE,KAAjC,CAAuC,CAAvC,CAAR,CAAhC,CAFkC,CAIlC;;AAJkC,4BAKqC1B,KAAK,CAAC2B,SAAN,CAAgBF,0BAAhB,CALrC;AAAA;AAAA,QAK3BZ,KAL2B;AAAA,QAKpBC,QALoB;AAAA,QAKVC,GALU;AAAA,QAKLC,EALK;AAAA,QAKDE,KALC;AAAA,QAKMC,IALN;AAAA,QAKYc,QALZ;AAAA;AAAA;AAAA,QAKwBL,CALxB;AAAA,QAK2BC,CAL3B;AAAA,QAK8BC,CAL9B;;AAOlC,WAAOjC,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPH,gDADO,EAEPT,KAAK,CAACa,OAAN,CAAcC,KAAd,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcE,QAAd,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcG,GAAd,CAJO,EAKPC,EAAE,CAACC,WAAH,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcM,KAAd,CANO,EAOPC,IAAI,CAACF,WAAL,EAPO,EAQPgB,QARO,CAAX,CADc,EAWdvB,WAAW,CAACqB,QAAZ,CAAqBd,WAArB,EAXc,EAYdlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAZc,EAad,IAbc,EAcd,IAdc,CAAX,CAAP;AAgBH;;AACD,SAAOvB,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPH,gDADO,EAEPT,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACG,KAA1B,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACI,QAA1B,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACK,GAA1B,CAJO,EAKPL,WAAW,CAACM,EAAZ,CAAeC,WAAf,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACQ,KAA1B,CANO,EAOPR,WAAW,CAACS,IAAZ,CAAiBF,WAAjB,EAPO,EAQPlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACuB,QAA1B,CARO,CAAX,CADc,EAWdlC,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAXc,EAYd,IAZc,EAad,IAbc,CAAX,CAAP;AAeH;;AAED,SAASc,yCAAT,CAAmDxB,WAAnD,EAAgE;AAC5D,MAAIA,WAAW,CAACc,oBAAhB,EAAsC;AAClC;AACA,QAAMC,0BAA0B,eAAQf,WAAW,CAACc,oBAAZ,CAAiCE,KAAjC,CAAuC,CAAvC,CAAR,CAAhC,CAFkC,CAIlC;;AAJkC,4BAKiC1B,KAAK,CAAC2B,SAAN,CAAgBF,0BAAhB,CALjC;AAAA;AAAA,QAK3BZ,KAL2B;AAAA,QAKpBC,QALoB;AAAA,QAKVC,GALU;AAAA,QAKLC,EALK;AAAA,QAKDE,KALC;AAAA,QAKMC,IALN;AAAA,QAKYG,IALZ;AAAA;AAAA;AAAA,QAKoBM,CALpB;AAAA,QAKuBC,CALvB;AAAA,QAK0BC,CAL1B;;AAOlC,WAAOjC,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPL,0CADO,EAEPP,KAAK,CAACa,OAAN,CAAcC,KAAd,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcE,QAAd,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcG,GAAd,CAJO,EAKPC,EAAE,CAACC,WAAH,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcM,KAAd,CANO,EAOPC,IAAI,CAACF,WAAL,EAPO,EAQPK,IARO,CAAX,CADc,EAWdZ,WAAW,CAACqB,QAAZ,CAAqBd,WAArB,EAXc,EAYdlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAZc,EAad,IAbc,EAcd,IAdc,CAAX,CAAP;AAgBH;;AACD,SAAOvB,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPL,0CADO,EAEPP,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACG,KAA1B,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACI,QAA1B,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACK,GAA1B,CAJO,EAKPL,WAAW,CAACM,EAAZ,CAAeC,WAAf,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACQ,KAA1B,CANO,EAOPR,WAAW,CAACS,IAAZ,CAAiBF,WAAjB,EAPO,EAQPP,WAAW,CAACY,IARL,CAAX,CADc,EAWdvB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAXc,EAYd,IAZc,EAad,IAbc,CAAX,CAAP;AAeH;;AAED,SAASe,kDAAT,CAA4DzB,WAA5D,EAAyE;AACrE,MAAIA,WAAW,CAACc,oBAAhB,EAAsC;AAClC;AACA,QAAMC,0BAA0B,eAAQf,WAAW,CAACc,oBAAZ,CAAiCE,KAAjC,CAAuC,CAAvC,CAAR,CAAhC,CAFkC,CAIlC;;AAJkC,4BAK2C1B,KAAK,CAAC2B,SAAN,CAAgBF,0BAAhB,CAL3C;AAAA;AAAA,QAK3BZ,KAL2B;AAAA,QAKpBC,QALoB;AAAA,QAKVC,GALU;AAAA,QAKLC,EALK;AAAA,QAKDE,KALC;AAAA,QAKMC,IALN;AAAA,QAKYG,IALZ;AAAA,QAKkBW,QALlB;AAAA;AAAA;AAAA,QAK8BL,CAL9B;AAAA,QAKiCC,CALjC;AAAA,QAKoCC,CALpC;;AAOlC,WAAOjC,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPJ,qDADO,EAEPR,KAAK,CAACa,OAAN,CAAcC,KAAd,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcE,QAAd,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcG,GAAd,CAJO,EAKPC,EAAE,CAACC,WAAH,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcM,KAAd,CANO,EAOPC,IAAI,CAACF,WAAL,EAPO,EAQPK,IARO,EASPvB,KAAK,CAACa,OAAN,CAAcqB,QAAd,CATO,CAAX,CADc,EAYdvB,WAAW,CAACqB,QAAZ,CAAqBd,WAArB,EAZc,EAadlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAbc,EAcd,IAdc,EAed,IAfc,CAAX,CAAP;AAiBH;;AACD,SAAOvB,GAAG,CAACc,MAAJ,CAAW,CACdd,GAAG,CAACc,MAAJ,CAAW,CACPJ,qDADO,EAEPR,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACG,KAA1B,CAFO,EAGPd,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACI,QAA1B,CAHO,EAIPf,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACK,GAA1B,CAJO,EAKPL,WAAW,CAACM,EAAZ,CAAeC,WAAf,EALO,EAMPlB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACQ,KAA1B,CANO,EAOPR,WAAW,CAACS,IAAZ,CAAiBF,WAAjB,EAPO,EAQPP,WAAW,CAACY,IARL,EASPvB,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACuB,QAA1B,CATO,CAAX,CADc,EAYdlC,KAAK,CAACa,OAAN,CAAcF,WAAW,CAACU,OAAZ,IAAuB,KAArC,CAZc,EAad,IAbc,EAcd,IAdc,CAAX,CAAP;AAgBH;;AAEDgB,MAAM,CAACC,OAAP,GAAiB;AACb5B,EAAAA,yBAAyB,EAAzBA,yBADa;AAEbY,EAAAA,6BAA6B,EAA7BA,6BAFa;AAGbE,EAAAA,qCAAqC,EAArCA,qCAHa;AAIbS,EAAAA,8CAA8C,EAA9CA,8CAJa;AAKbE,EAAAA,yCAAyC,EAAzCA,yCALa;AAMbC,EAAAA,kDAAkD,EAAlDA;AANa,CAAjB","sourcesContent":["/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst utils = require('../../../../caver-utils')\nconst helpers = require('../../../../caver-core-helpers')\n\nconst {\n    VALUE_TRANFSER_TYPE_TAG,\n    VALUE_TRANSFER_MEMO_TYPE_TAG,\n    FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG,\n    FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG,\n    FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG,\n    FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG,\n} = helpers.constants\n\nfunction rlpEncodeForValueTransfer(transaction) {\n    return RLP.encode([\n        RLP.encode([\n            VALUE_TRANFSER_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.to.toLowerCase(),\n            Bytes.fromNat(transaction.value),\n            transaction.from.toLowerCase(),\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\n// TODO:\nfunction rlpEncodeForValueTransferMemo(transaction) {\n    return RLP.encode([\n        RLP.encode([\n            VALUE_TRANSFER_MEMO_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.to.toLowerCase(),\n            Bytes.fromNat(transaction.value),\n            transaction.from.toLowerCase(),\n            transaction.data,\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransfer(transaction) {\n    if (transaction.senderRawTransaction) {\n        // fee payer rlp encoding.\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\n\n        // eslint-disable-next-line no-unused-vars\n        const [nonce, gasPrice, gas, to, value, from, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\n\n        return RLP.encode([\n            RLP.encode([\n                FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG,\n                Bytes.fromNat(nonce),\n                Bytes.fromNat(gasPrice),\n                Bytes.fromNat(gas),\n                to.toLowerCase(),\n                Bytes.fromNat(value),\n                from.toLowerCase(),\n            ]),\n            transaction.feePayer.toLowerCase(),\n            Bytes.fromNat(transaction.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n    return RLP.encode([\n        RLP.encode([\n            FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.to.toLowerCase(),\n            Bytes.fromNat(transaction.value),\n            transaction.from.toLowerCase(),\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction) {\n    if (transaction.senderRawTransaction) {\n        // fee payer rlp encoding.\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\n\n        // eslint-disable-next-line no-unused-vars\n        const [nonce, gasPrice, gas, to, value, from, feeRatio, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\n\n        return RLP.encode([\n            RLP.encode([\n                FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG,\n                Bytes.fromNat(nonce),\n                Bytes.fromNat(gasPrice),\n                Bytes.fromNat(gas),\n                to.toLowerCase(),\n                Bytes.fromNat(value),\n                from.toLowerCase(),\n                feeRatio,\n            ]),\n            transaction.feePayer.toLowerCase(),\n            Bytes.fromNat(transaction.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n    return RLP.encode([\n        RLP.encode([\n            FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.to.toLowerCase(),\n            Bytes.fromNat(transaction.value),\n            transaction.from.toLowerCase(),\n            Bytes.fromNat(transaction.feeRatio),\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferMemo(transaction) {\n    if (transaction.senderRawTransaction) {\n        // fee payer rlp encoding.\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\n\n        // eslint-disable-next-line no-unused-vars\n        const [nonce, gasPrice, gas, to, value, from, data, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\n\n        return RLP.encode([\n            RLP.encode([\n                FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG,\n                Bytes.fromNat(nonce),\n                Bytes.fromNat(gasPrice),\n                Bytes.fromNat(gas),\n                to.toLowerCase(),\n                Bytes.fromNat(value),\n                from.toLowerCase(),\n                data,\n            ]),\n            transaction.feePayer.toLowerCase(),\n            Bytes.fromNat(transaction.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n    return RLP.encode([\n        RLP.encode([\n            FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.to.toLowerCase(),\n            Bytes.fromNat(transaction.value),\n            transaction.from.toLowerCase(),\n            transaction.data,\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction) {\n    if (transaction.senderRawTransaction) {\n        // fee payer rlp encoding.\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\n\n        // eslint-disable-next-line no-unused-vars\n        const [nonce, gasPrice, gas, to, value, from, data, feeRatio, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\n\n        return RLP.encode([\n            RLP.encode([\n                FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG,\n                Bytes.fromNat(nonce),\n                Bytes.fromNat(gasPrice),\n                Bytes.fromNat(gas),\n                to.toLowerCase(),\n                Bytes.fromNat(value),\n                from.toLowerCase(),\n                data,\n                Bytes.fromNat(feeRatio),\n            ]),\n            transaction.feePayer.toLowerCase(),\n            Bytes.fromNat(transaction.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n    return RLP.encode([\n        RLP.encode([\n            FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.to.toLowerCase(),\n            Bytes.fromNat(transaction.value),\n            transaction.from.toLowerCase(),\n            transaction.data,\n            Bytes.fromNat(transaction.feeRatio),\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nmodule.exports = {\n    rlpEncodeForValueTransfer,\n    rlpEncodeForValueTransferMemo,\n    rlpEncodeForFeeDelegatedValueTransfer,\n    rlpEncodeForFeeDelegatedValueTransferWithRatio,\n    rlpEncodeForFeeDelegatedValueTransferMemo,\n    rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\n}\n"]},"metadata":{},"sourceType":"script"}