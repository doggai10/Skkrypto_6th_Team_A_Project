{"ast":null,"code":"var _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Bytes = require('eth-lib/lib/bytes');\n\nvar AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nvar _require = require('../../transactionHelper/transactionHelper'),\n    TX_TYPE_STRING = _require.TX_TYPE_STRING,\n    TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nvar utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring)) throw new Error(\"Cannot decode to FeeDelegatedChainDataAnchoring. The prefix must be \".concat(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring, \": \").concat(rlpEncoded));\n  var typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  var _RLP$decode = RLP.decode(typeDettached),\n      _RLP$decode2 = _slicedToArray(_RLP$decode, 8),\n      nonce = _RLP$decode2[0],\n      gasPrice = _RLP$decode2[1],\n      gas = _RLP$decode2[2],\n      from = _RLP$decode2[3],\n      input = _RLP$decode2[4],\n      signatures = _RLP$decode2[5],\n      feePayer = _RLP$decode2[6],\n      feePayerSignatures = _RLP$decode2[7];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from: from,\n    input: input,\n    signatures: signatures,\n    feePayer: feePayer,\n    feePayerSignatures: feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedchaindataanchoring to see more detail.\n * @class\n */\n\n\nvar FeeDelegatedChainDataAnchoring = /*#__PURE__*/function (_AbstractFeeDelegated) {\n  \"use strict\";\n\n  _inherits(FeeDelegatedChainDataAnchoring, _AbstractFeeDelegated);\n\n  var _super = _createSuper(FeeDelegatedChainDataAnchoring);\n\n  _createClass(FeeDelegatedChainDataAnchoring, null, [{\n    key: \"decode\",\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedChainDataAnchoring transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated chain data anchoring transaction.\n     * @return {FeeDelegatedChainDataAnchoring}\n     */\n    value: function decode(rlpEncoded) {\n      return new FeeDelegatedChainDataAnchoring(_decode(rlpEncoded));\n    }\n    /**\n     * Creates a fee delegated chain data anchoring transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n\n  }]);\n\n  function FeeDelegatedChainDataAnchoring(createTxObj) {\n    var _this;\n\n    _classCallCheck(this, FeeDelegatedChainDataAnchoring);\n\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    _this = _super.call(this, TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring, createTxObj);\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    _this.input = createTxObj.input || createTxObj.data;\n    return _this;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  _createClass(FeeDelegatedChainDataAnchoring, [{\n    key: \"getRLPEncoding\",\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    value: function getRLPEncoding() {\n      this.validateOptionalValues();\n      var signatures = this.signatures.map(function (sig) {\n        return sig.encode();\n      });\n      var feePayerSignatures = this.feePayerSignatures.map(function (sig) {\n        return sig.encode();\n      });\n      return TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input, signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n    }\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n\n  }, {\n    key: \"getCommonRLPEncodingForSignature\",\n    value: function getCommonRLPEncodingForSignature() {\n      this.validateOptionalValues();\n      return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input]);\n    }\n  }, {\n    key: \"input\",\n    get: function get() {\n      return this._input;\n    },\n    set: function set(input) {\n      if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n      this._input = utils.addHexPrefix(input);\n    }\n  }]);\n\n  return FeeDelegatedChainDataAnchoring;\n}(AbstractFeeDelegatedTransaction);\n\nmodule.exports = FeeDelegatedChainDataAnchoring;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoring.js"],"names":["_","require","RLP","Bytes","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedChainDataAnchoring","Error","typeDettached","slice","decode","nonce","gasPrice","gas","from","input","signatures","feePayer","feePayerSignatures","trimLeadingZero","FeeDelegatedChainDataAnchoring","createTxObj","isString","data","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","_input","isHex","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring))\n        throw new Error(\n            `Cannot decode to FeeDelegatedChainDataAnchoring. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, input, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        input,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedchaindataanchoring to see more detail.\n * @class\n */\nclass FeeDelegatedChainDataAnchoring extends AbstractFeeDelegatedTransaction {\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedChainDataAnchoring transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated chain data anchoring transaction.\n     * @return {FeeDelegatedChainDataAnchoring}\n     */\n    static decode(rlpEncoded) {\n        return new FeeDelegatedChainDataAnchoring(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a fee delegated chain data anchoring transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring, createTxObj)\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.input,\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.input,\n        ])\n    }\n}\n\nmodule.exports = FeeDelegatedChainDataAnchoring\n"]},"metadata":{},"sourceType":"script"}