{"ast":null,"code":"var _inherits = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\n/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar _ = require('lodash');\n\nvar core = require('../../caver-core');\n\nvar _require = require('../../caver-core-helpers'),\n    formatters = _require.formatters;\n\nvar Subscriptions = require('../../caver-core-subscriptions').subscriptions;\n\nvar MethodBase = require('../../caver-core-method');\n\nvar utils = require('../../caver-utils');\n\nvar AbstractTransaction = require('../../caver-transaction/src/transactionTypes/abstractTransaction');\n\nvar KlayRPC = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function KlayRPC() {\n    _classCallCheck(this, KlayRPC);\n\n    var _this = this; // sets _requestmanager\n\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    core.packageInit(this, args); // overwrite package setRequestManager\n\n    var setRequestManager = this.setRequestManager;\n\n    this.setRequestManager = function (manager) {\n      setRequestManager(manager);\n      return true;\n    }; // overwrite setProvider\n\n\n    var setProvider = this.setProvider;\n\n    this.setProvider = function () {\n      for (var _len2 = arguments.length, arg = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        arg[_key2] = arguments[_key2];\n      }\n\n      setProvider.apply(_this, arg);\n\n      _this.setRequestManager(_this._requestManager);\n    };\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    var Method = /*#__PURE__*/function (_MethodBase) {\n      _inherits(Method, _MethodBase);\n\n      var _super = _createSuper(Method);\n\n      function Method(options) {\n        _classCallCheck(this, Method);\n\n        options.outputFormatterDisable = true;\n        return _super.call(this, options);\n      }\n\n      return Method;\n    }(MethodBase);\n\n    var _klaytnCall = [new Method({\n      name: 'getChainId',\n      call: 'klay_chainID',\n      params: 0\n    }), new Method({\n      name: 'getGasPrice',\n      call: 'klay_gasPrice',\n      params: 0\n    }), new Method({\n      name: 'getTransactionCount',\n      call: 'klay_getTransactionCount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    })];\n    AbstractTransaction._klaytnCall = {};\n\n    _.each(_klaytnCall, function (method) {\n      method = new Method(method);\n      method.attachToObject(AbstractTransaction._klaytnCall);\n      method.setRequestManager(_this._requestManager);\n    });\n\n    var methods = [].concat(_klaytnCall, [// Account\n    new Method({\n      name: 'accountCreated',\n      call: 'klay_accountCreated',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getAccounts',\n      call: 'klay_accounts',\n      params: 0\n    }), new Method({\n      name: 'encodeAccountKey',\n      call: 'klay_encodeAccountKey',\n      params: 1,\n      inputFormatter: [formatters.inputAccountKeyFormatter]\n    }), new Method({\n      name: 'decodeAccountKey',\n      call: 'klay_decodeAccountKey',\n      params: 1\n    }), new Method({\n      name: 'getAccount',\n      call: 'klay_getAccount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getAccountKey',\n      call: 'klay_getAccountKey',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getBalance',\n      call: 'klay_getBalance',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCode',\n      call: 'klay_getCode',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'isContractAccount',\n      call: 'klay_isContractAccount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'sign',\n      call: 'klay_sign',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputSignFormatter]\n    }), // Block\n    new Method({\n      name: 'getBlockNumber',\n      call: 'klay_blockNumber',\n      params: 0\n    }), new Method({\n      name: 'getBlock',\n      call: 'klay_getBlockByNumber',\n      hexCall: 'klay_getBlockByHash',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }), new Method({\n      name: 'getBlockByNumber',\n      call: 'klay_getBlockByNumber',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }), new Method({\n      name: 'getBlockByHash',\n      call: 'klay_getBlockByHash',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }), new Method({\n      name: 'getBlockReceipts',\n      call: 'klay_getBlockReceipts',\n      params: 1\n    }), new Method({\n      name: 'getBlockTransactionCount',\n      call: 'klay_getBlockTransactionCountByNumber',\n      hexCall: 'klay_getBlockTransactionCountByHash',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockTransactionCountByNumber',\n      call: 'klay_getBlockTransactionCountByNumber',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockTransactionCountByHash',\n      call: 'klay_getBlockTransactionCountByHash',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockWithConsensusInfo',\n      call: 'klay_getBlockWithConsensusInfoByNumber',\n      hexCall: 'klay_getBlockWithConsensusInfoByHash',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockWithConsensusInfoByNumber',\n      call: 'klay_getBlockWithConsensusInfoByNumber',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockWithConsensusInfoByHash',\n      call: 'klay_getBlockWithConsensusInfoByHash',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCommittee',\n      call: 'klay_getCommittee',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCommitteeSize',\n      call: 'klay_getCommitteeSize',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCouncil',\n      call: 'klay_getCouncil',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCouncilSize',\n      call: 'klay_getCouncilSize',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getStorageAt',\n      call: 'klay_getStorageAt',\n      params: 3,\n      inputFormatter: [formatters.inputAddressFormatter, utils.numberToHex, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'isMining',\n      call: 'klay_mining',\n      params: 0\n    }), new Method({\n      name: 'isSyncing',\n      call: 'klay_syncing',\n      params: 0\n    }), // Transaction\n    new Method({\n      name: 'call',\n      call: 'klay_call',\n      params: 2,\n      inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'estimateGas',\n      call: 'klay_estimateGas',\n      params: 1,\n      inputFormatter: [formatters.inputCallFormatter]\n    }), new Method({\n      name: 'estimateComputationCost',\n      call: 'klay_estimateComputationCost',\n      params: 2,\n      inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getTransactionFromBlock',\n      call: 'klay_getTransactionByBlockNumberAndIndex',\n      hexCall: 'klay_getTransactionByBlockHashAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }), new Method({\n      name: 'getTransactionByBlockNumberAndIndex',\n      call: 'klay_getTransactionByBlockNumberAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }), new Method({\n      name: 'getTransactionByBlockHashAndIndex',\n      call: 'klay_getTransactionByBlockHashAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }), new Method({\n      name: 'getTransaction',\n      call: 'klay_getTransactionByHash',\n      params: 1\n    }), new Method({\n      name: 'getTransactionByHash',\n      call: 'klay_getTransactionByHash',\n      params: 1\n    }), new Method({\n      name: 'getTransactionBySenderTxHash',\n      call: 'klay_getTransactionBySenderTxHash',\n      params: 1\n    }), new Method({\n      name: 'getTransactionReceipt',\n      call: 'klay_getTransactionReceipt',\n      params: 1\n    }), new Method({\n      name: 'getTransactionReceiptBySenderTxHash',\n      call: 'klay_getTransactionReceiptBySenderTxHash',\n      params: 1\n    }), new Method({\n      name: 'sendRawTransaction',\n      call: 'klay_sendRawTransaction',\n      params: 1\n    }), new Method({\n      name: 'submitTransaction',\n      call: 'klay_sendRawTransaction',\n      params: 1\n    }), new Method({\n      name: 'sendTransaction',\n      call: 'klay_sendTransaction',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }), new Method({\n      name: 'sendTransactionAsFeePayer',\n      call: 'klay_sendTransactionAsFeePayer',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }), new Method({\n      name: 'signTransaction',\n      call: 'klay_signTransaction',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }), new Method({\n      name: 'signTransactionAsFeePayer',\n      call: 'klay_signTransactionAsFeePayer',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }), new Method({\n      name: 'getDecodedAnchoringTransactionByHash',\n      call: 'klay_getDecodedAnchoringTransactionByHash',\n      params: 1\n    }), // Configuration\n    new Method({\n      name: 'getClientVersion',\n      call: 'klay_clientVersion',\n      params: 0\n    }), new Method({\n      name: 'getGasPriceAt',\n      call: 'klay_gasPriceAt',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'isParallelDBWrite',\n      call: 'klay_isParallelDBWrite',\n      params: 0\n    }), new Method({\n      name: 'isSenderTxHashIndexingEnabled',\n      call: 'klay_isSenderTxHashIndexingEnabled',\n      params: 0\n    }), new Method({\n      name: 'getProtocolVersion',\n      call: 'klay_protocolVersion',\n      params: 0\n    }), new Method({\n      name: 'getRewardbase',\n      call: 'klay_rewardbase',\n      params: 0\n    }), new Method({\n      name: 'isWriteThroughCaching',\n      call: 'klay_writeThroughCaching',\n      params: 0\n    }), // Filter\n    new Method({\n      name: 'getFilterChanges',\n      call: 'klay_getFilterChanges',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }), new Method({\n      name: 'getFilterLogs',\n      call: 'klay_getFilterLogs',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }), new Method({\n      name: 'getLogs',\n      call: 'klay_getLogs',\n      params: 1,\n      inputFormatter: [formatters.inputLogFormatter]\n    }), new Method({\n      name: 'newBlockFilter',\n      call: 'klay_newBlockFilter',\n      params: 0\n    }), new Method({\n      name: 'newFilter',\n      call: 'klay_newFilter',\n      params: 1,\n      inputFormatter: [formatters.inputLogFormatter]\n    }), new Method({\n      name: 'newPendingTransactionFilter',\n      call: 'klay_newPendingTransactionFilter',\n      params: 0\n    }), new Method({\n      name: 'uninstallFilter',\n      call: 'klay_uninstallFilter',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }), // Misc\n    new Method({\n      name: 'sha3',\n      call: 'klay_sha3',\n      params: 1\n    }), new Method({\n      name: 'getCypressCredit',\n      call: 'klay_getCypressCredit',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), // subscriptions\n    new Subscriptions({\n      name: 'subscribe',\n      type: 'klay',\n      subscriptions: {\n        newBlockHeaders: {\n          subscriptionName: 'newHeads',\n          // replace subscription with this name\n          params: 0\n        },\n        pendingTransactions: {\n          subscriptionName: 'newPendingTransactions',\n          // replace subscription with this name\n          params: 0\n        },\n        logs: {\n          params: 1,\n          inputFormatter: [formatters.inputLogFormatter],\n          subscriptionHandler: function subscriptionHandler(output) {\n            this.emit('data', output);\n\n            if (_.isFunction(this.callback)) {\n              this.callback(null, output, this);\n            }\n          }\n        },\n        syncing: {\n          params: 0,\n          subscriptionHandler: function subscriptionHandler(output) {\n            var _this = this;\n            /* eslint-disable-line no-shadow */\n            // fire TRUE at start\n\n\n            if (this._isSyncing !== true) {\n              this._isSyncing = true;\n              this.emit('changed', _this._isSyncing);\n\n              if (_.isFunction(this.callback)) {\n                this.callback(null, _this._isSyncing, this);\n              }\n\n              setTimeout(function () {\n                _this.emit('data', output);\n\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, output, _this);\n                }\n              }, 0); // fire sync status\n            } else {\n              this.emit('data', output);\n\n              if (_.isFunction(_this.callback)) {\n                this.callback(null, output, this);\n              } // wait for some time before fireing the FALSE\n\n\n              clearTimeout(this._isSyncingTimeout);\n              this._isSyncingTimeout = setTimeout(function () {\n                if (output.currentBlock > output.highestBlock - 200) {\n                  _this._isSyncing = false;\n\n                  _this.emit('changed', _this._isSyncing);\n\n                  if (_.isFunction(_this.callback)) {\n                    _this.callback(null, _this._isSyncing, _this);\n                  }\n                }\n              }, 500);\n            }\n          }\n        }\n      }\n    })]);\n    methods.forEach(function (method) {\n      method.attachToObject(_this);\n      method.setRequestManager(_this._requestManager);\n    });\n  }\n\n  return KlayRPC;\n}();\n\nmodule.exports = KlayRPC;","map":{"version":3,"sources":["/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/caver-js/packages/caver-rpc/src/klay.js"],"names":["_","require","core","formatters","Subscriptions","subscriptions","MethodBase","utils","AbstractTransaction","KlayRPC","_this","args","packageInit","setRequestManager","manager","setProvider","arg","apply","_requestManager","clearSubscriptions","Method","options","outputFormatterDisable","_klaytnCall","name","call","params","inputFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","each","method","attachToObject","methods","inputAccountKeyFormatter","inputSignFormatter","hexCall","inputBlockNumberFormatter","toBoolean","numberToHex","inputCallFormatter","inputTransactionFormatter","inputLogFormatter","type","newBlockHeaders","subscriptionName","pendingTransactions","logs","subscriptionHandler","output","emit","isFunction","callback","syncing","_isSyncing","setTimeout","clearTimeout","_isSyncingTimeout","currentBlock","highestBlock","forEach","module","exports"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAMC,IAAI,GAAGD,OAAO,CAAC,kBAAD,CAApB;;eACuBA,OAAO,CAAC,0BAAD,C;IAAtBE,U,YAAAA,U;;AACR,IAAMC,aAAa,GAAGH,OAAO,CAAC,gCAAD,CAAP,CAA0CI,aAAhE;;AACA,IAAMC,UAAU,GAAGL,OAAO,CAAC,yBAAD,CAA1B;;AAEA,IAAMM,KAAK,GAAGN,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAMO,mBAAmB,GAAGP,OAAO,CAAC,kEAAD,CAAnC;;IAEMQ,O;;;AACF,qBAAqB;AAAA;;AACjB,QAAMC,KAAK,GAAG,IAAd,CADiB,CAGjB;;;AAHiB,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAIjBT,IAAAA,IAAI,CAACU,WAAL,CAAiB,IAAjB,EAAuBD,IAAvB,EAJiB,CAMjB;;AACA,QAAME,iBAAiB,GAAG,KAAKA,iBAA/B;;AACA,SAAKA,iBAAL,GAAyB,UAASC,OAAT,EAAkB;AACvCD,MAAAA,iBAAiB,CAACC,OAAD,CAAjB;AACA,aAAO,IAAP;AACH,KAHD,CARiB,CAajB;;;AACA,QAAMC,WAAW,GAAG,KAAKA,WAAzB;;AACA,SAAKA,WAAL,GAAmB,YAAiB;AAAA,yCAALC,GAAK;AAALA,QAAAA,GAAK;AAAA;;AAChCD,MAAAA,WAAW,CAACE,KAAZ,CAAkBP,KAAlB,EAAyBM,GAAzB;;AACAN,MAAAA,KAAK,CAACG,iBAAN,CAAwBH,KAAK,CAACQ,eAA9B;AACH,KAHD;;AAKA,SAAKC,kBAAL,GAA0BT,KAAK,CAACQ,eAAN,CAAsBC,kBAAhD;;AApBiB,QAsBXC,MAtBW;AAAA;;AAAA;;AAuBb,sBAAYC,OAAZ,EAAqB;AAAA;;AACjBA,QAAAA,OAAO,CAACC,sBAAR,GAAiC,IAAjC;AADiB,iCAEXD,OAFW;AAGpB;;AA1BY;AAAA,MAsBIf,UAtBJ;;AA6BjB,QAAMiB,WAAW,GAAG,CAChB,IAAIH,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,IAAI,EAAE,cAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CADgB,EAMhB,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,IAAI,EAAE,eAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CANgB,EAWhB,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,qBADC;AAEPC,MAAAA,IAAI,EAAE,0BAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCzB,UAAU,CAAC0B,gCAA9C;AAJT,KAAX,CAXgB,CAApB;AAkBArB,IAAAA,mBAAmB,CAACe,WAApB,GAAkC,EAAlC;;AACAvB,IAAAA,CAAC,CAAC8B,IAAF,CAAOP,WAAP,EAAoB,UAASQ,MAAT,EAAiB;AACjCA,MAAAA,MAAM,GAAG,IAAIX,MAAJ,CAAWW,MAAX,CAAT;AACAA,MAAAA,MAAM,CAACC,cAAP,CAAsBxB,mBAAmB,CAACe,WAA1C;AACAQ,MAAAA,MAAM,CAAClB,iBAAP,CAAyBH,KAAK,CAACQ,eAA/B;AACH,KAJD;;AAMA,QAAMe,OAAO,aACNV,WADM,GAGT;AACA,QAAIH,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,IAAI,EAAE,qBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCzB,UAAU,CAAC0B,gCAA9C;AAJT,KAAX,CAJS,EAUT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,IAAI,EAAE,eAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAVS,EAeT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,IAAI,EAAE,uBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC+B,wBAAZ;AAJT,KAAX,CAfS,EAqBT,IAAId,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,IAAI,EAAE,uBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CArBS,EA0BT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,IAAI,EAAE,iBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCzB,UAAU,CAAC0B,gCAA9C;AAJT,KAAX,CA1BS,EAgCT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,IAAI,EAAE,oBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCzB,UAAU,CAAC0B,gCAA9C;AAJT,KAAX,CAhCS,EAsCT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,IAAI,EAAE,iBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCzB,UAAU,CAAC0B,gCAA9C;AAJT,KAAX,CAtCS,EA4CT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,SADC;AAEPC,MAAAA,IAAI,EAAE,cAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCzB,UAAU,CAAC0B,gCAA9C;AAJT,KAAX,CA5CS,EAkDT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,mBADC;AAEPC,MAAAA,IAAI,EAAE,wBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCzB,UAAU,CAAC0B,gCAA9C;AAJT,KAAX,CAlDS,EAwDT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,MADC;AAEPC,MAAAA,IAAI,EAAE,WAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCzB,UAAU,CAACgC,kBAA9C;AAJT,KAAX,CAxDS,EA+DT;AACA,QAAIf,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,IAAI,EAAE,kBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAhES,EAqET,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,UADC;AAEPC,MAAAA,IAAI,EAAE,uBAFC;AAGPW,MAAAA,OAAO,EAAE,qBAHF;AAIPV,MAAAA,MAAM,EAAE,CAJD;AAKPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ,EAAuClC,UAAU,CAACmC,SAAlD;AALT,KAAX,CArES,EA4ET,IAAIlB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,IAAI,EAAE,uBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ,EAAuClC,UAAU,CAACmC,SAAlD;AAJT,KAAX,CA5ES,EAkFT,IAAIlB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,IAAI,EAAE,qBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ,EAAuClC,UAAU,CAACmC,SAAlD;AAJT,KAAX,CAlFS,EAwFT,IAAIlB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,IAAI,EAAE,uBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAxFS,EA6FT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,0BADC;AAEPC,MAAAA,IAAI,EAAE,uCAFC;AAGPW,MAAAA,OAAO,EAAE,qCAHF;AAIPV,MAAAA,MAAM,EAAE,CAJD;AAKPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ;AALT,KAAX,CA7FS,EAoGT,IAAIjB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kCADC;AAEPC,MAAAA,IAAI,EAAE,uCAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ;AAJT,KAAX,CApGS,EA0GT,IAAIjB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,gCADC;AAEPC,MAAAA,IAAI,EAAE,qCAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ;AAJT,KAAX,CA1GS,EAgHT,IAAIjB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,2BADC;AAEPC,MAAAA,IAAI,EAAE,wCAFC;AAGPW,MAAAA,OAAO,EAAE,sCAHF;AAIPV,MAAAA,MAAM,EAAE,CAJD;AAKPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AALT,KAAX,CAhHS,EAuHT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,mCADC;AAEPC,MAAAA,IAAI,EAAE,wCAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AAJT,KAAX,CAvHS,EA6HT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,iCADC;AAEPC,MAAAA,IAAI,EAAE,sCAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AAJT,KAAX,CA7HS,EAmIT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,cADC;AAEPC,MAAAA,IAAI,EAAE,mBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AAJT,KAAX,CAnIS,EAyIT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,IAAI,EAAE,uBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AAJT,KAAX,CAzIS,EA+IT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,IAAI,EAAE,iBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AAJT,KAAX,CA/IS,EAqJT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,IAAI,EAAE,qBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AAJT,KAAX,CArJS,EA2JT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,cADC;AAEPC,MAAAA,IAAI,EAAE,mBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACyB,qBAAZ,EAAmCrB,KAAK,CAACgC,WAAzC,EAAsDpC,UAAU,CAAC0B,gCAAjE;AAJT,KAAX,CA3JS,EAiKT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,UADC;AAEPC,MAAAA,IAAI,EAAE,aAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAjKS,EAsKT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,WADC;AAEPC,MAAAA,IAAI,EAAE,cAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAtKS,EA4KT;AACA,QAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,MADC;AAEPC,MAAAA,IAAI,EAAE,WAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACqC,kBAAZ,EAAgCrC,UAAU,CAAC0B,gCAA3C;AAJT,KAAX,CA7KS,EAmLT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,IAAI,EAAE,kBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACqC,kBAAZ;AAJT,KAAX,CAnLS,EAyLT,IAAIpB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,yBADC;AAEPC,MAAAA,IAAI,EAAE,8BAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACqC,kBAAZ,EAAgCrC,UAAU,CAAC0B,gCAA3C;AAJT,KAAX,CAzLS,EA+LT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,yBADC;AAEPC,MAAAA,IAAI,EAAE,0CAFC;AAGPW,MAAAA,OAAO,EAAE,wCAHF;AAIPV,MAAAA,MAAM,EAAE,CAJD;AAKPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ,EAAuC9B,KAAK,CAACgC,WAA7C;AALT,KAAX,CA/LS,EAsMT,IAAInB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,qCADC;AAEPC,MAAAA,IAAI,EAAE,0CAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ,EAAuC9B,KAAK,CAACgC,WAA7C;AAJT,KAAX,CAtMS,EA4MT,IAAInB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,mCADC;AAEPC,MAAAA,IAAI,EAAE,wCAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACkC,yBAAZ,EAAuC9B,KAAK,CAACgC,WAA7C;AAJT,KAAX,CA5MS,EAkNT,IAAInB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,IAAI,EAAE,2BAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAlNS,EAuNT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,sBADC;AAEPC,MAAAA,IAAI,EAAE,2BAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAvNS,EA4NT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,8BADC;AAEPC,MAAAA,IAAI,EAAE,mCAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CA5NS,EAiOT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,uBADC;AAEPC,MAAAA,IAAI,EAAE,4BAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAjOS,EAsOT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,qCADC;AAEPC,MAAAA,IAAI,EAAE,0CAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAtOS,EA2OT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,IAAI,EAAE,yBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CA3OS,EAgPT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,mBADC;AAEPC,MAAAA,IAAI,EAAE,yBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAhPS,EAqPT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,IAAI,EAAE,sBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACsC,yBAAZ;AAJT,KAAX,CArPS,EA2PT,IAAIrB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,2BADC;AAEPC,MAAAA,IAAI,EAAE,gCAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACsC,yBAAZ;AAJT,KAAX,CA3PS,EAiQT,IAAIrB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,IAAI,EAAE,sBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACsC,yBAAZ;AAJT,KAAX,CAjQS,EAuQT,IAAIrB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,2BADC;AAEPC,MAAAA,IAAI,EAAE,gCAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACsC,yBAAZ;AAJT,KAAX,CAvQS,EA6QT,IAAIrB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,sCADC;AAEPC,MAAAA,IAAI,EAAE,2CAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CA7QS,EAmRT;AACA,QAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,IAAI,EAAE,oBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CApRS,EAyRT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,IAAI,EAAE,iBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AAJT,KAAX,CAzRS,EA+RT,IAAIT,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,mBADC;AAEPC,MAAAA,IAAI,EAAE,wBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CA/RS,EAoST,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,+BADC;AAEPC,MAAAA,IAAI,EAAE,oCAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CApSS,EAyST,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,oBADC;AAEPC,MAAAA,IAAI,EAAE,sBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAzSS,EA8ST,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,IAAI,EAAE,iBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CA9SS,EAmTT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,uBADC;AAEPC,MAAAA,IAAI,EAAE,0BAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAnTS,EAyTT;AACA,QAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,IAAI,EAAE,uBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACpB,KAAK,CAACgC,WAAP;AAJT,KAAX,CA1TS,EAgUT,IAAInB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,IAAI,EAAE,oBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACpB,KAAK,CAACgC,WAAP;AAJT,KAAX,CAhUS,EAsUT,IAAInB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,SADC;AAEPC,MAAAA,IAAI,EAAE,cAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACuC,iBAAZ;AAJT,KAAX,CAtUS,EA4UT,IAAItB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,IAAI,EAAE,qBAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CA5US,EAiVT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,WADC;AAEPC,MAAAA,IAAI,EAAE,gBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAACuC,iBAAZ;AAJT,KAAX,CAjVS,EAuVT,IAAItB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,6BADC;AAEPC,MAAAA,IAAI,EAAE,kCAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CAvVS,EA4VT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,IAAI,EAAE,sBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACpB,KAAK,CAACgC,WAAP;AAJT,KAAX,CA5VS,EAmWT;AACA,QAAInB,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,MADC;AAEPC,MAAAA,IAAI,EAAE,WAFC;AAGPC,MAAAA,MAAM,EAAE;AAHD,KAAX,CApWS,EAyWT,IAAIN,MAAJ,CAAW;AACPI,MAAAA,IAAI,EAAE,kBADC;AAEPC,MAAAA,IAAI,EAAE,uBAFC;AAGPC,MAAAA,MAAM,EAAE,CAHD;AAIPC,MAAAA,cAAc,EAAE,CAACxB,UAAU,CAAC0B,gCAAZ;AAJT,KAAX,CAzWS,EAgXT;AACA,QAAIzB,aAAJ,CAAkB;AACdoB,MAAAA,IAAI,EAAE,WADQ;AAEdmB,MAAAA,IAAI,EAAE,MAFQ;AAGdtC,MAAAA,aAAa,EAAE;AACXuC,QAAAA,eAAe,EAAE;AACbC,UAAAA,gBAAgB,EAAE,UADL;AACiB;AAC9BnB,UAAAA,MAAM,EAAE;AAFK,SADN;AAKXoB,QAAAA,mBAAmB,EAAE;AACjBD,UAAAA,gBAAgB,EAAE,wBADD;AAC2B;AAC5CnB,UAAAA,MAAM,EAAE;AAFS,SALV;AASXqB,QAAAA,IAAI,EAAE;AACFrB,UAAAA,MAAM,EAAE,CADN;AAEFC,UAAAA,cAAc,EAAE,CAACxB,UAAU,CAACuC,iBAAZ,CAFd;AAGFM,UAAAA,mBAAmB,EAAE,6BAASC,MAAT,EAAiB;AAClC,iBAAKC,IAAL,CAAU,MAAV,EAAkBD,MAAlB;;AAEA,gBAAIjD,CAAC,CAACmD,UAAF,CAAa,KAAKC,QAAlB,CAAJ,EAAiC;AAC7B,mBAAKA,QAAL,CAAc,IAAd,EAAoBH,MAApB,EAA4B,IAA5B;AACH;AACJ;AATC,SATK;AAoBXI,QAAAA,OAAO,EAAE;AACL3B,UAAAA,MAAM,EAAE,CADH;AAELsB,UAAAA,mBAAmB,EAAE,6BAASC,MAAT,EAAiB;AAClC,gBAAMvC,KAAK,GAAG,IAAd;AAAmB;AAEnB;;;AACA,gBAAI,KAAK4C,UAAL,KAAoB,IAAxB,EAA8B;AAC1B,mBAAKA,UAAL,GAAkB,IAAlB;AACA,mBAAKJ,IAAL,CAAU,SAAV,EAAqBxC,KAAK,CAAC4C,UAA3B;;AAEA,kBAAItD,CAAC,CAACmD,UAAF,CAAa,KAAKC,QAAlB,CAAJ,EAAiC;AAC7B,qBAAKA,QAAL,CAAc,IAAd,EAAoB1C,KAAK,CAAC4C,UAA1B,EAAsC,IAAtC;AACH;;AAEDC,cAAAA,UAAU,CAAC,YAAW;AAClB7C,gBAAAA,KAAK,CAACwC,IAAN,CAAW,MAAX,EAAmBD,MAAnB;;AAEA,oBAAIjD,CAAC,CAACmD,UAAF,CAAazC,KAAK,CAAC0C,QAAnB,CAAJ,EAAkC;AAC9B1C,kBAAAA,KAAK,CAAC0C,QAAN,CAAe,IAAf,EAAqBH,MAArB,EAA6BvC,KAA7B;AACH;AACJ,eANS,EAMP,CANO,CAAV,CAR0B,CAgB1B;AACH,aAjBD,MAiBO;AACH,mBAAKwC,IAAL,CAAU,MAAV,EAAkBD,MAAlB;;AACA,kBAAIjD,CAAC,CAACmD,UAAF,CAAazC,KAAK,CAAC0C,QAAnB,CAAJ,EAAkC;AAC9B,qBAAKA,QAAL,CAAc,IAAd,EAAoBH,MAApB,EAA4B,IAA5B;AACH,eAJE,CAMH;;;AACAO,cAAAA,YAAY,CAAC,KAAKC,iBAAN,CAAZ;AACA,mBAAKA,iBAAL,GAAyBF,UAAU,CAAC,YAAW;AAC3C,oBAAIN,MAAM,CAACS,YAAP,GAAsBT,MAAM,CAACU,YAAP,GAAsB,GAAhD,EAAqD;AACjDjD,kBAAAA,KAAK,CAAC4C,UAAN,GAAmB,KAAnB;;AACA5C,kBAAAA,KAAK,CAACwC,IAAN,CAAW,SAAX,EAAsBxC,KAAK,CAAC4C,UAA5B;;AAEA,sBAAItD,CAAC,CAACmD,UAAF,CAAazC,KAAK,CAAC0C,QAAnB,CAAJ,EAAkC;AAC9B1C,oBAAAA,KAAK,CAAC0C,QAAN,CAAe,IAAf,EAAqB1C,KAAK,CAAC4C,UAA3B,EAAuC5C,KAAvC;AACH;AACJ;AACJ,eATkC,EAShC,GATgC,CAAnC;AAUH;AACJ;AA1CI;AApBE;AAHD,KAAlB,CAjXS,EAAb;AAwbAuB,IAAAA,OAAO,CAAC2B,OAAR,CAAgB,UAAS7B,MAAT,EAAiB;AAC7BA,MAAAA,MAAM,CAACC,cAAP,CAAsBtB,KAAtB;AACAqB,MAAAA,MAAM,CAAClB,iBAAP,CAAyBH,KAAK,CAACQ,eAA/B;AACH,KAHD;AAIH;;;;;AAGL2C,MAAM,CAACC,OAAP,GAAiBrD,OAAjB","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nconst _ = require('lodash')\n\nconst core = require('../../caver-core')\nconst { formatters } = require('../../caver-core-helpers')\nconst Subscriptions = require('../../caver-core-subscriptions').subscriptions\nconst MethodBase = require('../../caver-core-method')\n\nconst utils = require('../../caver-utils')\n\nconst AbstractTransaction = require('../../caver-transaction/src/transactionTypes/abstractTransaction')\n\nclass KlayRPC {\n    constructor(...args) {\n        const _this = this\n\n        // sets _requestmanager\n        core.packageInit(this, args)\n\n        // overwrite package setRequestManager\n        const setRequestManager = this.setRequestManager\n        this.setRequestManager = function(manager) {\n            setRequestManager(manager)\n            return true\n        }\n\n        // overwrite setProvider\n        const setProvider = this.setProvider\n        this.setProvider = function(...arg) {\n            setProvider.apply(_this, arg)\n            _this.setRequestManager(_this._requestManager)\n        }\n\n        this.clearSubscriptions = _this._requestManager.clearSubscriptions\n\n        class Method extends MethodBase {\n            constructor(options) {\n                options.outputFormatterDisable = true\n                super(options)\n            }\n        }\n\n        const _klaytnCall = [\n            new Method({\n                name: 'getChainId',\n                call: 'klay_chainID',\n                params: 0,\n            }),\n            new Method({\n                name: 'getGasPrice',\n                call: 'klay_gasPrice',\n                params: 0,\n            }),\n            new Method({\n                name: 'getTransactionCount',\n                call: 'klay_getTransactionCount',\n                params: 2,\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n        ]\n        AbstractTransaction._klaytnCall = {}\n        _.each(_klaytnCall, function(method) {\n            method = new Method(method)\n            method.attachToObject(AbstractTransaction._klaytnCall)\n            method.setRequestManager(_this._requestManager)\n        })\n\n        const methods = [\n            ..._klaytnCall,\n\n            // Account\n            new Method({\n                name: 'accountCreated',\n                call: 'klay_accountCreated',\n                params: 2,\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getAccounts',\n                call: 'klay_accounts',\n                params: 0,\n            }),\n            new Method({\n                name: 'encodeAccountKey',\n                call: 'klay_encodeAccountKey',\n                params: 1,\n                inputFormatter: [formatters.inputAccountKeyFormatter],\n            }),\n            new Method({\n                name: 'decodeAccountKey',\n                call: 'klay_decodeAccountKey',\n                params: 1,\n            }),\n            new Method({\n                name: 'getAccount',\n                call: 'klay_getAccount',\n                params: 2,\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getAccountKey',\n                call: 'klay_getAccountKey',\n                params: 2,\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getBalance',\n                call: 'klay_getBalance',\n                params: 2,\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getCode',\n                call: 'klay_getCode',\n                params: 2,\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'isContractAccount',\n                call: 'klay_isContractAccount',\n                params: 2,\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'sign',\n                call: 'klay_sign',\n                params: 2,\n                inputFormatter: [formatters.inputAddressFormatter, formatters.inputSignFormatter],\n            }),\n\n            // Block\n            new Method({\n                name: 'getBlockNumber',\n                call: 'klay_blockNumber',\n                params: 0,\n            }),\n            new Method({\n                name: 'getBlock',\n                call: 'klay_getBlockByNumber',\n                hexCall: 'klay_getBlockByHash',\n                params: 2,\n                inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean],\n            }),\n            new Method({\n                name: 'getBlockByNumber',\n                call: 'klay_getBlockByNumber',\n                params: 2,\n                inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean],\n            }),\n            new Method({\n                name: 'getBlockByHash',\n                call: 'klay_getBlockByHash',\n                params: 2,\n                inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean],\n            }),\n            new Method({\n                name: 'getBlockReceipts',\n                call: 'klay_getBlockReceipts',\n                params: 1,\n            }),\n            new Method({\n                name: 'getBlockTransactionCount',\n                call: 'klay_getBlockTransactionCountByNumber',\n                hexCall: 'klay_getBlockTransactionCountByHash',\n                params: 1,\n                inputFormatter: [formatters.inputBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getBlockTransactionCountByNumber',\n                call: 'klay_getBlockTransactionCountByNumber',\n                params: 1,\n                inputFormatter: [formatters.inputBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getBlockTransactionCountByHash',\n                call: 'klay_getBlockTransactionCountByHash',\n                params: 1,\n                inputFormatter: [formatters.inputBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getBlockWithConsensusInfo',\n                call: 'klay_getBlockWithConsensusInfoByNumber',\n                hexCall: 'klay_getBlockWithConsensusInfoByHash',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getBlockWithConsensusInfoByNumber',\n                call: 'klay_getBlockWithConsensusInfoByNumber',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getBlockWithConsensusInfoByHash',\n                call: 'klay_getBlockWithConsensusInfoByHash',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getCommittee',\n                call: 'klay_getCommittee',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getCommitteeSize',\n                call: 'klay_getCommitteeSize',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getCouncil',\n                call: 'klay_getCouncil',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getCouncilSize',\n                call: 'klay_getCouncilSize',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getStorageAt',\n                call: 'klay_getStorageAt',\n                params: 3,\n                inputFormatter: [formatters.inputAddressFormatter, utils.numberToHex, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'isMining',\n                call: 'klay_mining',\n                params: 0,\n            }),\n            new Method({\n                name: 'isSyncing',\n                call: 'klay_syncing',\n                params: 0,\n            }),\n\n            // Transaction\n            new Method({\n                name: 'call',\n                call: 'klay_call',\n                params: 2,\n                inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'estimateGas',\n                call: 'klay_estimateGas',\n                params: 1,\n                inputFormatter: [formatters.inputCallFormatter],\n            }),\n            new Method({\n                name: 'estimateComputationCost',\n                call: 'klay_estimateComputationCost',\n                params: 2,\n                inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'getTransactionFromBlock',\n                call: 'klay_getTransactionByBlockNumberAndIndex',\n                hexCall: 'klay_getTransactionByBlockHashAndIndex',\n                params: 2,\n                inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex],\n            }),\n            new Method({\n                name: 'getTransactionByBlockNumberAndIndex',\n                call: 'klay_getTransactionByBlockNumberAndIndex',\n                params: 2,\n                inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex],\n            }),\n            new Method({\n                name: 'getTransactionByBlockHashAndIndex',\n                call: 'klay_getTransactionByBlockHashAndIndex',\n                params: 2,\n                inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex],\n            }),\n            new Method({\n                name: 'getTransaction',\n                call: 'klay_getTransactionByHash',\n                params: 1,\n            }),\n            new Method({\n                name: 'getTransactionByHash',\n                call: 'klay_getTransactionByHash',\n                params: 1,\n            }),\n            new Method({\n                name: 'getTransactionBySenderTxHash',\n                call: 'klay_getTransactionBySenderTxHash',\n                params: 1,\n            }),\n            new Method({\n                name: 'getTransactionReceipt',\n                call: 'klay_getTransactionReceipt',\n                params: 1,\n            }),\n            new Method({\n                name: 'getTransactionReceiptBySenderTxHash',\n                call: 'klay_getTransactionReceiptBySenderTxHash',\n                params: 1,\n            }),\n            new Method({\n                name: 'sendRawTransaction',\n                call: 'klay_sendRawTransaction',\n                params: 1,\n            }),\n            new Method({\n                name: 'submitTransaction',\n                call: 'klay_sendRawTransaction',\n                params: 1,\n            }),\n            new Method({\n                name: 'sendTransaction',\n                call: 'klay_sendTransaction',\n                params: 1,\n                inputFormatter: [formatters.inputTransactionFormatter],\n            }),\n            new Method({\n                name: 'sendTransactionAsFeePayer',\n                call: 'klay_sendTransactionAsFeePayer',\n                params: 1,\n                inputFormatter: [formatters.inputTransactionFormatter],\n            }),\n            new Method({\n                name: 'signTransaction',\n                call: 'klay_signTransaction',\n                params: 1,\n                inputFormatter: [formatters.inputTransactionFormatter],\n            }),\n            new Method({\n                name: 'signTransactionAsFeePayer',\n                call: 'klay_signTransactionAsFeePayer',\n                params: 1,\n                inputFormatter: [formatters.inputTransactionFormatter],\n            }),\n            new Method({\n                name: 'getDecodedAnchoringTransactionByHash',\n                call: 'klay_getDecodedAnchoringTransactionByHash',\n                params: 1,\n            }),\n\n            // Configuration\n            new Method({\n                name: 'getClientVersion',\n                call: 'klay_clientVersion',\n                params: 0,\n            }),\n            new Method({\n                name: 'getGasPriceAt',\n                call: 'klay_gasPriceAt',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n            new Method({\n                name: 'isParallelDBWrite',\n                call: 'klay_isParallelDBWrite',\n                params: 0,\n            }),\n            new Method({\n                name: 'isSenderTxHashIndexingEnabled',\n                call: 'klay_isSenderTxHashIndexingEnabled',\n                params: 0,\n            }),\n            new Method({\n                name: 'getProtocolVersion',\n                call: 'klay_protocolVersion',\n                params: 0,\n            }),\n            new Method({\n                name: 'getRewardbase',\n                call: 'klay_rewardbase',\n                params: 0,\n            }),\n            new Method({\n                name: 'isWriteThroughCaching',\n                call: 'klay_writeThroughCaching',\n                params: 0,\n            }),\n\n            // Filter\n            new Method({\n                name: 'getFilterChanges',\n                call: 'klay_getFilterChanges',\n                params: 1,\n                inputFormatter: [utils.numberToHex],\n            }),\n            new Method({\n                name: 'getFilterLogs',\n                call: 'klay_getFilterLogs',\n                params: 1,\n                inputFormatter: [utils.numberToHex],\n            }),\n            new Method({\n                name: 'getLogs',\n                call: 'klay_getLogs',\n                params: 1,\n                inputFormatter: [formatters.inputLogFormatter],\n            }),\n            new Method({\n                name: 'newBlockFilter',\n                call: 'klay_newBlockFilter',\n                params: 0,\n            }),\n            new Method({\n                name: 'newFilter',\n                call: 'klay_newFilter',\n                params: 1,\n                inputFormatter: [formatters.inputLogFormatter],\n            }),\n            new Method({\n                name: 'newPendingTransactionFilter',\n                call: 'klay_newPendingTransactionFilter',\n                params: 0,\n            }),\n            new Method({\n                name: 'uninstallFilter',\n                call: 'klay_uninstallFilter',\n                params: 1,\n                inputFormatter: [utils.numberToHex],\n            }),\n\n            // Misc\n            new Method({\n                name: 'sha3',\n                call: 'klay_sha3',\n                params: 1,\n            }),\n            new Method({\n                name: 'getCypressCredit',\n                call: 'klay_getCypressCredit',\n                params: 1,\n                inputFormatter: [formatters.inputDefaultBlockNumberFormatter],\n            }),\n\n            // subscriptions\n            new Subscriptions({\n                name: 'subscribe',\n                type: 'klay',\n                subscriptions: {\n                    newBlockHeaders: {\n                        subscriptionName: 'newHeads', // replace subscription with this name\n                        params: 0,\n                    },\n                    pendingTransactions: {\n                        subscriptionName: 'newPendingTransactions', // replace subscription with this name\n                        params: 0,\n                    },\n                    logs: {\n                        params: 1,\n                        inputFormatter: [formatters.inputLogFormatter],\n                        subscriptionHandler: function(output) {\n                            this.emit('data', output)\n\n                            if (_.isFunction(this.callback)) {\n                                this.callback(null, output, this)\n                            }\n                        },\n                    },\n                    syncing: {\n                        params: 0,\n                        subscriptionHandler: function(output) {\n                            const _this = this /* eslint-disable-line no-shadow */\n\n                            // fire TRUE at start\n                            if (this._isSyncing !== true) {\n                                this._isSyncing = true\n                                this.emit('changed', _this._isSyncing)\n\n                                if (_.isFunction(this.callback)) {\n                                    this.callback(null, _this._isSyncing, this)\n                                }\n\n                                setTimeout(function() {\n                                    _this.emit('data', output)\n\n                                    if (_.isFunction(_this.callback)) {\n                                        _this.callback(null, output, _this)\n                                    }\n                                }, 0)\n\n                                // fire sync status\n                            } else {\n                                this.emit('data', output)\n                                if (_.isFunction(_this.callback)) {\n                                    this.callback(null, output, this)\n                                }\n\n                                // wait for some time before fireing the FALSE\n                                clearTimeout(this._isSyncingTimeout)\n                                this._isSyncingTimeout = setTimeout(function() {\n                                    if (output.currentBlock > output.highestBlock - 200) {\n                                        _this._isSyncing = false\n                                        _this.emit('changed', _this._isSyncing)\n\n                                        if (_.isFunction(_this.callback)) {\n                                            _this.callback(null, _this._isSyncing, _this)\n                                        }\n                                    }\n                                }, 500)\n                            }\n                        },\n                    },\n                },\n            }),\n        ]\n\n        methods.forEach(function(method) {\n            method.attachToObject(_this)\n            method.setRequestManager(_this._requestManager)\n        })\n    }\n}\n\nmodule.exports = KlayRPC\n"]},"metadata":{},"sourceType":"script"}