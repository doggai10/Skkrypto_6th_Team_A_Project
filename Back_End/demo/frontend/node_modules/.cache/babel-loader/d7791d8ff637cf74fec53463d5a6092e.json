{"ast":null,"code":"var _toConsumableArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _toArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/toArray\");\n\nvar _slicedToArray = require(\"/Users/kimdoheon/IdeaProjects/skkrypto/Back_End/demo/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar RLP = require('eth-lib/lib/rlp');\n\nvar Hash = require('eth-lib/lib/hash');\n\nvar utils = require('../../../caver-utils');\n\nvar _require = require('./transactionType'),\n    rlpEncodeForLegacyTransaction = _require.rlpEncodeForLegacyTransaction,\n    rlpEncodeForValueTransfer = _require.rlpEncodeForValueTransfer,\n    rlpEncodeForValueTransferMemo = _require.rlpEncodeForValueTransferMemo,\n    rlpEncodeForFeeDelegatedValueTransferMemoWithRatio = _require.rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\n    rlpEncodeForFeeDelegatedValueTransfer = _require.rlpEncodeForFeeDelegatedValueTransfer,\n    rlpEncodeForFeeDelegatedValueTransferWithRatio = _require.rlpEncodeForFeeDelegatedValueTransferWithRatio,\n    rlpEncodeForFeeDelegatedValueTransferMemo = _require.rlpEncodeForFeeDelegatedValueTransferMemo,\n    rlpEncodeForAccountUpdate = _require.rlpEncodeForAccountUpdate,\n    rlpEncodeForContractDeploy = _require.rlpEncodeForContractDeploy,\n    rlpEncodeForContractExecution = _require.rlpEncodeForContractExecution,\n    rlpEncodeForFeeDelegatedAccountUpdate = _require.rlpEncodeForFeeDelegatedAccountUpdate,\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio = _require.rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n    rlpEncodeForFeeDelegatedSmartContractDeploy = _require.rlpEncodeForFeeDelegatedSmartContractDeploy,\n    rlpEncodeForFeeDelegatedSmartContractDeployWithRatio = _require.rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\n    rlpEncodeForFeeDelegatedSmartContractExecution = _require.rlpEncodeForFeeDelegatedSmartContractExecution,\n    rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio = _require.rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio,\n    rlpEncodeForCancel = _require.rlpEncodeForCancel,\n    rlpEncodeForFeeDelegatedCancel = _require.rlpEncodeForFeeDelegatedCancel,\n    rlpEncodeForFeeDelegatedCancelWithRatio = _require.rlpEncodeForFeeDelegatedCancelWithRatio,\n    rlpEncodeForChainDataAnchoring = _require.rlpEncodeForChainDataAnchoring,\n    parseAccountKey = _require.parseAccountKey;\n\nvar creationNotSupportError = 'ACCOUNT_CREATION transaction type is not supported yet.';\n\nfunction encodeRLPByTxType(transaction) {\n  transaction.type = transaction.senderRawTransaction ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction) : transaction.type;\n\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      throw new Error(creationNotSupportError);\n\n    case 'ACCOUNT_UPDATE':\n      return rlpEncodeForAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      return rlpEncodeForFeeDelegatedAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction);\n\n    case 'VALUE_TRANSFER':\n      return rlpEncodeForValueTransfer(transaction);\n\n    case 'VALUE_TRANSFER_MEMO':\n      return rlpEncodeForValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      return rlpEncodeForFeeDelegatedValueTransfer(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      return rlpEncodeForFeeDelegatedValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForFeeDelegatedSmartContractDeploy(transaction);\n\n    case 'SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForContractDeploy(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction);\n\n    case 'SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForFeeDelegatedSmartContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction);\n\n    case 'CANCEL':\n      return rlpEncodeForCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL':\n      return rlpEncodeForFeeDelegatedCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedCancelWithRatio(transaction);\n\n    case 'CHAIN_DATA_ANCHORING':\n      return rlpEncodeForChainDataAnchoring(transaction);\n\n    case 'LEGACY':\n    default:\n      return rlpEncodeForLegacyTransaction(transaction);\n  }\n} // case1) sig === [v, r, s]\n// case2) sig ===\n\n\nfunction makeRawTransaction(rlpEncoded, sig, transaction) {\n  var decodedValues = RLP.decode(rlpEncoded);\n  var rawTx;\n  transaction.type = transaction.senderRawTransaction ? utils.getTxTypeStringFromRawTransaction(transaction.senderRawTransaction) : transaction.type;\n\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      throw new Error(creationNotSupportError);\n\n    case 'VALUE_TRANSFER':\n    case 'VALUE_TRANSFER_MEMO':\n    case 'ACCOUNT_UPDATE':\n    case 'SMART_CONTRACT_DEPLOY':\n    case 'SMART_CONTRACT_EXECUTION':\n    case 'CANCEL':\n    case 'CHAIN_DATA_ANCHORING':\n      return _combineSenderRawTransaction(rlpEncoded, sig);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n    case 'FEE_DELEGATED_CANCEL':\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          var decoded = decodeFromRawTransaction(transaction.senderRawTransaction);\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, decoded.signatures);\n        }\n\n        if (transaction.feePayer && transaction.feePayer !== '0x' && transaction.feePayerSignatures) {\n          return _combineFeePayerRawTransaction(rlpEncoded, transaction.feePayerSignatures, transaction, sig);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'LEGACY':\n    default:\n      rawTx = decodedValues.slice(0, 6).concat(sig[0]);\n      return {\n        rawTransaction: RLP.encode(rawTx),\n        signatures: sig[0],\n        feePayerSignatures: undefined\n      };\n  }\n}\n\nfunction _combineSenderRawTransaction(rlpEncoded, sig) {\n  var decodedValues = RLP.decode(rlpEncoded);\n\n  var _decodedValues = _slicedToArray(decodedValues, 1),\n      data = _decodedValues[0];\n\n  var _RLP$decode = RLP.decode(data),\n      _RLP$decode2 = _toArray(_RLP$decode),\n      txType = _RLP$decode2[0],\n      rawTx = _RLP$decode2.slice(1);\n\n  if (!Array.isArray(sig[0])) sig = [sig];\n  sig = refineSignatures(sig);\n  rawTx = [].concat(_toConsumableArray(rawTx), [sig]); // set default feepayer's information in rawTx\n\n  var typeString = utils.getTxTypeStringFromRawTransaction(txType);\n  if (typeString !== undefined && typeString.includes('FEE_DELEGATED')) rawTx = [].concat(_toConsumableArray(rawTx), ['0x', [['0x01', '0x', '0x']]]);\n  return {\n    rawTransaction: txType + RLP.encode(rawTx).slice(2),\n    signatures: sig,\n    feePayerSignatures: undefined\n  };\n}\n\nfunction _combineFeePayerRawTransaction(rlpEncoded, feePayerSignatures, transaction, senderSignature) {\n  var decodedValues = RLP.decode(rlpEncoded);\n\n  var _decodedValues2 = _slicedToArray(decodedValues, 1),\n      data = _decodedValues2[0];\n\n  var _RLP$decode3 = RLP.decode(data),\n      _RLP$decode4 = _toArray(_RLP$decode3),\n      txType = _RLP$decode4[0],\n      rawTx = _RLP$decode4.slice(1);\n\n  if (!Array.isArray(feePayerSignatures[0])) feePayerSignatures = [feePayerSignatures];\n  senderSignature = refineSignatures(senderSignature);\n  feePayerSignatures = refineSignatures(feePayerSignatures);\n  rawTx = [].concat(_toConsumableArray(rawTx), [senderSignature, transaction.feePayer.toLowerCase(), feePayerSignatures]);\n  return {\n    rawTransaction: txType + RLP.encode(rawTx).slice(2),\n    signatures: senderSignature,\n    feePayerSignatures: feePayerSignatures\n  };\n} // refineSignatures removes duplication and empty signatures\n\n\nfunction refineSignatures(sigArray) {\n  var set = new Set();\n  var result = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = sigArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var sig = _step.value;\n\n      if (sig.length > 0 && !utils.isEmptySig(sig)) {\n        var sigString = sig.join('');\n\n        if (!set.has(sigString)) {\n          set.add(sigString, true);\n          result.push(sig);\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (result.length === 0) result = [['0x01', '0x', '0x']];\n  return result;\n}\n\nfunction extractSignatures(rawTransaction) {\n  var senderSignatures = [];\n  var feePayerSignatures = [];\n\n  var decoded = _decodeFromRawTransaction(rawTransaction);\n\n  senderSignatures = senderSignatures.concat(decoded.signatures);\n\n  if (decoded.feePayerSignatures) {\n    feePayerSignatures = feePayerSignatures.concat(decoded.feePayerSignatures);\n  }\n\n  return {\n    senderSignatures: senderSignatures,\n    feePayerSignatures: feePayerSignatures,\n    decodedTransaction: decoded\n  };\n}\n\nfunction splitFeePayer(rawTransaction) {\n  var typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n  if (!typeString || !typeString.includes('FEE_DELEGATED')) throw new Error(\"Failed to split fee payer: not a fee delegated transaction type('\".concat(typeString || 'LEGACY', \"')\"));\n  var txType = rawTransaction.slice(0, 4);\n  var decodedValues = RLP.decode(utils.addHexPrefix(rawTransaction.slice(4)));\n  var detachFeePayer = decodedValues.splice(0, decodedValues.length - 2);\n  detachFeePayer.push('0x');\n  detachFeePayer.push([['0x01', '0x', '0x']]);\n  return {\n    senderRawTransaction: txType + RLP.encode(detachFeePayer).slice(2),\n    feePayer: decodedValues[0],\n    feePayerSignatures: decodedValues[1]\n  };\n}\n\nfunction decodeFromRawTransaction(rawTransaction, type) {\n  var decodeResult = _decodeFromRawTransaction(rawTransaction, type);\n\n  switch (decodeResult.type) {\n    case 'ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        decodeResult = parseAccountKey(decodeResult);\n      }\n  }\n\n  return decodeResult;\n}\n\nfunction _decodeFromRawTransaction(rawTransaction, type) {\n  var typeString = type;\n\n  if (typeString === undefined || typeString !== 'LEGACY') {\n    typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n\n    if (typeString === undefined) {\n      typeString = 'LEGACY';\n    } else {\n      rawTransaction = \"0x\".concat(rawTransaction.slice(4));\n    }\n  }\n\n  switch (typeString) {\n    case 'LEGACY':\n      {\n        var _RLP$decode5 = RLP.decode(rawTransaction),\n            _RLP$decode6 = _slicedToArray(_RLP$decode5, 9),\n            nonce = _RLP$decode6[0],\n            gasPrice = _RLP$decode6[1],\n            gas = _RLP$decode6[2],\n            to = _RLP$decode6[3],\n            value = _RLP$decode6[4],\n            data = _RLP$decode6[5],\n            v = _RLP$decode6[6],\n            r = _RLP$decode6[7],\n            s = _RLP$decode6[8];\n\n        return {\n          type: typeString,\n          nonce: nonce,\n          gasPrice: gasPrice,\n          gas: gas,\n          to: to,\n          value: value,\n          data: data,\n          v: v,\n          r: r,\n          s: s,\n          signatures: [v, r, s]\n        };\n      }\n\n    case 'VALUE_TRANSFER':\n      {\n        var _RLP$decode7 = RLP.decode(rawTransaction),\n            _RLP$decode8 = _slicedToArray(_RLP$decode7, 7),\n            _nonce = _RLP$decode8[0],\n            _gasPrice = _RLP$decode8[1],\n            _gas = _RLP$decode8[2],\n            _to = _RLP$decode8[3],\n            _value = _RLP$decode8[4],\n            from = _RLP$decode8[5],\n            signatures = _RLP$decode8[6];\n\n        return {\n          type: typeString,\n          nonce: _nonce,\n          gasPrice: _gasPrice,\n          gas: _gas,\n          to: _to,\n          value: _value,\n          from: from,\n          v: signatures[0][0],\n          r: signatures[0][1],\n          s: signatures[0][2],\n          signatures: signatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      {\n        var _RLP$decode9 = RLP.decode(rawTransaction),\n            _RLP$decode10 = _slicedToArray(_RLP$decode9, 9),\n            _nonce2 = _RLP$decode10[0],\n            _gasPrice2 = _RLP$decode10[1],\n            _gas2 = _RLP$decode10[2],\n            _to2 = _RLP$decode10[3],\n            _value2 = _RLP$decode10[4],\n            _from = _RLP$decode10[5],\n            _signatures = _RLP$decode10[6],\n            feePayer = _RLP$decode10[7],\n            feePayerSignatures = _RLP$decode10[8];\n\n        return {\n          type: typeString,\n          nonce: _nonce2,\n          gasPrice: _gasPrice2,\n          gas: _gas2,\n          to: _to2,\n          value: _value2,\n          from: _from,\n          v: _signatures[0][0],\n          r: _signatures[0][1],\n          s: _signatures[0][2],\n          signatures: _signatures,\n          feePayer: feePayer,\n          payerV: feePayerSignatures[0][0],\n          payerR: feePayerSignatures[0][1],\n          payerS: feePayerSignatures[0][2],\n          feePayerSignatures: feePayerSignatures\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      {\n        var _RLP$decode11 = RLP.decode(rawTransaction),\n            _RLP$decode12 = _slicedToArray(_RLP$decode11, 10),\n            _nonce3 = _RLP$decode12[0],\n            _gasPrice3 = _RLP$decode12[1],\n            _gas3 = _RLP$decode12[2],\n            _to3 = _RLP$decode12[3],\n            _value3 = _RLP$decode12[4],\n            _from2 = _RLP$decode12[5],\n            feeRatio = _RLP$decode12[6],\n            _signatures2 = _RLP$decode12[7],\n            _feePayer = _RLP$decode12[8],\n            _feePayerSignatures = _RLP$decode12[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce3,\n          gasPrice: _gasPrice3,\n          gas: _gas3,\n          to: _to3,\n          value: _value3,\n          from: _from2,\n          feeRatio: feeRatio,\n          v: _signatures2[0][0],\n          r: _signatures2[0][1],\n          s: _signatures2[0][2],\n          signatures: _signatures2,\n          feePayer: _feePayer,\n          payerV: _feePayerSignatures[0][0],\n          payerR: _feePayerSignatures[0][1],\n          payerS: _feePayerSignatures[0][2],\n          feePayerSignatures: _feePayerSignatures\n        };\n      }\n\n    case 'VALUE_TRANSFER_MEMO':\n      {\n        var _RLP$decode13 = RLP.decode(rawTransaction),\n            _RLP$decode14 = _slicedToArray(_RLP$decode13, 8),\n            _nonce4 = _RLP$decode14[0],\n            _gasPrice4 = _RLP$decode14[1],\n            _gas4 = _RLP$decode14[2],\n            _to4 = _RLP$decode14[3],\n            _value4 = _RLP$decode14[4],\n            _from3 = _RLP$decode14[5],\n            _data = _RLP$decode14[6],\n            _signatures3 = _RLP$decode14[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce4,\n          gasPrice: _gasPrice4,\n          gas: _gas4,\n          to: _to4,\n          value: _value4,\n          from: _from3,\n          data: _data,\n          v: _signatures3[0][0],\n          r: _signatures3[0][1],\n          s: _signatures3[0][2],\n          signatures: _signatures3\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      {\n        var _RLP$decode15 = RLP.decode(rawTransaction),\n            _RLP$decode16 = _slicedToArray(_RLP$decode15, 10),\n            _nonce5 = _RLP$decode16[0],\n            _gasPrice5 = _RLP$decode16[1],\n            _gas5 = _RLP$decode16[2],\n            _to5 = _RLP$decode16[3],\n            _value5 = _RLP$decode16[4],\n            _from4 = _RLP$decode16[5],\n            _data2 = _RLP$decode16[6],\n            _signatures4 = _RLP$decode16[7],\n            _feePayer2 = _RLP$decode16[8],\n            _feePayerSignatures2 = _RLP$decode16[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce5,\n          gasPrice: _gasPrice5,\n          gas: _gas5,\n          to: _to5,\n          value: _value5,\n          from: _from4,\n          data: _data2,\n          v: _signatures4[0][0],\n          r: _signatures4[0][1],\n          s: _signatures4[0][2],\n          signatures: _signatures4,\n          feePayer: _feePayer2,\n          payerV: _feePayerSignatures2[0][0],\n          payerR: _feePayerSignatures2[0][1],\n          payerS: _feePayerSignatures2[0][2],\n          feePayerSignatures: _feePayerSignatures2\n        };\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      {\n        var _RLP$decode17 = RLP.decode(rawTransaction),\n            _RLP$decode18 = _slicedToArray(_RLP$decode17, 11),\n            _nonce6 = _RLP$decode18[0],\n            _gasPrice6 = _RLP$decode18[1],\n            _gas6 = _RLP$decode18[2],\n            _to6 = _RLP$decode18[3],\n            _value6 = _RLP$decode18[4],\n            _from5 = _RLP$decode18[5],\n            _data3 = _RLP$decode18[6],\n            _feeRatio = _RLP$decode18[7],\n            _signatures5 = _RLP$decode18[8],\n            _feePayer3 = _RLP$decode18[9],\n            _feePayerSignatures3 = _RLP$decode18[10];\n\n        return {\n          type: typeString,\n          nonce: _nonce6,\n          gasPrice: _gasPrice6,\n          gas: _gas6,\n          to: _to6,\n          value: _value6,\n          from: _from5,\n          data: _data3,\n          feeRatio: _feeRatio,\n          v: _signatures5[0][0],\n          r: _signatures5[0][1],\n          s: _signatures5[0][2],\n          signatures: _signatures5,\n          feePayer: _feePayer3,\n          payerV: _feePayerSignatures3[0][0],\n          payerR: _feePayerSignatures3[0][1],\n          payerS: _feePayerSignatures3[0][2],\n          feePayerSignatures: _feePayerSignatures3\n        };\n      }\n\n    case 'ACCOUNT_CREATION':\n      {\n        throw new Error(creationNotSupportError);\n      }\n\n    case 'ACCOUNT_UPDATE':\n      {\n        var _RLP$decode19 = RLP.decode(rawTransaction),\n            _RLP$decode20 = _slicedToArray(_RLP$decode19, 6),\n            _nonce7 = _RLP$decode20[0],\n            _gasPrice7 = _RLP$decode20[1],\n            _gas7 = _RLP$decode20[2],\n            _from6 = _RLP$decode20[3],\n            accountKey = _RLP$decode20[4],\n            _signatures6 = _RLP$decode20[5];\n\n        return {\n          type: typeString,\n          nonce: _nonce7,\n          gasPrice: _gasPrice7,\n          gas: _gas7,\n          from: _from6,\n          accountKey: accountKey,\n          v: _signatures6[0][0],\n          r: _signatures6[0][1],\n          s: _signatures6[0][2],\n          signatures: _signatures6\n        };\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      {\n        var _RLP$decode21 = RLP.decode(rawTransaction),\n            _RLP$decode22 = _slicedToArray(_RLP$decode21, 8),\n            _nonce8 = _RLP$decode22[0],\n            _gasPrice8 = _RLP$decode22[1],\n            _gas8 = _RLP$decode22[2],\n            _from7 = _RLP$decode22[3],\n            _accountKey = _RLP$decode22[4],\n            _signatures7 = _RLP$decode22[5],\n            _feePayer4 = _RLP$decode22[6],\n            _feePayerSignatures4 = _RLP$decode22[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce8,\n          gasPrice: _gasPrice8,\n          gas: _gas8,\n          from: _from7,\n          accountKey: _accountKey,\n          v: _signatures7[0][0],\n          r: _signatures7[0][1],\n          s: _signatures7[0][2],\n          signatures: _signatures7,\n          feePayer: _feePayer4,\n          payerV: _feePayerSignatures4[0][0],\n          payerR: _feePayerSignatures4[0][1],\n          payerS: _feePayerSignatures4[0][2],\n          feePayerSignatures: _feePayerSignatures4\n        };\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        var _RLP$decode23 = RLP.decode(rawTransaction),\n            _RLP$decode24 = _slicedToArray(_RLP$decode23, 9),\n            _nonce9 = _RLP$decode24[0],\n            _gasPrice9 = _RLP$decode24[1],\n            _gas9 = _RLP$decode24[2],\n            _from8 = _RLP$decode24[3],\n            _accountKey2 = _RLP$decode24[4],\n            _feeRatio2 = _RLP$decode24[5],\n            _signatures8 = _RLP$decode24[6],\n            _feePayer5 = _RLP$decode24[7],\n            _feePayerSignatures5 = _RLP$decode24[8];\n\n        return {\n          type: typeString,\n          nonce: _nonce9,\n          gasPrice: _gasPrice9,\n          gas: _gas9,\n          from: _from8,\n          accountKey: _accountKey2,\n          feeRatio: _feeRatio2,\n          v: _signatures8[0][0],\n          r: _signatures8[0][1],\n          s: _signatures8[0][2],\n          signatures: _signatures8,\n          feePayer: _feePayer5,\n          payerV: _feePayerSignatures5[0][0],\n          payerR: _feePayerSignatures5[0][1],\n          payerS: _feePayerSignatures5[0][2],\n          feePayerSignatures: _feePayerSignatures5\n        };\n      }\n\n    case 'SMART_CONTRACT_DEPLOY':\n      {\n        var _RLP$decode25 = RLP.decode(rawTransaction),\n            _RLP$decode26 = _slicedToArray(_RLP$decode25, 10),\n            _nonce10 = _RLP$decode26[0],\n            _gasPrice10 = _RLP$decode26[1],\n            _gas10 = _RLP$decode26[2],\n            _to7 = _RLP$decode26[3],\n            _value7 = _RLP$decode26[4],\n            _from9 = _RLP$decode26[5],\n            _data4 = _RLP$decode26[6],\n            humanReadable = _RLP$decode26[7],\n            codeFormat = _RLP$decode26[8],\n            _signatures9 = _RLP$decode26[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce10,\n          gasPrice: _gasPrice10,\n          gas: _gas10,\n          to: _to7,\n          value: _value7,\n          from: _from9,\n          data: _data4,\n          humanReadable: humanReadable === '0x01',\n          codeFormat: codeFormat,\n          v: _signatures9[0][0],\n          r: _signatures9[0][1],\n          s: _signatures9[0][2],\n          signatures: _signatures9\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      {\n        var _RLP$decode27 = RLP.decode(rawTransaction),\n            _RLP$decode28 = _slicedToArray(_RLP$decode27, 12),\n            _nonce11 = _RLP$decode28[0],\n            _gasPrice11 = _RLP$decode28[1],\n            _gas11 = _RLP$decode28[2],\n            _to8 = _RLP$decode28[3],\n            _value8 = _RLP$decode28[4],\n            _from10 = _RLP$decode28[5],\n            _data5 = _RLP$decode28[6],\n            _humanReadable = _RLP$decode28[7],\n            _codeFormat = _RLP$decode28[8],\n            _signatures10 = _RLP$decode28[9],\n            _feePayer6 = _RLP$decode28[10],\n            _feePayerSignatures6 = _RLP$decode28[11];\n\n        return {\n          type: typeString,\n          nonce: _nonce11,\n          gasPrice: _gasPrice11,\n          gas: _gas11,\n          to: _to8,\n          value: _value8,\n          from: _from10,\n          data: _data5,\n          humanReadable: _humanReadable === '0x01',\n          codeFormat: _codeFormat,\n          v: _signatures10[0][0],\n          r: _signatures10[0][1],\n          s: _signatures10[0][2],\n          signatures: _signatures10,\n          feePayer: _feePayer6,\n          payerV: _feePayerSignatures6[0][0],\n          payerR: _feePayerSignatures6[0][1],\n          payerS: _feePayerSignatures6[0][2],\n          feePayerSignatures: _feePayerSignatures6\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      {\n        var _RLP$decode29 = RLP.decode(rawTransaction),\n            _RLP$decode30 = _slicedToArray(_RLP$decode29, 13),\n            _nonce12 = _RLP$decode30[0],\n            _gasPrice12 = _RLP$decode30[1],\n            _gas12 = _RLP$decode30[2],\n            _to9 = _RLP$decode30[3],\n            _value9 = _RLP$decode30[4],\n            _from11 = _RLP$decode30[5],\n            _data6 = _RLP$decode30[6],\n            _humanReadable2 = _RLP$decode30[7],\n            _feeRatio3 = _RLP$decode30[8],\n            _codeFormat2 = _RLP$decode30[9],\n            _signatures11 = _RLP$decode30[10],\n            _feePayer7 = _RLP$decode30[11],\n            _feePayerSignatures7 = _RLP$decode30[12];\n\n        return {\n          type: typeString,\n          nonce: _nonce12,\n          gasPrice: _gasPrice12,\n          gas: _gas12,\n          to: _to9,\n          value: _value9,\n          from: _from11,\n          data: _data6,\n          humanReadable: _humanReadable2 === '0x01',\n          feeRatio: _feeRatio3,\n          codeFormat: _codeFormat2,\n          v: _signatures11[0][0],\n          r: _signatures11[0][1],\n          s: _signatures11[0][2],\n          signatures: _signatures11,\n          feePayer: _feePayer7,\n          payerV: _feePayerSignatures7[0][0],\n          payerR: _feePayerSignatures7[0][1],\n          payerS: _feePayerSignatures7[0][2],\n          feePayerSignatures: _feePayerSignatures7\n        };\n      }\n\n    case 'SMART_CONTRACT_EXECUTION':\n      {\n        var _RLP$decode31 = RLP.decode(rawTransaction),\n            _RLP$decode32 = _slicedToArray(_RLP$decode31, 8),\n            _nonce13 = _RLP$decode32[0],\n            _gasPrice13 = _RLP$decode32[1],\n            _gas13 = _RLP$decode32[2],\n            _to10 = _RLP$decode32[3],\n            _value10 = _RLP$decode32[4],\n            _from12 = _RLP$decode32[5],\n            _data7 = _RLP$decode32[6],\n            _signatures12 = _RLP$decode32[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce13,\n          gasPrice: _gasPrice13,\n          gas: _gas13,\n          to: _to10,\n          value: _value10,\n          from: _from12,\n          data: _data7,\n          v: _signatures12[0][0],\n          r: _signatures12[0][1],\n          s: _signatures12[0][2],\n          signatures: _signatures12\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      {\n        var _RLP$decode33 = RLP.decode(rawTransaction),\n            _RLP$decode34 = _slicedToArray(_RLP$decode33, 10),\n            _nonce14 = _RLP$decode34[0],\n            _gasPrice14 = _RLP$decode34[1],\n            _gas14 = _RLP$decode34[2],\n            _to11 = _RLP$decode34[3],\n            _value11 = _RLP$decode34[4],\n            _from13 = _RLP$decode34[5],\n            _data8 = _RLP$decode34[6],\n            _signatures13 = _RLP$decode34[7],\n            _feePayer8 = _RLP$decode34[8],\n            _feePayerSignatures8 = _RLP$decode34[9];\n\n        return {\n          type: typeString,\n          nonce: _nonce14,\n          gasPrice: _gasPrice14,\n          gas: _gas14,\n          to: _to11,\n          value: _value11,\n          from: _from13,\n          data: _data8,\n          v: _signatures13[0][0],\n          r: _signatures13[0][1],\n          s: _signatures13[0][2],\n          signatures: _signatures13,\n          feePayer: _feePayer8,\n          payerV: _feePayerSignatures8[0][0],\n          payerR: _feePayerSignatures8[0][1],\n          payerS: _feePayerSignatures8[0][2],\n          feePayerSignatures: _feePayerSignatures8\n        };\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        var _RLP$decode35 = RLP.decode(rawTransaction),\n            _RLP$decode36 = _slicedToArray(_RLP$decode35, 11),\n            _nonce15 = _RLP$decode36[0],\n            _gasPrice15 = _RLP$decode36[1],\n            _gas15 = _RLP$decode36[2],\n            _to12 = _RLP$decode36[3],\n            _value12 = _RLP$decode36[4],\n            _from14 = _RLP$decode36[5],\n            _data9 = _RLP$decode36[6],\n            _feeRatio4 = _RLP$decode36[7],\n            _signatures14 = _RLP$decode36[8],\n            _feePayer9 = _RLP$decode36[9],\n            _feePayerSignatures9 = _RLP$decode36[10];\n\n        return {\n          type: typeString,\n          nonce: _nonce15,\n          gasPrice: _gasPrice15,\n          gas: _gas15,\n          to: _to12,\n          value: _value12,\n          from: _from14,\n          data: _data9,\n          feeRatio: _feeRatio4,\n          v: _signatures14[0][0],\n          r: _signatures14[0][1],\n          s: _signatures14[0][2],\n          signatures: _signatures14,\n          feePayer: _feePayer9,\n          payerV: _feePayerSignatures9[0][0],\n          payerR: _feePayerSignatures9[0][1],\n          payerS: _feePayerSignatures9[0][2],\n          feePayerSignatures: _feePayerSignatures9\n        };\n      }\n\n    case 'CANCEL':\n      {\n        var _RLP$decode37 = RLP.decode(rawTransaction),\n            _RLP$decode38 = _slicedToArray(_RLP$decode37, 5),\n            _nonce16 = _RLP$decode38[0],\n            _gasPrice16 = _RLP$decode38[1],\n            _gas16 = _RLP$decode38[2],\n            _from15 = _RLP$decode38[3],\n            _signatures15 = _RLP$decode38[4];\n\n        return {\n          type: typeString,\n          nonce: _nonce16,\n          gasPrice: _gasPrice16,\n          gas: _gas16,\n          from: _from15,\n          v: _signatures15[0][0],\n          r: _signatures15[0][1],\n          s: _signatures15[0][2],\n          signatures: _signatures15\n        };\n      }\n\n    case 'FEE_DELEGATED_CANCEL':\n      {\n        var _RLP$decode39 = RLP.decode(rawTransaction),\n            _RLP$decode40 = _slicedToArray(_RLP$decode39, 7),\n            _nonce17 = _RLP$decode40[0],\n            _gasPrice17 = _RLP$decode40[1],\n            _gas17 = _RLP$decode40[2],\n            _from16 = _RLP$decode40[3],\n            _signatures16 = _RLP$decode40[4],\n            _feePayer10 = _RLP$decode40[5],\n            _feePayerSignatures10 = _RLP$decode40[6];\n\n        return {\n          type: typeString,\n          nonce: _nonce17,\n          gasPrice: _gasPrice17,\n          gas: _gas17,\n          from: _from16,\n          v: _signatures16[0][0],\n          r: _signatures16[0][1],\n          s: _signatures16[0][2],\n          signatures: _signatures16,\n          feePayer: _feePayer10,\n          payerV: _feePayerSignatures10[0][0],\n          payerR: _feePayerSignatures10[0][1],\n          payerS: _feePayerSignatures10[0][2],\n          feePayerSignatures: _feePayerSignatures10\n        };\n      }\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      {\n        var _RLP$decode41 = RLP.decode(rawTransaction),\n            _RLP$decode42 = _slicedToArray(_RLP$decode41, 8),\n            _nonce18 = _RLP$decode42[0],\n            _gasPrice18 = _RLP$decode42[1],\n            _gas18 = _RLP$decode42[2],\n            _from17 = _RLP$decode42[3],\n            _feeRatio5 = _RLP$decode42[4],\n            _signatures17 = _RLP$decode42[5],\n            _feePayer11 = _RLP$decode42[6],\n            _feePayerSignatures11 = _RLP$decode42[7];\n\n        return {\n          type: typeString,\n          nonce: _nonce18,\n          gasPrice: _gasPrice18,\n          gas: _gas18,\n          from: _from17,\n          feeRatio: _feeRatio5,\n          v: _signatures17[0][0],\n          r: _signatures17[0][1],\n          s: _signatures17[0][2],\n          signatures: _signatures17,\n          feePayer: _feePayer11,\n          payerV: _feePayerSignatures11[0][0],\n          payerR: _feePayerSignatures11[0][1],\n          payerS: _feePayerSignatures11[0][2],\n          feePayerSignatures: _feePayerSignatures11\n        };\n      }\n\n    case 'CHAIN_DATA_ANCHORING':\n      {\n        var _RLP$decode43 = RLP.decode(rawTransaction),\n            _RLP$decode44 = _slicedToArray(_RLP$decode43, 6),\n            _nonce19 = _RLP$decode44[0],\n            _gasPrice19 = _RLP$decode44[1],\n            _gas19 = _RLP$decode44[2],\n            _from18 = _RLP$decode44[3],\n            _data10 = _RLP$decode44[4],\n            _signatures18 = _RLP$decode44[5];\n\n        return {\n          type: typeString,\n          nonce: _nonce19,\n          gasPrice: _gasPrice19,\n          gas: _gas19,\n          from: _from18,\n          data: _data10,\n          v: _signatures18[0][0],\n          r: _signatures18[0][1],\n          s: _signatures18[0][2],\n          signatures: _signatures18\n        };\n      }\n  }\n}\n\nfunction overwriteSignature(rawTransaction, txObj, signature, feePayerSignature) {\n  if (signature === undefined) {\n    signature = [txObj.v, txObj.r, txObj.s];\n  }\n\n  if (txObj.type.includes('FEE_DELEGATED') && feePayerSignature === undefined) {\n    feePayerSignature = [txObj.payerV, txObj.payerR, txObj.payerS];\n  }\n\n  if (txObj.type === 'LEGACY') {\n    var decodeLegacy = RLP.decode(rawTransaction);\n    decodeLegacy = decodeLegacy.slice(0, 6).concat(signature);\n    return RLP.encode(decodeLegacy);\n  }\n\n  var type = rawTransaction.slice(0, 4);\n  var typeDetached = \"0x\".concat(rawTransaction.slice(4));\n  var data = RLP.decode(typeDetached);\n\n  if (txObj.type.includes('FEE_DELEGATED')) {\n    data[data.length - 3] = [signature];\n    data[data.length - 1] = [feePayerSignature];\n  } else {\n    data[data.length - 1] = [signature];\n  }\n\n  return type + RLP.encode(data).slice(2);\n}\n\nfunction getSenderTxHash(rawTransaction) {\n  var typeString = utils.getTxTypeStringFromRawTransaction(rawTransaction);\n  if (typeString === undefined || !typeString.includes('FEE_DELEGATED')) return Hash.keccak256(rawTransaction);\n  var type = rawTransaction.slice(0, 4);\n  var typeDetached = \"0x\".concat(rawTransaction.slice(4));\n  var data = RLP.decode(typeDetached);\n  return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2));\n}\n\nmodule.exports = {\n  encodeRLPByTxType: encodeRLPByTxType,\n  makeRawTransaction: makeRawTransaction,\n  decodeFromRawTransaction: decodeFromRawTransaction,\n  overwriteSignature: overwriteSignature,\n  getSenderTxHash: getSenderTxHash,\n  splitFeePayer: splitFeePayer,\n  extractSignatures: extractSignatures\n};","map":null,"metadata":{},"sourceType":"script"}