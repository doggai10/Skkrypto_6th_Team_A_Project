{"ast":null,"code":"/*\n Modifications copyright 2018 The caver-js Authors\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n This file is derived from web3.js/packages/web3-utils/src/utils.js (2019/06/12).\n Modified and improved for the caver-js development.\n */\n\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nconst _ = require('lodash');\n\nconst BN = require('bn.js');\n\nconst BigNumber = require('bignumber.js');\n\nconst numberToBN = require('number-to-bn');\n\nconst utf8 = require('utf8');\n\nconst Hash = require('eth-lib/lib/hash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Account = require('eth-lib/lib/account');\n\nconst elliptic = require('elliptic');\n\nconst secp256k1 = new elliptic.ec('secp256k1');\nconst txTypeToString = {\n  '0x20': 'ACCOUNT_UPDATE',\n  '0x21': 'FEE_DELEGATED_ACCOUNT_UPDATE',\n  '0x22': 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO',\n  '0x08': 'VALUE_TRANSFER',\n  '0x10': 'VALUE_TRANSFER_MEMO',\n  '0x09': 'FEE_DELEGATED_VALUE_TRANSFER',\n  '0x0a': 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO',\n  '0x11': 'FEE_DELEGATED_VALUE_TRANSFER_MEMO',\n  '0x12': 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO',\n  '0x28': 'SMART_CONTRACT_DEPLOY',\n  '0x29': 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY',\n  '0x2a': 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO',\n  '0x30': 'SMART_CONTRACT_EXECUTION',\n  '0x31': 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION',\n  '0x32': 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO',\n  '0x38': 'CANCEL',\n  '0x39': 'FEE_DELEGATED_CANCEL',\n  '0x3a': 'FEE_DELEGATED_CANCEL_WITH_RATIO',\n  '0x48': 'CHAIN_DATA_ANCHORING'\n};\nconst HASH_LENGTH = 66;\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\n\nconst isBN = function (object) {\n  return BN.isBN(object);\n};\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\n\n\nconst isBigNumber = function (num) {\n  return BigNumber.isBigNumber(num);\n};\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\n\n\nfunction toBN(number) {\n  try {\n    return numberToBN.apply(null, arguments);\n  } catch (e) {\n    throw new Error(`${e} Given value: \"${number}\"`);\n  }\n}\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\n\n\nconst toTwosComplement = function (number) {\n  return `0x${toBN(number).toTwos(256).toString(16, 64)}`;\n};\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\n\n\nconst isAddress = function (address) {\n  // check if it has the basic requirements of an address\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false; // If it's ALL lowercase or ALL upppercase\n  }\n\n  if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n    return true; // Otherwise check each case\n  }\n\n  return checkAddressChecksum(address);\n};\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\n\n\nconst checkAddressChecksum = function (address) {\n  // Check each case\n  address = address.replace(/^0x/i, '');\n  const addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');\n\n  for (let i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\n\nconst leftPad = function (string, chars, sign) {\n  const hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  const padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join(sign || '0') + string;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\n\nconst rightPad = function (string, chars, sign) {\n  const hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  const padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + string + new Array(padding).join(sign || '0');\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\n\n\nconst utf8ToHex = function (str) {\n  str = utf8.encode(str);\n  let hex = ''; // remove \\u0000 padding from either side\n\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split('').reverse().join('');\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split('').reverse().join('');\n\n  for (let i = 0; i < str.length; i++) {\n    const code = str.charCodeAt(i); // if (code !== 0) {\n\n    const n = code.toString(16);\n    hex += n.length < 2 ? `0${n}` : n; // }\n  }\n\n  return `0x${hex}`;\n};\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\n\n\nconst hexToUtf8 = function (hex) {\n  if (!isHexStrict(hex)) {\n    throw new Error(`The parameter \"${hex}\" must be a valid HEX string.`);\n  }\n\n  let str = '';\n  let code = 0;\n  hex = hex.replace(/^0x/i, ''); // remove 00 padding from either side\n\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split('').reverse().join('');\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split('').reverse().join('');\n  const l = hex.length;\n\n  for (let i = 0; i < l; i += 2) {\n    code = parseInt(hex.substr(i, 2), 16); // if (code !== 0) {\n\n    str += String.fromCharCode(code); // }\n  }\n\n  return utf8.decode(str);\n};\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nconst hexToNumber = function (value) {\n  if (!value) return value;\n  return toBN(value).toNumber();\n};\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nconst hexToNumberString = function (value) {\n  if (!value) return value;\n  return toBN(value).toString(10);\n};\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nconst numberToHex = function (value) {\n  if (_.isNull(value) || _.isUndefined(value)) {\n    return value;\n  }\n\n  if (!isFinite(value) && !isHexStrict(value)) {\n    throw new Error(`Given input \"${value}\" is not a number.`);\n  }\n\n  const number = toBN(value);\n  const result = number.toString(16);\n  return number.lt(new BN(0)) ? `-0x${result.substr(1)}` : `0x${result}`;\n};\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\n\n\nconst bytesToHex = function (bytes) {\n  const hex = [];\n\n  for (let i = 0; i < bytes.length; i++) {\n    // eslint-disable-next-line no-bitwise\n    hex.push((bytes[i] >>> 4).toString(16)); // eslint-disable-next-line no-bitwise\n\n    hex.push((bytes[i] & 0xf).toString(16));\n  }\n\n  return `0x${hex.join('')}`;\n};\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\n\n\nconst hexToBytes = function (hex) {\n  hex = hex.toString(16);\n\n  if (!isHexStrict(hex)) {\n    throw new Error(`Given value \"${hex}\" is not a valid hex string.`);\n  }\n\n  hex = hex.replace(/^0x/i, '');\n  const bytes = [];\n\n  for (let c = 0; c < hex.length; c += 2) {\n    bytes.push(parseInt(hex.substr(c, 2), 16));\n  }\n\n  return bytes;\n};\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\n\n/* eslint-disable complexity */\n\n\nconst toHex = function (value, returnType) {\n  if (Buffer.isBuffer(value)) {\n    return returnType ? 'buffer' : bufferToHex(value);\n  }\n\n  if (isAddress(value)) {\n    return returnType ? 'address' : `0x${value.toLowerCase().replace(/^0x/i, '')}`;\n  }\n\n  if (_.isBoolean(value)) {\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n\n  if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n    return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n  } // if its a negative number, pass it through numberToHex\n\n\n  if (_.isString(value)) {\n    if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n      return returnType ? 'int256' : numberToHex(value);\n    }\n\n    if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n      return returnType ? 'bytes' : value;\n    }\n\n    if (!isFinite(value)) {\n      return returnType ? 'string' : utf8ToHex(value);\n    }\n  }\n\n  return returnType ? value < 0 ? 'int256' : 'uint256' : numberToHex(value);\n};\n/* eslint-enable complexity */\n\n\nconst bufferToHex = function (buf) {\n  buf = toBuffer(buf);\n  return `0x${buf.toString('hex')}`;\n};\n/**\n * Convert a input into a Buffer.\n *\n * @method toBuffer\n * @param {Buffer|Array|String|Number|BN|Object} input\n * @return {Buffer}\n */\n\n\nconst toBuffer = function (input) {\n  if (Buffer.isBuffer(input)) return input;\n  if (input === null || input === undefined) return Buffer.alloc(0);\n  if (Array.isArray(input)) return Buffer.from(input);\n  if (isBN(input)) return input.toArrayLike(Buffer);\n\n  if (_.isObject(input)) {\n    if (input.toArray && _.isFunction(input.toArray)) return Buffer.from(input.toArray());\n    throw new Error('To convert an object to a buffer, the toArray function must be implemented inside the object');\n  }\n\n  switch (typeof input) {\n    case 'string':\n      if (isHexStrict(input)) return Buffer.from(makeEven(input).replace('0x', ''), 'hex');\n      throw new Error(\"Failed to convert string to Buffer. 'toBuffer' function only supports 0x-prefixed hex string\");\n\n    case 'number':\n      return numberToBuffer(input);\n  }\n\n  throw new Error(`Not supported type with ${input}`);\n};\n/**\n * Convert a number to a Buffer.\n *\n * @method numberToBuffer\n * @param {Number|String|BN} num\n * @return {Buffer}\n */\n\n\nconst numberToBuffer = function (num) {\n  return Buffer.from(makeEven(numberToHex(num)).replace('0x', ''), 'hex');\n};\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\n\n\nconst isHexStrict = function (hex) {\n  return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\n\n\nconst isHex = function (hex) {\n  return (_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n};\n/**\n * Checks if the given string is a hexadecimal transaction hash with or without prefix 0x\n * @deprecated since version v1.5.0\n * @method isTxHash\n * @param {String} txHash given hexadecimal transaction hash\n * @return {Boolean}\n */\n\n\nconst isTxHash = txHash => isValidHash(txHash);\n/**\n * Checks if the given string is a hexadecimal hash with or without prefix 0x\n * @method isValidHash\n * @param {String} hash given hexadecimal hash\n * @return {Boolean}\n */\n\n\nconst isValidHash = hash => new RegExp(`^(0x|0X)?[0-9a-fA-F]{${HASH_LENGTH - 2}}$`).test(hash);\n/**\n * Checks if the given string is a hexadecimal transaction hash that starts with 0x\n * @deprecated since version v1.5.0\n * @method isTxHashStrict\n * @param {String} txHash given hexadecimal transaction hash\n * @return {Boolean}\n */\n\n\nconst isTxHashStrict = txHash => isValidHashStrict(txHash);\n/**\n * Checks if the given string is a hexadecimal hash with prefix 0x\n * @method isValidHashStrict\n * @param {String} hash given hexadecimal hash\n * @return {Boolean}\n */\n\n\nconst isValidHashStrict = hash => new RegExp(`^(0x|0X)[0-9a-fA-F]{${HASH_LENGTH - 2}}$`).test(hash);\n/**\n * Returns true if given string is a valid Klaytn block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\n\n\nconst isBloom = function (bloom) {\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  }\n\n  if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\n\n\nconst isTopic = function (topic) {\n  if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n    return false;\n  }\n\n  if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst parsePredefinedBlockNumber = blockNumber => {\n  switch (blockNumber) {\n    case 'genesis':\n    case 'earliest':\n      return '0x0';\n\n    default:\n      return blockNumber;\n  }\n};\n\nconst isPredefinedBlockNumber = function (blockNumber) {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest' || blockNumber === 'genesis';\n};\n/**\n * valid block number should be one of a type below:\n * 1) predefined block number ex:) 'latest', 'earliest', 'pending', 'genesis'\n * 2) hex\n * 3) finite number\n * @param  {String | Number}  blockNumber\n * @return {Boolean}\n */\n\n\nconst isValidBlockNumberCandidate = blockNumber => {\n  return isPredefinedBlockNumber(blockNumber) || isHexStrict(blockNumber) || Number.isFinite(Number(blockNumber));\n};\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\n\n\nconst SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nconst sha3 = function (value) {\n  // return null when value is not string type.\n  if (typeof value === 'number') return null;\n\n  if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n    value = hexToBytes(value);\n  }\n\n  if (isBN(value)) {\n    value = value.toString(10);\n  }\n\n  const returnValue = Hash.keccak256(value);\n\n  if (returnValue === SHA3_NULL_S) {\n    return null;\n  }\n\n  return returnValue;\n}; // expose the under the hood keccak256\n\n\nsha3._Hash = Hash;\n\nfunction parsePrivateKey(privateKey) {\n  if (typeof privateKey !== 'string') throw new Error('The private key must be of type string');\n  const has0xPrefix = privateKey.slice(0, 2) === '0x';\n  privateKey = has0xPrefix ? privateKey.slice(2) : privateKey;\n\n  if (privateKey.length !== 110 && privateKey.length !== 64) {\n    throw new Error(`Invalid private key(${privateKey})`);\n  }\n\n  const parsedPrivateKey = privateKey.slice(0, 64);\n\n  if (!isHex(parsedPrivateKey)) {\n    throw new Error('Invalid private key format : privateKey must be in hex format.');\n  }\n\n  if (privateKey.length !== 110) {\n    return {\n      privateKey: `0x${privateKey}`,\n      address: '',\n      isHumanReadable: false\n    };\n  }\n\n  if (!isKlaytnWalletKey(privateKey)) throw new Error(`Invalid KlaytnWalletKey format.`);\n  const humanReadableFlag = privateKey.slice(66, 68);\n  if (humanReadableFlag === '01') throw new Error('HumanReadableAddress is not supported yet.');\n  const parsedAddress = privateKey.slice(68);\n  return {\n    privateKey: `0x${parsedPrivateKey}`,\n    address: parsedAddress,\n    isHumanReadable: false\n  };\n}\n\nfunction parseKlaytnWalletKey(key) {\n  if (!isKlaytnWalletKey(key)) throw new Error(`Invalid KlaytnWalletKey format: ${key}`);\n  const klaytnWalletKey = key.startsWith('0x') ? key.slice(2) : key;\n  const splitted = klaytnWalletKey.split('0x');\n  return [`0x${splitted[0]}`, `0x${splitted[1]}`, `0x${splitted[2]}`];\n}\n\nconst isKlaytnWalletKey = privateKey => {\n  if (!_.isString(privateKey)) return false;\n  const has0xPrefix = privateKey.slice(0, 2) === '0x';\n  privateKey = has0xPrefix ? privateKey.slice(2) : privateKey;\n\n  if (privateKey.length !== 110) {\n    return false;\n  }\n\n  const splited = privateKey.split('0x');\n  if (splited.length !== 3) return false;\n\n  for (let i = 0; i < splited.length; i++) {\n    if (!isHex(splited[i])) return false;\n\n    switch (i) {\n      case 0:\n        if (splited[i].length !== 64 || !isValidPrivateKey(splited[i])) return false;\n        break;\n\n      case 1:\n        if (splited[i].length !== 2 || splited[i] !== '00' && splited[i] !== '01') return false;\n        break;\n\n      case 2:\n        if (splited[i].length !== 40 || !isAddress(splited[i])) return false;\n        break;\n    }\n  }\n\n  return true;\n};\n\nfunction isValidPrivateKey(privateKey) {\n  if (typeof privateKey !== 'string') return false;\n  const has0xPrefix = privateKey.slice(0, 2) === '0x';\n  privateKey = has0xPrefix ? privateKey.slice(2) : privateKey; // Private key validation 1: private key should be string and minimum length of it is 64.\n\n  if (privateKey.length !== 64 || !isHex(privateKey)) return false; // order n value in secp256k1. privateKey should be less than order n value.\n\n  const VALID_PRIVATE_KEY_LIMIT = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141';\n  const VALID_PRIVATE_LOWER_BOUND = '0000000000000000000000000000000000000000000000000000000000000000';\n  return VALID_PRIVATE_LOWER_BOUND < privateKey.toUpperCase() && privateKey.toUpperCase() < VALID_PRIVATE_KEY_LIMIT;\n} // Check is 1)Number string or 2)Hex string or 3)Number.\n\n\nfunction isValidNSHSN(value) {\n  switch (typeof value) {\n    case 'number':\n      if (value < 0) {\n        return false;\n      }\n\n      break;\n\n    case 'string':\n      if (Number(value) != value && !isHexStrict(value)) {\n        return false;\n      }\n\n      break;\n\n    default:\n      return false;\n  }\n\n  return true;\n}\n\nconst rlpEncode = data => RLP.encode(data);\n\nconst rlpDecode = encodedData => RLP.decode(encodedData);\n\nconst xyPointFromPublicKey = pub => {\n  let publicKey = pub;\n  if (isCompressedPublicKey(publicKey)) publicKey = decompressPublicKey(pub);\n  publicKey = publicKey.replace('0x', '');\n  if (publicKey.length === 130 && publicKey.slice(0, 2) === '04') publicKey = publicKey.slice(2);\n  if (publicKey.length !== 128) throw Error('Invalid public key'); // + 2 means '0x'\n\n  const pubX = `0x${publicKey.slice(0, 64).replace(/^0+/, '')}`;\n  const pubY = `0x${publicKey.slice(64).replace(/^0+/, '')}`;\n  return [pubX, pubY];\n};\n\nconst trimLeadingZero = function (hex) {\n  while (hex && hex.startsWith('0x0')) {\n    hex = `0x${hex.slice(3)}`;\n  }\n\n  return hex;\n};\n\nconst makeEven = function (hex) {\n  if (hex.length % 2 === 1) {\n    hex = hex.replace('0x', '0x0');\n  }\n\n  return hex;\n};\n/**\n * Returns an array of signatures.\n *\n * @param {string|object|Array.<string>} signature The address entered by the user for use in creating an account.\n * @return {Array.<string>} the sha3 string\n */\n\n\nconst resolveSignature = signature => {\n  if (_.isArray(signature)) {\n    const [v, r, s] = signature;\n    return [v, r, s];\n  }\n\n  if (_.isObject(signature)) {\n    const v = signature.V || signature.v;\n    const r = signature.R || signature.r;\n    const s = signature.S || signature.s;\n    if (!v || !r || !s) throw new Error('v, r, s fields should exist in signature');\n    return [v, r, s];\n  }\n\n  if (_.isString(signature)) {\n    const v = `0x${signature.slice(64 * 2 + 2)}`;\n    const decoded = Account.decodeSignature(signature);\n    return [v, decoded[1], decoded[2]];\n  }\n};\n\nconst transformSignaturesToObject = signatures => {\n  let isSingular = false;\n  if (!signatures) throw new Error(`Failed to transform signatures to object: invalid signatures ${signatures}`); // Input cases\n  // case 1. '0xf1998...'\n  // case 2. {V: '0x4e44', R: '0x1692a...', S: '0x277b9...'} or {v: '0x4e44', r: '0x1692a...', s: '0x277b9...'}\n  // case 3. ['0xf1998...', '0x53fe7...']\n  // case 4. ['0x4e44', '0x1692a...', '0x277b9...']\n  // case 5. [{V: '0x4e44', R: '0x1692a...', S: '0x277b9...'}, {v: '0x4e44', r: '0x1692a...', s: '0x277b9...'}]\n  // case 6. [['0x4e44', '0x1692a...', '0x277b9...'], ['0x4e44', '0x1692a...', '0x277b9...']]\n  // Transform a signature to an array of signatures to execute the same logic in the for loop below.\n\n  if (!_.isArray(signatures)) {\n    signatures = [signatures];\n    isSingular = true;\n  } else if (_.isString(signatures[0])) {\n    // This logic is performed for case 3 and case 4.\n    // In case 3, the signature string is in the array.\n    // In case 4, v, r, and s are separately included in the array.\n    // The signature string is a combination of v, r, and s, so the length of the signature string will be longer than 64.\n    // Hence, only case 4 will perform the below logic to form an array of signatures.\n    const stripped = signatures[0].replace('0x', '');\n\n    if (stripped.length <= 64) {\n      signatures = [signatures];\n      isSingular = true;\n    }\n  }\n\n  const ret = [];\n\n  for (const sig of signatures) {\n    const sigObj = {};\n\n    if (_.isArray(sig)) {\n      if (sig.length !== 3) throw new Error(`Failed to transform signatures to object: invalid length of signature (${sig.length})`);\n      if (isEmptySig(sig)) continue;\n      const [V, R, S] = sig;\n      sigObj.V = V;\n      sigObj.R = R;\n      sigObj.S = S;\n    } else if (_.isString(sig)) {\n      const decoded = Account.decodeSignature(sig).map(s => makeEven(trimLeadingZero(s)));\n      sigObj.V = decoded[0];\n      sigObj.R = decoded[1];\n      sigObj.S = decoded[2];\n    } else if (_.isObject(sig)) {\n      Object.keys(sig).map(key => {\n        if (key === 'v' || key === 'V' || key === '_v') {\n          sigObj.V = sig[key];\n        } else if (key === 'r' || key === 'R' || key === '_r') {\n          sigObj.R = sig[key];\n        } else if (key === 's' || key === 'S' || key === '_s') {\n          sigObj.S = sig[key];\n        } else {\n          throw new Error(`Failed to transform signatures to object: invalid key(${key}) is defined in signature object.`);\n        }\n      });\n    } else {\n      throw new Error(`Unsupported signature type: ${typeof sig}`);\n    }\n\n    if (!sigObj.V || !sigObj.R || !sigObj.S) {\n      throw new Error(`Failed to transform signatures to object: invalid signature ${sig}`);\n    }\n\n    Object.keys(sigObj).map(k => {\n      sigObj[k] = trimLeadingZero(sigObj[k]);\n    });\n    ret.push(sigObj);\n  }\n\n  return isSingular ? ret[0] : ret;\n};\n\nconst getTxTypeStringFromRawTransaction = rawTransaction => {\n  if (typeof rawTransaction !== 'string') throw new Error('Invalid raw Tx', rawTransaction);\n  const type = rawTransaction.slice(0, 4);\n  const typeString = txTypeToString[type];\n  return typeString;\n};\n\nconst isValidPublicKey = publicKey => {\n  let pubString = publicKey.replace('0x', '');\n  if (pubString.length === 130 && pubString.slice(0, 2) === '04') pubString = pubString.slice(2);\n  if (pubString.length !== 66 && pubString.length !== 128) return false;\n  if (pubString.length === 66 && !isCompressedPublicKey(pubString)) return false;\n  if (pubString.length === 66) pubString = decompressPublicKey(pubString);\n  const xyPoints = xyPointFromPublicKey(pubString);\n  if (xyPoints === undefined || !xyPoints.length || xyPoints.length !== 2) return false;\n  const point = secp256k1.curve.point(xyPoints[0].slice(2), xyPoints[1].slice(2), true);\n  return secp256k1.keyFromPublic(point).validate().result;\n};\n\nconst isCompressedPublicKey = publicKey => {\n  const compressedIndicators = ['02', '03'];\n  const withoutPrefix = publicKey.replace('0x', '');\n  return withoutPrefix.length === 66 && compressedIndicators.includes(withoutPrefix.slice(0, 2));\n};\n\nconst compressPublicKey = uncompressedPublicKey => {\n  const isAlreadyCompressed = isCompressedPublicKey(uncompressedPublicKey);\n  if (isAlreadyCompressed) return uncompressedPublicKey;\n  const xyPoints = xyPointFromPublicKey(uncompressedPublicKey);\n\n  if (xyPoints === undefined || !xyPoints.length || xyPoints.length !== 2) {\n    throw new Error('invalid public key');\n  }\n\n  const [x, y] = xyPoints;\n  const keyPair = secp256k1.keyPair({\n    pub: {\n      x: x.replace('0x', ''),\n      y: y.replace('0x', '')\n    },\n    pubEnc: 'hex'\n  });\n  const compressedPublicKey = `0x${keyPair.getPublic(true, 'hex')}`;\n  return compressedPublicKey;\n};\n\nconst decompressPublicKey = compressedPublicKey => {\n  if (!isCompressedPublicKey(compressedPublicKey)) {\n    if (!isValidPublicKey(compressedPublicKey)) throw new Error(`Invalid public key`);\n    return compressedPublicKey;\n  }\n\n  const compressedWithoutPrefix = compressedPublicKey.replace('0x', '');\n  const curve = secp256k1.curve;\n  const decoded = curve.decodePoint(compressedWithoutPrefix, 'hex');\n  const hexEncoded = decoded.encode('hex').slice(2);\n  return `0x${hexEncoded}`;\n};\n\nconst isContractDeployment = txObject => {\n  if (txObject.type) {\n    if (txObject.type.includes('SMART_CONTRACT_DEPLOY') || txObject.type.includes('SmartContractDeploy')) return true;\n    if (txObject.type !== 'LEGACY' && txObject.type !== 'TxTypeLegacyTransaction') return false;\n  }\n\n  if (txObject.data && txObject.data !== '0x' && (!txObject.to || txObject.to === '0x')) return true;\n  return false;\n};\n\nconst isValidRole = role => {\n  switch (role) {\n    case 'roleTransactionKey':\n    case 'roleAccountUpdateKey':\n    case 'roleFeePayerKey':\n    case 'transactionKey':\n    case 'updateKey':\n    case 'feePayerKey':\n      return true;\n  }\n\n  return false;\n}; // ['0x01', '0x', '0x]\n// [['0x01', '0x', '0x]]\n// '0x....'\n// { v: '0x01', r: '0x', s:'0x' }\n// SignatureData { _v: '0x01', _r: '0x', _s:'0x' }\n// [SignatureData { _v: '0x01', _r: '0x', _s:'0x' }]\n\n\nconst isEmptySig = sig => {\n  let sigs = sig; // Convert to array format\n\n  if (!_.isArray(sig)) sigs = resolveSignature(sigs); // Format to two-dimentional array\n\n  if (_.isString(sigs[0])) sigs = [sigs];\n\n  for (let s of sigs) {\n    if (!_.isArray(s)) s = resolveSignature(s);\n    if (s.length !== 3) throw new Error(`Invalid signatures length: ${s.length}`);\n    if (s[0] !== '0x01' || s[1] !== '0x' || s[2] !== '0x') return false;\n  }\n\n  return true;\n};\n\nconst hashMessage = data => {\n  const message = isHexStrict(data) ? hexToBytes(data) : data;\n  const messageBuffer = Buffer.from(message);\n  const preamble = `\\x19Klaytn Signed Message:\\n${message.length}`;\n  const preambleBuffer = Buffer.from(preamble); // klayMessage is concatenated buffer (preambleBuffer + messageBuffer)\n\n  const klayMessage = Buffer.concat([preambleBuffer, messageBuffer]); // Finally, run keccak256 on klayMessage.\n\n  return Hash.keccak256(klayMessage);\n};\n\nconst recover = (message, signature, preFixed = false) => {\n  if (!preFixed) {\n    message = hashMessage(message);\n  }\n\n  return Account.recover(message, Account.encodeSignature(signature.encode())).toLowerCase();\n};\n\nmodule.exports = {\n  BN: BN,\n  isBN: isBN,\n  isBigNumber: isBigNumber,\n  toBN: toBN,\n  isAddress: isAddress,\n  isBloom: isBloom,\n  // TODO UNDOCUMENTED\n  isTopic: isTopic,\n  // TODO UNDOCUMENTED\n  checkAddressChecksum: checkAddressChecksum,\n  utf8ToHex: utf8ToHex,\n  hexToUtf8: hexToUtf8,\n  hexToNumber: hexToNumber,\n  hexToNumberString: hexToNumberString,\n  numberToHex: numberToHex,\n  toHex: toHex,\n  bufferToHex: bufferToHex,\n  toBuffer: toBuffer,\n  numberToBuffer: numberToBuffer,\n  hexToBytes: hexToBytes,\n  bytesToHex: bytesToHex,\n  isHex: isHex,\n  isHexStrict: isHexStrict,\n  leftPad: leftPad,\n  rightPad: rightPad,\n  toTwosComplement: toTwosComplement,\n  sha3: sha3,\n  parsePredefinedBlockNumber: parsePredefinedBlockNumber,\n  isPredefinedBlockNumber: isPredefinedBlockNumber,\n  isValidBlockNumberCandidate: isValidBlockNumberCandidate,\n  isValidPrivateKey: isValidPrivateKey,\n  isValidNSHSN: isValidNSHSN,\n  parsePrivateKey: parsePrivateKey,\n  parseKlaytnWalletKey: parseKlaytnWalletKey,\n  isKlaytnWalletKey: isKlaytnWalletKey,\n  isContractDeployment: isContractDeployment,\n  rlpEncode: rlpEncode,\n  rlpDecode: rlpDecode,\n  xyPointFromPublicKey: xyPointFromPublicKey,\n  resolveSignature: resolveSignature,\n  transformSignaturesToObject: transformSignaturesToObject,\n  getTxTypeStringFromRawTransaction,\n  trimLeadingZero,\n  makeEven,\n  txTypeToString,\n  isValidPublicKey,\n  isCompressedPublicKey,\n  compressPublicKey,\n  decompressPublicKey,\n  isTxHash,\n  isTxHashStrict,\n  isValidHash,\n  isValidHashStrict,\n  isValidRole: isValidRole,\n  isEmptySig: isEmptySig,\n  hashMessage: hashMessage,\n  recover: recover\n};","map":null,"metadata":{},"sourceType":"script"}