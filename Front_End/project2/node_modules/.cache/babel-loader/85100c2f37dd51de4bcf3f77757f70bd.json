{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/test/react-dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst _require = require('../../transactionHelper/transactionHelper'),\n      TX_TYPE_STRING = _require.TX_TYPE_STRING,\n      TX_TYPE_TAG = _require.TX_TYPE_TAG;\n\nconst utils = require('../../../../caver-utils/src');\n\nconst Account = require('../../../../caver-account');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate)) throw new Error(\"Cannot decode to FeeDelegatedAccountUpdate. The prefix must be \".concat(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate, \": \").concat(rlpEncoded));\n  const typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  const _RLP$decode = RLP.decode(typeDettached),\n        _RLP$decode2 = _slicedToArray(_RLP$decode, 8),\n        nonce = _RLP$decode2[0],\n        gasPrice = _RLP$decode2[1],\n        gas = _RLP$decode2[2],\n        from = _RLP$decode2[3],\n        rlpEncodedKey = _RLP$decode2[4],\n        signatures = _RLP$decode2[5],\n        feePayer = _RLP$decode2[6],\n        feePayerSignatures = _RLP$decode2[7];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    rlpEncodedKey,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated account update transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedaccountupdate to see more detail.\n * @class\n */\n\n\nclass FeeDelegatedAccountUpdate extends AbstractFeeDelegatedTransaction {\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdate transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated account update transaction.\n   * @return {FeeDelegatedAccountUpdate}\n   */\n  static decode(rlpEncoded) {\n    const decoded = _decode(rlpEncoded);\n\n    decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey);\n    return new FeeDelegatedAccountUpdate(decoded);\n  }\n  /**\n   * Creates a fee delegated account update transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) {\n      createTxObj = _decode(createTxObj);\n      createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey);\n    }\n\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate, createTxObj);\n    this.account = createTxObj.account;\n  }\n  /**\n   * @type {Account}\n   */\n\n\n  get account() {\n    return this._account;\n  }\n\n  set account(acct) {\n    if (!(acct instanceof Account)) throw new Error(\"Invalid account. 'account' should be instance of 'Account'.\");\n    if (this.from.toLowerCase() !== acct.address.toLowerCase()) throw new Error(\"Transaction from address(\".concat(this.from.toLowerCase(), \") and account address(\").concat(acct.address, \") do not match.\"));\n    this._account = acct;\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey(), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey()]);\n  }\n\n}\n\nmodule.exports = FeeDelegatedAccountUpdate;","map":null,"metadata":{},"sourceType":"script"}