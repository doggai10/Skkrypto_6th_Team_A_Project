{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/react-dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst _require = require('../../transactionHelper/transactionHelper'),\n      TX_TYPE_STRING = _require.TX_TYPE_STRING;\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n\n  const _RLP$decode = RLP.decode(rlpEncoded),\n        _RLP$decode2 = _slicedToArray(_RLP$decode, 9),\n        nonce = _RLP$decode2[0],\n        gasPrice = _RLP$decode2[1],\n        gas = _RLP$decode2[2],\n        to = _RLP$decode2[3],\n        value = _RLP$decode2[4],\n        input = _RLP$decode2[5],\n        v = _RLP$decode2[6],\n        r = _RLP$decode2[7],\n        s = _RLP$decode2[8];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    input: utils.trimLeadingZero(input),\n    signatures: [v, r, s]\n  };\n}\n/**\n * Represents a legacy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction to see more detail.\n * @class\n */\n\n\nclass LegacyTransaction extends AbstractTransaction {\n  static decode(rlpEncoded) {\n    return new LegacyTransaction(_decode(rlpEncoded));\n  }\n  /**\n   * Creates a legacy transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    createTxObj.from = createTxObj.from || '0x';\n    super(TX_TYPE_STRING.TxTypeLegacyTransaction, createTxObj);\n    this.to = createTxObj.to || '0x';\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    this.input = createTxObj.input || createTxObj.data || '0x';\n    this.value = createTxObj.value || '0x0';\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (address !== '0x' && !utils.isAddress(address)) throw new Error(\"Invalid address \".concat(address));\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get data() {\n    return this._input;\n  }\n\n  set data(data) {\n    this._input = data;\n  }\n  /**\n   * Appends signatures array to transaction.\n   * Legacy transaction cannot have more than one signature, so an error occurs if the transaction already has a signature.\n   *\n   * @override\n   * @param {Array.<string>|Array.<Array.<string>>} sig - An array of signatures to append.\n   */\n\n\n  appendSignatures(sig) {\n    if (!utils.isEmptySig(this.signatures)) throw new Error(\"signatures already defined. \".concat(this.type, \" cannot include more than one signature. Please use tx.signatures = sigArr to replace.\"));\n\n    if (Array.isArray(sig[0])) {\n      if (sig.length > 1) throw new Error(\"signatures are too long. \".concat(this.type, \" cannot include more than one signature.\"));\n      sig = sig[0];\n    }\n\n    this.signatures = sig;\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    return RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, this.signatures.v, this.signatures.r, this.signatures.s]);\n  }\n  /**\n   * Returns RLP-encoded string for making signature\n   * @override\n   * @return {string}\n   */\n\n\n  getRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    if (this.chainId === undefined) throw new Error(\"chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.\");\n    return RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, Bytes.fromNat(this.chainId || '0x1'), '0x', '0x']);\n  }\n  /**\n   * LegacyTransaction does not have a common RLP encoding because no other type exists.\n   * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\n   *\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    return this.getRLPEncodingForSignature();\n  }\n\n}\n\nmodule.exports = LegacyTransaction;","map":null,"metadata":{},"sourceType":"script"}