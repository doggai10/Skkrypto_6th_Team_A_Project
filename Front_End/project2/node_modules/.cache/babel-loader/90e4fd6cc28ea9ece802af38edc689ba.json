{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedTransaction = require('./abstractFeeDelegatedTransaction');\n\nconst utils = require('../../../caver-utils/src');\n/**\n * Abstract class that implements common logic for each fee delegated with ratio transaction type.\n * @class\n */\n\n\nclass AbstractFeeDelegatedWithRatioTransaction extends AbstractFeeDelegatedTransaction {\n  /**\n   * Abstract class that implements common logic for each fee-delegated with ratio transaction type.\n   * In this constructor, feeRatio is set as transaction member variables.\n   *\n   * @constructor\n   * @param {string} typeString - The type string of transaction.\n   * @param {object} createTxObj - The parameters to create an instance of transaction.\n   */\n  constructor(typeString, createTxObj) {\n    super(typeString, createTxObj);\n    this.feeRatio = createTxObj.feeRatio;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get feeRatio() {\n    return this._feeRatio;\n  }\n\n  set feeRatio(fr) {\n    if (!_.isNumber(fr) && !utils.isHex(fr)) throw new Error(`Invalid type fo feeRatio: feeRatio should be number type or hex number string.`);\n    if (utils.hexToNumber(fr) <= 0 || utils.hexToNumber(fr) >= 100) throw new Error(`Invalid feeRatio: feeRatio is out of range. [1, 99]`);\n    this._feeRatio = utils.numberToHex(fr);\n  }\n\n}\n\nmodule.exports = AbstractFeeDelegatedWithRatioTransaction;","map":null,"metadata":{},"sourceType":"script"}