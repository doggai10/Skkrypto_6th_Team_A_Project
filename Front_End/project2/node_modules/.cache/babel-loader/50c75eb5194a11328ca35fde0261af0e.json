{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Modified hard-coded new Method({ ... }) array structure by exporting it to caver-rtm(rpcCalls). 2018-07\n */\nconst core = require('../../caver-core');\n\nconst _require = require('../../caver-core-helpers'),\n      formatters = _require.formatters;\n\nconst Subscriptions = require('../../caver-core-subscriptions').subscriptions;\n\nconst Method = require('../../caver-core-method');\n\nconst utils = require('../../caver-utils');\n\nconst Net = require('../../caver-net');\n\nconst _ = require('underscore');\n\nconst Personal = require('../caver-klay-personal');\n\nconst BaseContract = require('../caver-klay-contract');\n\nconst Accounts = require('../caver-klay-accounts');\n\nconst abi = require('../caver-klay-abi');\n\nconst getNetworkType = require('./getNetworkType.js');\n\nconst rpcCalls = require('../../caver-rtm');\n\nvar Klay = function Klay(...args) {\n  var _this = this; // sets _requestmanager\n\n  /**\n   * requestmanager를 붙여준다.\n   */\n\n\n  core.packageInit(this, args); // overwrite setProvider\n\n  var setProvider = this.setProvider;\n\n  this.setProvider = function () {\n    setProvider.apply(_this, args);\n\n    _this.net.setProvider.apply(_this, args);\n\n    _this.personal.setProvider.apply(_this, args);\n\n    _this.accounts.setProvider.apply(_this, args);\n\n    _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n  };\n  /**\n   * defaultAccount, defaultBlock 값 초기화 해준다. caver-klay-personal에서 해주는 행위와\n   * 동일하다.\n   */\n\n\n  var defaultAccount = null;\n  var defaultBlock = 'latest';\n  Object.defineProperty(this, 'defaultAccount', {\n    get: function () {\n      return defaultAccount;\n    },\n    set: function (val) {\n      if (val) {\n        defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));\n      } // also set on the Contract object\n\n\n      _this.Contract.defaultAccount = defaultAccount;\n      _this.personal.defaultAccount = defaultAccount; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultAccount = defaultAccount;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultBlock', {\n    get: function () {\n      return defaultBlock;\n    },\n    set: function (val) {\n      if (!utils.isValidBlockNumberCandidate(val)) {\n        throw new Error('Invalid default block number.');\n        return;\n      }\n\n      defaultBlock = val; // also set on the Contract object\n\n      _this.Contract.defaultBlock = defaultBlock;\n      _this.personal.defaultBlock = defaultBlock; // update defaultBlock\n\n      methods.forEach(function (method) {\n        method.defaultBlock = defaultBlock;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  /**\n   * requestManager에 있는 clearSubscription을 달아준다.\n   */\n\n  this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n  /**\n   * caver-klay도 꽤 큰 패키지들을 달고 있기 때문에\n   * Net, Accounts, Personal, Contract, Iban, ABI 다 달아준다.\n   */\n  // add net\n\n  this.net = new Net(this.currentProvider); // add chain detection\n\n  this.net.getNetworkType = getNetworkType.bind(this); // add accounts\n\n  this.accounts = new Accounts(this.currentProvider); // add personal\n\n  this.personal = new Personal(this.currentProvider);\n  this.personal.defaultAccount = this.defaultAccount; // create a proxy Contract type for this instance, as a Contract's provider\n  // is stored as a class member rather than an instance variable. If we do\n  // not create this proxy type, changing the provider in one instance of\n  // caver-klay would subsequently change the provider for _all_ contract\n  // instances!\n\n  var Contract = function Contract() {\n    BaseContract.apply(this, arguments);\n  };\n\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  }; // make our proxy Contract inherit from caver-klay-contract so that it has all\n  // the right functionality and so that instanceof and friends work properly\n\n\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract; // add contract\n\n  this.Contract = Contract;\n  this.Contract.defaultAccount = this.defaultAccount;\n  this.Contract.defaultBlock = this.defaultBlock;\n  this.Contract.setProvider(this.currentProvider, this.accounts); // add IBAN\n\n  this.Iban = utils.Iban; // add ABI\n\n  this.abi = abi;\n  /**\n   * JSON rpc 콜 메서드들을 다 달아준다.\n   */\n\n  var methods = [...rpcCalls.map(item => new Method(item)), // subscriptions\n  new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        // TODO rename on RPC side?\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatters.outputBlockFormatter\n      },\n      'pendingTransactions': {\n        subscriptionName: 'newPendingTransactions',\n        // replace subscription with this name\n        params: 0\n      },\n      'logs': {\n        params: 1,\n        inputFormatter: [formatters.inputLogFormatter],\n        outputFormatter: formatters.outputLogFormatter,\n        // DUBLICATE, also in caver-klay-contract\n        subscriptionHandler: function (output) {\n          this.emit('data', output);\n          if (_.isFunction(this.callback)) this.callback(null, output, this);\n        }\n      },\n      'syncing': {\n        params: 0,\n        outputFormatter: formatters.outputSyncingFormatter,\n        subscriptionHandler: function (output) {\n          var _this = this; // fire TRUE at start\n\n\n          if (this._isSyncing !== true) {\n            this._isSyncing = true;\n            this.emit('changed', _this._isSyncing);\n\n            if (_.isFunction(this.callback)) {\n              this.callback(null, _this._isSyncing, this);\n            }\n\n            setTimeout(function () {\n              _this.emit('data', output);\n\n              if (_.isFunction(_this.callback)) {\n                _this.callback(null, output, _this);\n              }\n            }, 0); // fire sync status\n          } else {\n            this.emit('data', output);\n\n            if (_.isFunction(_this.callback)) {\n              this.callback(null, output, this);\n            } // wait for some time before fireing the FALSE\n\n\n            clearTimeout(this._isSyncingTimeout);\n            this._isSyncingTimeout = setTimeout(function () {\n              if (output.currentBlock > output.highestBlock - 200) {\n                _this._isSyncing = false;\n\n                _this.emit('changed', _this._isSyncing);\n\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, _this._isSyncing, _this);\n                }\n              }\n            }, 500);\n          }\n        }\n      }\n    }\n  })];\n  /**\n   * methods를 돌면서 이 instance(caver.klay)에 붙여준다.\n   */\n\n  methods.forEach(function (method) {\n    method.attachToObject(_this); // second param means is klay.accounts (necessary for wallet signing)\n\n    method.setRequestManager(_this._requestManager, _this.accounts);\n    method.defaultBlock = _this.defaultBlock;\n    method.defaultAccount = _this.defaultAccount;\n  });\n};\n\nmodule.exports = Klay;","map":null,"metadata":{},"sourceType":"script"}