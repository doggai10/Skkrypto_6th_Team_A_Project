{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst Subscription = require('./subscription.js');\n/**\n * Subscriptions constructor\n * Subscriptions instance를 만드는 constructor로, options를 parameter로 받아서\n * name, type, subscriptions를 options에 있는 값으로 초기화해준다.\n * requestManager는 null로 초기화 해준다. (추 후에 setRequestManager를 통해 값 설정됨.)\n */\n\n\nfunction Subscriptions(options) {\n  this.name = options.name;\n  this.type = options.type;\n  this.subscriptions = options.subscriptions || {};\n  this.requestManager = null;\n}\n\n;\n/**\n * setRequestManager\n * requestManager를 Subscriptions instance에 붙여준다.\n */\n\nSubscriptions.prototype.setRequestManager = function (requestManager) {\n  this.requestManager = requestManager;\n};\n/**\n * attachToObject\n * buildCall 메서드를 통해 생긴 함수를 parameter로 들어온 object에 attach 해준다.\n */\n\n\nSubscriptions.prototype.attachToObject = function (obj) {\n  var func = this.buildCall();\n  /**\n   * Subscriptions instantiate 할 때 options에 들어온 name을 보통\n   * new CaverSubscriptions({\n   *       name: 'subscribe',\n   *      type: 'eth',\n   *      subscriptions: {\n   *          'newBlockHeaders': {\n   *              subscriptionName: 'newHeads',\n   *              params: 0,\n   *              outputFormatter: formatters.outputBlockFormatter\n   *          },\n   *          'pendingTransactions': {\n   *              params: 0,\n   *              outputFormatter: formatters.outputTransactionFormatter\n   *          }\n   *      }\n   *  })\n     이런 식으로 주는데, name에 'xxx.subscribe' 이런식으로 붙을 때 split 해서\n     parameter로 들어온 obj에 붙이는 작업을 해준다.\n     그러면 obj.xxx.subscribe 에 값이 들어가게 된다.\n     참고) Javascript object는 reference type이라서 object에 바로 property 붙여주면\n          실제 그 reference에 붙음.\n   */\n\n  var name = this.name.split('.');\n\n  if (name.length > 1) {\n    obj[name[0]] = obj[name[0]] || {};\n    obj[name[0]][name[1]] = func;\n  } else {\n    obj[name[0]] = func;\n  }\n};\n/**\n * buildCall\n * subscription instance를 만드는 함수를 리턴해주는 함수이다.\n * 참고) 함수를 리턴해주는 함수는 Javascript 내에서 빈번히 쓰이는 패턴이다.\n * 링크 공유 : https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a\n */\n\n\nSubscriptions.prototype.buildCall = function () {\n  var _this = this;\n\n  return function () {\n    /**\n     * Subscriptions instance 만드는 과정에 subscriptions라는 object를 붙여주는데,\n     * 보통\n     *            subscriptions: {\n     *               'newBlockHeaders': {\n     *                   subscriptionName: 'newHeads',\n     *                   params: 0,\n     *                   outputFormatter: formatters.outputBlockFormatter\n     *              },\n     *               'pendingTransactions': {\n     *                   params: 0,\n     *                   outputFormatter: formatters.outputTransactionFormatter\n     *              }\n     * 이런식으로 붙게 되는데, buildCall() 을 부르면서 argument를 따로 넣어준 경우에,\n     * subscriptions property에 해당하는 값이 없다면 console.warn으로 경고만 준다.\n     * (에러는 아니어서 어쨌든 subscribe는 함.)\n     */\n    if (!_this.subscriptions[arguments[0]]) {\n      console.warn('Subscription ' + JSON.stringify(arguments[0]) + ' doesn\\'t exist. Subscribing anyway.');\n    }\n    /**\n     * subscription.js 에 정의되어 있는 Subscription을 instantiate 함.\n     * subscription, requestManager, type을 세팅해준다.\n     * 여기서 말하는 type은 'eth' 같은 string이다.\n     * 참고) buildCall을 부를 때, 따로 인자가 들어왔다면 arguments[0]에 값이 들어있을텐데,\n     * 그게 없는 경우에도 Subscription을 instantiate하는데에는 무리가 없어보인다.\n     * (위에서도 console.warn을 해주었으니.)\n     */\n\n\n    var subscription = new Subscription({\n      subscription: _this.subscriptions[arguments[0]],\n      requestManager: _this.requestManager,\n      type: _this.type\n    });\n    /**\n     * subscription.js에 정의되어있는 subscribe 함수를 실행하되, buildCall을 부를 때\n     * argument로 준 인자들(arguments)을 주어서 실행한다.\n     */\n\n    return subscription.subscribe.apply(subscription, arguments);\n  };\n};\n\nmodule.exports = {\n  subscriptions: Subscriptions,\n  subscription: Subscription\n};","map":null,"metadata":{},"sourceType":"script"}