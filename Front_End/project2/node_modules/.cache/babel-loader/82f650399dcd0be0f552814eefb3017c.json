{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/react-dapp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file utils.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nvar _ = require('underscore');\n\nvar BN = require('bn.js');\n\nvar numberToBN = require('number-to-bn');\n\nvar utf8 = require('utf8');\n\nvar Hash = require(\"eth-lib/lib/hash\");\n\nconst RLP = require(\"eth-lib/lib/rlp\");\n\nconst Account = require(\"eth-lib/lib/account\");\n/**\n * Returns true if object is BN, otherwise false\n *\n * @method isBN\n * @param {Object} object\n * @return {Boolean}\n */\n\n\nvar isBN = function (object) {\n  return object instanceof BN || object && object.constructor && object.constructor.name === 'BN';\n};\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object} object\n * @return {Boolean}\n */\n\n\nconst isBigNumber = object => object && object.constructor && object.constructor.name === 'BigNumber';\n/**\n * Takes an input and transforms it into an BN\n *\n * @method toBN\n * @param {Number|String|BN} number, string, HEX string or BN\n * @return {BN} BN\n */\n\n\nfunction toBN(number) {\n  try {\n    return numberToBN.apply(null, arguments);\n  } catch (e) {\n    throw new Error(e + ' Given value: \"' + number + '\"');\n  }\n}\n/**\n * Takes and input transforms it into BN and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BN} number\n * @return {String}\n */\n\n\nvar toTwosComplement = function (number) {\n  return '0x' + toBN(number).toTwos(256).toString(16, 64);\n};\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\n\n\nvar isAddress = function (address) {\n  // check if it has the basic requirements of an address\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false; // If it's ALL lowercase or ALL upppercase\n  } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n    return true; // Otherwise check each case\n  } else {\n    return checkAddressChecksum(address);\n  }\n};\n/**\n * Checks if the given string is a checksummed address\n *\n * @method checkAddressChecksum\n * @param {String} address the given HEX address\n * @return {Boolean}\n */\n\n\nvar checkAddressChecksum = function (address) {\n  // Check each case\n  address = address.replace(/^0x/i, '');\n  var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');\n\n  for (var i = 0; i < 40; i++) {\n    // the nth letter should be uppercase if the nth digit of casemap is 1\n    if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\n\nvar leftPad = function (string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : \"0\") + string;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} string to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\n\nvar rightPad = function (string, chars, sign) {\n  var hasPrefix = /^0x/i.test(string) || typeof string === 'number';\n  string = string.toString(16).replace(/^0x/i, '');\n  var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + string + new Array(padding).join(sign ? sign : \"0\");\n};\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method utf8ToHex\n * @param {String} str\n * @returns {String} hex representation of input string\n */\n\n\nvar utf8ToHex = function (str) {\n  str = utf8.encode(str);\n  var hex = \"\"; // remove \\u0000 padding from either side\n\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split(\"\").reverse().join(\"\");\n  str = str.replace(/^(?:\\u0000)*/, '');\n  str = str.split(\"\").reverse().join(\"\");\n\n  for (var i = 0; i < str.length; i++) {\n    var code = str.charCodeAt(i); // if (code !== 0) {\n\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n; // }\n  }\n\n  return \"0x\" + hex;\n};\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method hexToUtf8\n * @param {String} hex\n * @returns {String} ascii string representation of hex value\n */\n\n\nvar hexToUtf8 = function (hex) {\n  if (!isHexStrict(hex)) throw new Error('The parameter \"' + hex + '\" must be a valid HEX string.');\n  var str = \"\";\n  var code = 0;\n  hex = hex.replace(/^0x/i, ''); // remove 00 padding from either side\n\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split(\"\").reverse().join(\"\");\n  hex = hex.replace(/^(?:00)*/, '');\n  hex = hex.split(\"\").reverse().join(\"\");\n  var l = hex.length;\n\n  for (var i = 0; i < l; i += 2) {\n    code = parseInt(hex.substr(i, 2), 16); // if (code !== 0) {\n\n    str += String.fromCharCode(code); // }\n  }\n\n  return utf8.decode(str);\n};\n/**\n * Converts value to it's number representation\n *\n * @method hexToNumber\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nvar hexToNumber = function (value) {\n  if (!value) return value;\n  return toBN(value).toNumber();\n};\n/**\n * Converts value to it's decimal representation in string\n *\n * @method hexToNumberString\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nvar hexToNumberString = function (value) {\n  if (!value) return value;\n  return toBN(value).toString(10);\n};\n/**\n * Converts value to it's hex representation\n *\n * @method numberToHex\n * @param {String|Number|BN} value\n * @return {String}\n */\n\n\nvar numberToHex = function (value) {\n  if (_.isNull(value) || _.isUndefined(value)) {\n    return value;\n  }\n\n  if (!isFinite(value) && !isHexStrict(value)) {\n    throw new Error('Given input \"' + value + '\" is not a number.');\n  }\n\n  var number = toBN(value);\n  var result = number.toString(16);\n  return number.lt(new BN(0)) ? '-0x' + result.substr(1) : '0x' + result;\n};\n/**\n * Convert a byte array to a hex string\n *\n * Note: Implementation from crypto-js\n *\n * @method bytesToHex\n * @param {Array} bytes\n * @return {String} the hex string\n */\n\n\nvar bytesToHex = function (bytes) {\n  for (var hex = [], i = 0; i < bytes.length; i++) {\n    // eslint-disable-next-line no-bitwise\n    hex.push((bytes[i] >>> 4).toString(16)); // eslint-disable-next-line no-bitwise\n\n    hex.push((bytes[i] & 0xF).toString(16));\n  }\n\n  return '0x' + hex.join(\"\");\n};\n/**\n * Convert a hex string to a byte array\n *\n * Note: Implementation from crypto-js\n *\n * @method hexToBytes\n * @param {string} hex\n * @return {Array} the byte array\n */\n\n\nvar hexToBytes = function (hex) {\n  hex = hex.toString(16);\n\n  if (!isHexStrict(hex)) {\n    throw new Error('Given value \"' + hex + '\" is not a valid hex string.');\n  }\n\n  hex = hex.replace(/^0x/i, '');\n\n  for (var bytes = [], c = 0; c < hex.length; c += 2) bytes.push(parseInt(hex.substr(c, 2), 16));\n\n  return bytes;\n};\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BN|Object} value\n * @param {Boolean} returnType\n * @return {String}\n */\n\n/* eslint-disable complexity */\n\n\nvar toHex = function (value, returnType) {\n  if (isAddress(value)) {\n    return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');\n  }\n\n  if (_.isBoolean(value)) {\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n\n  if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {\n    return returnType ? 'string' : utf8ToHex(JSON.stringify(value));\n  } // if its a negative number, pass it through numberToHex\n\n\n  if (_.isString(value)) {\n    if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n      return returnType ? 'int256' : numberToHex(value);\n    } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n      return returnType ? 'bytes' : value;\n    } else if (!isFinite(value)) {\n      return returnType ? 'string' : utf8ToHex(value);\n    }\n  }\n\n  return returnType ? value < 0 ? 'int256' : 'uint256' : numberToHex(value);\n};\n/* eslint-enable complexity */\n\n/**\n * Check if string is HEX, requires a 0x in front\n *\n * @method isHexStrict\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\n\n\nvar isHexStrict = function (hex) {\n  return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n/**\n * Check if string is HEX\n *\n * @method isHex\n * @param {String} hex to be checked\n * @returns {Boolean}\n */\n\n\nvar isHex = function (hex) {\n  return (_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n};\n/**\n * Returns true if given string is a valid Klaytn block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\n\n\nvar isBloom = function (bloom) {\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if given string is a valid log topic.\n *\n * TODO UNDOCUMENTED\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\n\n\nvar isTopic = function (topic) {\n  if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst parsePredefinedBlockNumber = blockNumber => {\n  switch (blockNumber) {\n    case 'genesis':\n    case 'earliest':\n      return '0x0';\n\n    default:\n      return blockNumber;\n  }\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n  return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest' || blockNumber === 'genesis';\n};\n/**\n * valid block number should be one of a type below:\n * 1) predefined block number ex:) 'latest', 'earliest', 'pending', 'genesis'\n * 2) hex\n * 3) finite number\n * @param  {String | Number}  blockNumber\n * @return {Boolean}\n */\n\n\nvar isValidBlockNumberCandidate = blockNumber => {\n  return isPredefinedBlockNumber(blockNumber) || isHexStrict(blockNumber) || Number.isFinite(Number(blockNumber));\n};\n/**\n * Hashes values to a sha3 hash using keccak 256\n *\n * To hash a HEX string the hex must have 0x in front.\n *\n * @method sha3\n * @return {String} the sha3 string\n */\n\n\nvar SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\nvar sha3 = function (value) {\n  // return null when value is not string type.\n  if (typeof value === 'number') return null;\n\n  if (isHexStrict(value) && /^0x/i.test(value.toString())) {\n    value = hexToBytes(value);\n  }\n\n  if (isBN(value)) {\n    value = value.toString(10);\n  }\n\n  var returnValue = Hash.keccak256(value);\n\n  if (returnValue === SHA3_NULL_S) {\n    return null;\n  } else {\n    return returnValue;\n  }\n}; // expose the under the hood keccak256\n\n\nsha3._Hash = Hash;\n\nfunction isValidPrivateKey(privateKey) {\n  if (typeof privateKey !== 'string') return false;\n  const has0xPrefix = privateKey.slice(0, 2) === '0x';\n  privateKey = has0xPrefix ? privateKey.slice(2) : privateKey; // Private key validation 1: private key should be string and minimum length of it is 64.\n\n  if (privateKey.length !== 64 || !isHex(privateKey)) return false; // order n value in secp256k1. privateKey should be less than order n value.\n\n  const VALID_PRIVATE_KEY_LIMIT = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141';\n  return privateKey.toUpperCase() < VALID_PRIVATE_KEY_LIMIT;\n} // Check is 1)Number string or 2)Hex string or 3)Number.\n\n\nfunction isValidNSHSN(value) {\n  switch (typeof value) {\n    case 'number':\n      if (value < 0) return false;\n      break;\n\n    case 'string':\n      if (Number(value) != value && !utils.isHexStrict(value)) return false;\n      break;\n\n    default:\n      return false;\n  }\n\n  return true;\n}\n\nconst rlpEncode = data => RLP.encode(data);\n\nconst rlpDecode = encodedData => RLP.decode(encodedData);\n\nconst xyPointFromPublicKey = publicKey => {\n  publicKey = publicKey.replace('0x', '');\n  if (publicKey.length !== 128) throw Error('Invalid public key'); // + 2 means '0x'\n\n  const pubX = '0x' + publicKey.slice(0, 64);\n  const pubY = '0x' + publicKey.slice(64);\n  return [pubX, pubY];\n};\n\nconst isHumanReadableString = humanReadableString => {\n  return !isHex(humanReadableString);\n};\n\nconst humanReadableStringToHexAddress = humanReadableString => {\n  const addressLength = 40; // 20 bytes\n\n  let hex = utf8ToHex(humanReadableString);\n  if (hex.length > 40 + 2) throw Error(\"Invalid human readable account length! It should be less than 20 bytes: \".concat(hex));\n  hex = rightPad(hex, addressLength);\n  return hex;\n};\n\nvar trimLeadingZero = function (hex) {\n  while (hex && hex.startsWith('0x0')) {\n    hex = '0x' + hex.slice(3);\n  }\n\n  return hex;\n};\n/**\n * hex string이 2로 나누어떨어지지 않으면 앞에 '0x'를 '0x0'으로 바꿔서\n * 2로 나누어떨어지게끔 해주는 함수이다.\n */\n\n\nvar makeEven = function (hex) {\n  if (hex.length % 2 === 1) {\n    hex = hex.replace('0x', '0x0');\n  }\n\n  return hex;\n};\n\nconst resolveSignature = signature => {\n  if (_.isArray(signature)) {\n    const _signature = _slicedToArray(signature, 3),\n          v = _signature[0],\n          r = _signature[1],\n          s = _signature[2];\n\n    return [v, r, s];\n  }\n\n  if (_.isObject(signature)) {\n    const v = signature.v,\n          r = signature.r,\n          s = signature.s;\n    if (!v || !r || !s) throw new Error('v, r, s fields should exist in signature');\n    return [v, r, s];\n  }\n\n  if (_.isString(signature)) {\n    const v = '0x' + signature.slice(64 * 2 + 2);\n\n    const _Account$decodeSignat = Account.decodeSignature(signature),\n          _Account$decodeSignat2 = _slicedToArray(_Account$decodeSignat, 3),\n          _ = _Account$decodeSignat2[0],\n          r = _Account$decodeSignat2[1],\n          s = _Account$decodeSignat2[2];\n\n    return [v, r, s];\n  }\n};\n\nmodule.exports = {\n  BN: BN,\n  isBN: isBN,\n  isBigNumber: isBigNumber,\n  toBN: toBN,\n  isAddress: isAddress,\n  isBloom: isBloom,\n  // TODO UNDOCUMENTED\n  isTopic: isTopic,\n  // TODO UNDOCUMENTED\n  checkAddressChecksum: checkAddressChecksum,\n  utf8ToHex: utf8ToHex,\n  hexToUtf8: hexToUtf8,\n  hexToNumber: hexToNumber,\n  hexToNumberString: hexToNumberString,\n  numberToHex: numberToHex,\n  toHex: toHex,\n  hexToBytes: hexToBytes,\n  bytesToHex: bytesToHex,\n  isHex: isHex,\n  isHexStrict: isHexStrict,\n  leftPad: leftPad,\n  rightPad: rightPad,\n  toTwosComplement: toTwosComplement,\n  sha3: sha3,\n  parsePredefinedBlockNumber: parsePredefinedBlockNumber,\n  isPredefinedBlockNumber: isPredefinedBlockNumber,\n  isValidBlockNumberCandidate: isValidBlockNumberCandidate,\n  isValidPrivateKey: isValidPrivateKey,\n  isValidNSHSN: isValidNSHSN,\n  rlpEncode: rlpEncode,\n  rlpDecode: rlpDecode,\n  xyPointFromPublicKey: xyPointFromPublicKey,\n  isHumanReadableString: isHumanReadableString,\n  humanReadableStringToHexAddress: humanReadableStringToHexAddress,\n  resolveSignature: resolveSignature,\n  trimLeadingZero,\n  makeEven\n};","map":null,"metadata":{},"sourceType":"script"}