{"ast":null,"code":"function randomHex(size, callback) {\n  const crypto = require('./crypto.js');\n\n  const isCallback = typeof callback === 'function';\n\n  if (size < 0 || size > 65536) {\n    if (isCallback) {\n      callback(new Error('Invalid size: It must be >=0 && <= 65536'));\n    } else {\n      throw new Error('Invalid size: It must be >=0 && <= 65536');\n    }\n  } // If environment is in node\n\n\n  if (typeof crypto !== 'undefined' && crypto.randomBytes) {\n    if (isCallback) {\n      crypto.randomBytes(size, (err, result) => {\n        if (!err) {\n          callback(null, '0x' + result.toString('hex'));\n        } else {\n          callback(error);\n        }\n      });\n    } else {\n      return '0x' + crypto.randomBytes(size).toString('hex');\n    } // If environment is in browser\n\n  } else {\n    let cryptoLib;\n\n    if (typeof crypto !== 'undefined') {\n      cryptoLib = crypto;\n    } else if (typeof msCrypto !== 'undefined') {\n      cryptoLib = msCrypto;\n    }\n\n    if (cryptoLib && cryptoLib.getRandomValues) {\n      const randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));\n      const returnValue = '0x' + Array.from(randomBytes).map(arr => arr.toString(16)).join('');\n\n      if (isCallback) {\n        callback(null, returnValue);\n      } else {\n        return returnValue;\n      } // crypto object is missing in browser.\n\n    } else {\n      const error = new Error('\"crypto\" object does not exist. This Browser does not support generating secure random bytes.');\n\n      if (isCallback) {\n        callback(error);\n      } else {\n        throw error;\n      }\n    }\n  }\n}\n\nmodule.exports = randomHex;","map":null,"metadata":{},"sourceType":"script"}