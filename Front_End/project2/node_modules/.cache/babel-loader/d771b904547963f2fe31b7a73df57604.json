{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Hash = require('eth-lib/lib/hash');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst TransactionHasher = require('../transactionHasher/transactionHasher');\n\nconst AbstractTransaction = require('./abstractTransaction');\n\nconst {\n  refineSignatures,\n  typeDetectionFromRLPEncoding\n} = require('../transactionHelper/transactionHelper');\n\nconst Keyring = require('../../../caver-wallet/src/keyring/keyringFactory');\n\nconst AbstractKeyring = require('../../../caver-wallet/src/keyring/abstractKeyring');\n\nconst {\n  KEY_ROLE\n} = require('../../../caver-wallet/src/keyring/keyringHelper');\n\nconst utils = require('../../../caver-utils/src');\n\nconst SignatureData = require('../../../caver-wallet/src/keyring/signatureData');\n/**\n * Abstract class that implements common logic for each fee delegated transaction type.\n * @class\n */\n\n\nclass AbstractFeeDelegatedTransaction extends AbstractTransaction {\n  /**\n   * Abstract class that implements common logic for each fee-delegated transaction type.\n   * In this constructor, feePayer and feePayerSignatures are set as transaction member variables.\n   *\n   * @constructor\n   * @param {string} typeString - The type string of transaction.\n   * @param {object} createTxObj - The parameters to create an instance of transaction.\n   */\n  constructor(typeString, createTxObj) {\n    super(typeString, createTxObj);\n    this.feePayer = createTxObj.feePayer;\n    this.feePayerSignatures = createTxObj.feePayerSignatures || [];\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get feePayer() {\n    return this._feePayer;\n  }\n\n  set feePayer(f) {\n    if (f === undefined) f = '0x';\n    if (f !== '0x' && !utils.isAddress(f)) throw new Error(`Invalid address of fee payer: ${f}`);\n    this._feePayer = f.toLowerCase();\n  }\n  /**\n   * @type {Array.<Array.<string>>}\n   */\n\n\n  get feePayerSignatures() {\n    return this._feePayerSignatures;\n  }\n\n  set feePayerSignatures(sigs) {\n    this._feePayerSignatures = refineSignatures(sigs);\n  }\n  /**\n   * Signs to the transaction with private key(s) in `key` as a fee payer.\n   * @async\n   * @param {Keyring|string} key - The instance of Keyring, private key string or KlaytnWalletKey string.\n   * @param {number} [index] - The index of private key to use. If index is undefined, all private keys in keyring will be used.\n   * @param {function} [hasher] - The function to get the transaction hash.\n   * @return {Transaction}\n   */\n\n\n  async signAsFeePayer(key, index, hasher = TransactionHasher.getHashForFeePayerSignature) {\n    // User parameter input cases\n    // (key) / (key index) / (key hasher) / (key index hasher)\n    if (_.isFunction(index)) {\n      hasher = index;\n      index = undefined;\n    }\n\n    let keyring = key;\n\n    if (_.isString(key)) {\n      keyring = Keyring.createFromPrivateKey(key);\n    }\n\n    if (!(keyring instanceof AbstractKeyring)) throw new Error(`Unsupported key type. The key parameter of the signAsFeePayer must be a single private key string, KlaytnWalletKey string, or Keyring instance.`);\n    if (!this.feePayer || this.feePayer === '0x') this.feePayer = keyring.address;\n    if (this.feePayer.toLowerCase() !== keyring.address.toLowerCase()) throw new Error(`The feePayer address of the transaction is different with the address of the keyring to use.`);\n    await this.fillTransaction();\n    const hash = hasher(this);\n    const sig = keyring.sign(hash, this.chainId, KEY_ROLE.roleFeePayerKey, index);\n    this.appendFeePayerSignatures(sig);\n    return this;\n  }\n  /**\n   * Appends feePayerSignatures to the transaction.\n   *\n   * @param {SignatureData|Array.<SignatureData>|Array.<string>|Array.<Array.<string>>} signatures - An array of feePayerSignatures to append to the transaction.\n   *                                                      One feePayerSignature can be defined in the form of a one-dimensional array or two-dimensional array,\n   *                                                      and more than one feePayerSignatures should be defined in the form of a two-dimensional array.\n   */\n\n\n  appendFeePayerSignatures(signatures) {\n    let sig = signatures;\n    if (_.isString(sig)) sig = utils.resolveSignature(sig);\n    if (sig instanceof SignatureData) sig = [sig];\n    if (!_.isArray(sig)) throw new Error(`Failed to append signatures: invalid signatures format ${sig}`);\n    if (_.isString(sig[0])) sig = [sig];\n    this.feePayerSignatures = this.feePayerSignatures.concat(sig);\n  }\n  /**\n   * Combines RLP-encoded transactions (rawTransaction) to the transaction from RLP-encoded transaction strings and returns a single transaction with all signatures combined.\n   * When combining the signatures into a transaction instance,\n   * an error is thrown if the decoded transaction contains different value except signatures.\n   *\n   * @param {Array.<string>} rlpEncodedTxs - An array of RLP-encoded transaction strings.\n   * @return {string}\n   */\n\n\n  combineSignedRawTransactions(rlpEncodedTxs) {\n    if (!_.isArray(rlpEncodedTxs)) throw new Error(`The parameter must be an array of RLP encoded transaction strings.`); // If the signatures are empty, there may be an undefined member variable.\n    // In this case, the empty information is filled with the decoded result.\n\n    let fillVariables = false;\n    if (utils.isEmptySig(this.signatures) || utils.isEmptySig(this.feePayerSignatures)) fillVariables = true;\n\n    for (const encoded of rlpEncodedTxs) {\n      const type = typeDetectionFromRLPEncoding(encoded);\n      if (this.type !== type) throw new Error(`Transaction type mismatch: Signatures from different transactions cannot be combined.`);\n      const decoded = this.constructor.decode(encoded); // Signatures can only be combined for the same transaction.\n      // Therefore, compare whether the decoded transaction is the same as this.\n\n      for (const k in decoded) {\n        if (k === '_signatures' || k === '_feePayerSignatures') continue;\n\n        if (k === '_feePayer') {\n          if ((decoded[k] !== '0x' || this[k] === '0x') && fillVariables) this[k] = decoded[k];\n          if (decoded[k] === '0x') continue;\n        }\n\n        if (this[k] === undefined && fillVariables) this[k] = decoded[k];\n        const differentTxError = `Transactions containing different information cannot be combined.`; // Compare with the RLP-encoded accountKey string, because 'account' is an object.\n\n        if (k === '_account') {\n          if (this[k].getRLPEncodingAccountKey() !== decoded[k].getRLPEncodingAccountKey()) throw new Error(differentTxError);\n          continue;\n        }\n\n        if (this[k] !== decoded[k]) throw new Error(differentTxError);\n      }\n\n      this.appendSignatures(decoded.signatures);\n      this.appendFeePayerSignatures(decoded.feePayerSignatures);\n    }\n\n    return this.getRLPEncoding();\n  }\n  /**\n   * Returns a senderTxHash of transaction\n   *\n   * @return {string}\n   */\n\n\n  getSenderTxHash() {\n    const rlpEncoded = this.getRLPEncoding();\n    const type = rlpEncoded.slice(0, 4);\n    const typeDetached = `0x${rlpEncoded.slice(4)}`;\n    const data = RLP.decode(typeDetached);\n    return Hash.keccak256(type + RLP.encode(data.slice(0, data.length - 2)).slice(2));\n  }\n  /**\n   * Returns an RLP-encoded transaction string for making signature as a fee payer\n   *\n   * @return {string}\n   */\n\n\n  getRLPEncodingForFeePayerSignature() {\n    return RLP.encode([this.getCommonRLPEncodingForSignature(), this.feePayer, Bytes.fromNat(this.chainId), '0x', '0x']);\n  }\n\n}\n\nmodule.exports = AbstractFeeDelegatedTransaction;","map":null,"metadata":{},"sourceType":"script"}