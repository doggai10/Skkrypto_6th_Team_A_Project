{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/react-dapp/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst WeightedPublicKey = require('./weightedPublicKey');\n\nconst utils = require('../../../caver-utils');\n\nconst _require = require('./accountKeyHelper'),\n      ACCOUNT_KEY_TAG = _require.ACCOUNT_KEY_TAG,\n      fillWeightedMultiSigOptionsForMultiSig = _require.fillWeightedMultiSigOptionsForMultiSig;\n/**\n * Representing an AccountKeyWeightedMultiSig.\n * @class\n */\n\n\nclass AccountKeyWeightedMultiSig {\n  /**\n   * Decodes an RLP-encoded AccountKeyWeightedMultiSig string.\n   * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyWeightedMultiSig string.\n   * @return {AccountKeyWeightedMultiSig}\n   */\n  static decode(rlpEncodedKey) {\n    rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n    if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) throw new Error(\"Cannot decode to AccountKeyWeightedMultiSig. The prefix must be \".concat(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG, \": \").concat(rlpEncodedKey));\n\n    const _RLP$decode = RLP.decode(\"0x\".concat(rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length))),\n          _RLP$decode2 = _slicedToArray(_RLP$decode, 2),\n          threshold = _RLP$decode2[0],\n          multiSigkeys = _RLP$decode2[1];\n\n    const weightedPublicKeys = multiSigkeys.map(weightedPublicKey => {\n      return new WeightedPublicKey(weightedPublicKey[0], weightedPublicKey[1]);\n    });\n    return new AccountKeyWeightedMultiSig(threshold, weightedPublicKeys);\n  }\n  /**\n   * Creates an instance of AccountKeyWeighedMultiSig.\n   * @param {Array.<string>} publicKeyArray - An array of public key strings.\n   * @param {WeightedMultiSigOptions|object} options - An options which defines threshold and weight.\n   * @return {AccountKeyWeightedMultiSig}\n   */\n\n\n  static fromPublicKeysAndOptions(publicKeyArray, options) {\n    options = fillWeightedMultiSigOptionsForMultiSig(publicKeyArray.length, options);\n\n    if (publicKeyArray.length !== options.weights.length) {\n      throw new Error(\"The length of public keys is not equal to the length of weight array.\");\n    }\n\n    const weightedPublicKeys = [];\n\n    for (let i = 0; i < publicKeyArray.length; i++) {\n      const weightedPublicKey = new WeightedPublicKey(options.weights[i], publicKeyArray[i]);\n      weightedPublicKeys.push(weightedPublicKey);\n    }\n\n    return new AccountKeyWeightedMultiSig(options.threshold, weightedPublicKeys);\n  }\n  /**\n   * Create an instance of AccountKeyWeightedMultiSig.\n   * @param {number} threshold - The threshold of accountKey.\n   * @param {Array.<WeightedPublicKey>} weightedPublicKeys - An array of instances of WeightedPublicKeys\n   */\n\n\n  constructor(threshold, weightedPublicKeys) {\n    this.threshold = threshold;\n    this.weightedPublicKeys = weightedPublicKeys || [];\n  }\n  /**\n   * @type {Number}\n   */\n\n\n  get threshold() {\n    return this._threshold;\n  }\n\n  set threshold(t) {\n    this._threshold = utils.hexToNumber(t);\n  }\n  /**\n   * @type {Array.<WeightedPublicKey>}\n   */\n\n\n  get weightedPublicKeys() {\n    return this._weightedPublicKeys;\n  }\n\n  set weightedPublicKeys(wps) {\n    for (const wp of wps) {\n      if (!(wp instanceof WeightedPublicKey)) throw new Error(\"Invalid type of weighted public keys.\");\n    }\n\n    this._weightedPublicKeys = wps;\n  }\n  /**\n   * Returns an RLP-encoded AccountKeyWeightedMultiSig string.\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    if (this.threshold === undefined) throw new Error('threshold should be specified for a multisig account');\n    if (this.weightedPublicKeys.length === 0) throw new Error('weightedPublicKeys should be specified for a multisig account');\n    const encodedMultisigPublicKeys = [];\n\n    for (const weightedPublicKey of this.weightedPublicKeys) {\n      if (weightedPublicKey.weight === undefined) throw new Error('weight should be specified for a multisig account');\n      if (weightedPublicKey.publicKey === undefined) throw new Error('publicKey should be specified for a multisig account');\n      const compressedPublicKey = utils.compressPublicKey(weightedPublicKey.publicKey);\n      encodedMultisigPublicKeys.push([Bytes.fromNat(utils.numberToHex(weightedPublicKey.weight)), compressedPublicKey]);\n    }\n\n    return ACCOUNT_KEY_TAG.ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG + RLP.encode([Bytes.fromNat(utils.numberToHex(this.threshold)), encodedMultisigPublicKeys]).slice(2);\n  }\n\n}\n\nmodule.exports = AccountKeyWeightedMultiSig;","map":null,"metadata":{},"sourceType":"script"}