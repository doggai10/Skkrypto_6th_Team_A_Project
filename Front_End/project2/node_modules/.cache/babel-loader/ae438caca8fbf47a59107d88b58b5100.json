{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst AbstractKeyring = require('./abstractKeyring');\n\nconst utils = require('../../../caver-utils');\n\nconst PrivateKey = require('./privateKey');\n\nconst _require = require('./keyringHelper'),\n      KEY_ROLE = _require.KEY_ROLE,\n      MAXIMUM_KEY_NUM = _require.MAXIMUM_KEY_NUM,\n      isMultipleKeysFormat = _require.isMultipleKeysFormat,\n      isRoleBasedKeysFormat = _require.isRoleBasedKeysFormat;\n\nconst Account = require('../../../caver-account');\n\nconst _require2 = require('../../../caver-account/src/accountKey/accountKeyHelper'),\n      fillWeightedMultiSigOptionsForRoleBased = _require2.fillWeightedMultiSigOptionsForRoleBased;\n\nconst _require3 = require('./keyringHelper'),\n      validateForSigning = _require3.validateForSigning,\n      validateIndexWithKeys = _require3.validateIndexWithKeys,\n      encryptKey = _require3.encryptKey,\n      formatEncrypted = _require3.formatEncrypted;\n/**\n * representing a Keyring which includes `address` and `private keys` by roles.\n * @class\n */\n\n\nclass RoleBasedKeyring extends AbstractKeyring {\n  /**\n   * creates a RoleBasedKeyring.\n   * @param {string} address - The address of keyring.\n   * @param {Array.<Array<string>>|Array.<Array<PrivateKey>>} keys - The keys to use in RoleBasedKeyring.\n   */\n  constructor(address, keys) {\n    super(address);\n    this.keys = keys;\n  }\n  /**\n   * @type {Array.<Array.<PrivateKey>>}\n   */\n\n\n  get keys() {\n    return this._keys;\n  }\n\n  set keys(keyInput) {\n    if (keyInput === null) {\n      this._key = null;\n      return;\n    }\n\n    this._keys = formattingForKeyInKeyring(keyInput);\n  }\n  /**\n   * @type {Array.<PrivateKey>}\n   */\n\n\n  get roleTransactionKey() {\n    return this.getKeyByRole(KEY_ROLE.roleTransactionKey);\n  }\n  /**\n   * @type {Array.<PrivateKey>}\n   */\n\n\n  get roleAccountUpdateKey() {\n    return this.getKeyByRole(KEY_ROLE.roleAccountUpdateKey);\n  }\n  /**\n   * @type {Array.<PrivateKey>}\n   */\n\n\n  get roleFeePayerKey() {\n    return this.getKeyByRole(KEY_ROLE.roleFeePayerKey);\n  }\n  /**\n   * returns public key strings in format of role-based.\n   *\n   * @return {Array.<Array<string>>}\n   */\n\n\n  getPublicKey() {\n    const publicKeys = generateKeysFormat();\n\n    for (let i = 0; i < KEY_ROLE.roleLast; i++) {\n      for (const k of this._keys[i]) {\n        publicKeys[i].push(k.getPublicKey());\n      }\n    }\n\n    return publicKeys;\n  }\n  /**\n   * returns a copied roleBasedKeyring instance\n   *\n   * @return {RoleBasedKeyring}\n   */\n\n\n  copy() {\n    return new RoleBasedKeyring(this.address, this.keys);\n  }\n  /**\n   * signs with transactionHash with key and returns signature.\n   *\n   * @param {string} transactionHash The hash of transaction.\n   * @param {string|number} chainId The chainId specific to the network.\n   * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n   * @param {number} [index] The index of the key to be used. If index is undefined, all private keys in keyring will be used.\n   * @return {Array.<string>|Array.<Array.<string>>}\n   */\n\n\n  sign(transactionHash, chainId, role, index) {\n    validateForSigning(transactionHash, chainId);\n    const keys = this.getKeyByRole(role);\n\n    if (index !== undefined) {\n      validateIndexWithKeys(index, keys.length);\n      return keys[index].sign(transactionHash, chainId);\n    }\n\n    const signatures = [];\n\n    for (const k of keys) {\n      signatures.push(k.sign(transactionHash, chainId));\n    }\n\n    return signatures;\n  }\n  /**\n   * signs with hashed message and returns result object that includes `signatures`, `message` and `messageHash`\n   *\n   * @param {string} message The message string to sign.\n   * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n   * @param {number} [index] The index of the key to be used.\n   * @return {object}\n   */\n\n\n  signMessage(message, role, index) {\n    if (role === undefined) throw new Error(\"role should be defined for signMessage. Please use 'caver.wallet.keyring.role'.\");\n    const messageHash = utils.hashMessage(message);\n    const keys = this.getKeyByRole(role);\n    const signatures = [];\n\n    if (index !== undefined) {\n      validateIndexWithKeys(index, keys.length);\n      signatures.push(keys[index].signMessage(messageHash));\n    } else {\n      for (const k of keys) {\n        signatures.push(k.signMessage(messageHash));\n      }\n    }\n\n    return {\n      messageHash,\n      signatures,\n      message\n    };\n  }\n  /**\n   * returns keys by role.If the key of the role passed as parameter is empty, the default key is returned.\n   *\n   * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n   * @return {Array.<PrivateKey>}\n   */\n\n\n  getKeyByRole(role) {\n    if (role === undefined) throw new Error(\"role should be defined.\");\n    if (role >= KEY_ROLE.roleLast || role < 0) throw new Error(\"Invalid role number: \".concat(role));\n    let key = this._keys[role];\n\n    if (key.length === 0 && role > KEY_ROLE.roleTransactionKey) {\n      if (this._keys[KEY_ROLE.roleTransactionKey].length === 0) {\n        throw new Error(\"The key with \".concat(KEY_ROLE[role], \" role does not exist. The \").concat(KEY_ROLE[0], \" for the default role is also empty.\"));\n      }\n\n      key = this._keys[KEY_ROLE.roleTransactionKey];\n    }\n\n    return key;\n  }\n  /**\n   * returns an instance of Account.\n   *\n   * @param {WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary when keyring use multiple private keys.\n   * @return {Account}\n   */\n\n\n  toAccount(options) {\n    if (options !== undefined && !_.isArray(options)) throw new Error(\"options for an account should define threshold and weight for each roles in an array format\");\n    const lengths = [];\n\n    for (const k of this.keys) lengths.push(k.length);\n\n    options = fillWeightedMultiSigOptionsForRoleBased(lengths, options);\n    const publicKeysByRole = this.getPublicKey();\n    return Account.createWithAccountKeyRoleBased(this.address, publicKeysByRole, options);\n  }\n  /**\n   * encrypts a keyring and returns a keystore v4 object.\n   *\n   * @param {string} password The password to be used for encryption. The encrypted key store can be decrypted with this password.\n   * @param {object} options The options to use when encrypt a keyring. Also address can be defined specifically in options object.\n   * @return {object}\n   */\n\n  /**\n   * options can include below\n   * {\n   *   salt: ...,\n   *   iv: ...,\n   *   kdf: ...,\n   *   dklen: ...,\n   *   c: ...,\n   *   n: ...,\n   *   r: ...,\n   *   p: ...,\n   *   cipher: ...,\n   *   uuid: ...,\n   *   cipher: ...,\n   * }\n   */\n\n\n  encrypt(password, options = {}) {\n    const keyring = [];\n\n    for (let i = KEY_ROLE.roleTransactionKey; i < KEY_ROLE.roleLast; i++) {\n      const roledKey = this._keys[i];\n      keyring.push(encryptKey(roledKey, password, options));\n    }\n\n    return formatEncrypted(4, this._address, keyring, options);\n  }\n\n}\n\nmodule.exports = RoleBasedKeyring;\n/**\n * Format the key parameters passed by the user to create a keyring instance into a two-dimensional array containing PrivateKey instances.\n *\n * The cases of the parameter that the user passes to the function is as follows, and this function formats it as a two-dimensional array.\n * PrivateKey instance: PrivateKey{}\n * single private key string: `0x{private key}`\n * multiple private key strings: [`0x{private key}`, `0x{private key}`]\n * multiple PrivateKey instances: [PrivateKey{}, PrivateKey{}]\n * role-based private key strings: [[`0x{private key}`], [`0x{private key}`, `0x{private key}`], [`0x{private key}`]]\n * role-based PrivateKey instances: [[PrivateKey{}], [PrivateKey{}, PrivateKey{}], [PrivateKey{}]]\n *\n * @param {string|PrivateKey|Array.<string|PrivateKey>|Array.<Array.<string|PrivateKey>>} keyInput The input parameter for key variable in Keyring.\n * @return {Array.<Array.<PrivateKey>>}\n */\n\nfunction formattingForKeyInKeyring(keyInput) {\n  if (keyInput === null) {\n    return keyInput;\n  }\n\n  if (keyInput instanceof PrivateKey || _.isString(keyInput)) {\n    keyInput = [[keyInput], [], []];\n  } else if (isMultipleKeysFormat(keyInput)) {\n    // [`0x{private key}`, `0x{private key}`, `0x{private key}`]\n    keyInput = [keyInput, [], []];\n  } else if (!isRoleBasedKeysFormat(keyInput)) {\n    throw new Error(\"Invalid format for key variable in keyring\");\n  }\n\n  const keys = generateKeysFormat();\n\n  for (let i = 0; i < KEY_ROLE.roleLast; i++) {\n    fillRoleKey(keys, i, keyInput[i]);\n  }\n\n  return keys;\n}\n\nfunction generateKeysFormat() {\n  return Array(KEY_ROLE.roleLast).fill(null).map(() => []);\n}\n\nfunction fillRoleKey(keys, role, keyToAdd) {\n  if (keyToAdd === undefined) return;\n  keyToAdd = Array.isArray(keyToAdd) ? keyToAdd : [keyToAdd];\n  if (keyToAdd.length > MAXIMUM_KEY_NUM) throw new Error(\"The maximum number of private keys that can be used in keyring is \".concat(MAXIMUM_KEY_NUM, \".\"));\n  if (role >= KEY_ROLE.roleLast) throw new Error(\"Unsupported role number. The role number should be less than \".concat(KEY_ROLE.roleLast, \". Please use 'caver.wallet.keyring.role'\"));\n\n  for (const keyString of keyToAdd) {\n    const key = keyString instanceof PrivateKey ? keyString : new PrivateKey(keyString);\n    keys[role].push(key);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}