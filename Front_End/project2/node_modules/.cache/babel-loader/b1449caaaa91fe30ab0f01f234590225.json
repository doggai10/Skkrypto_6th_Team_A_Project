{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst BigNumber = require('bignumber.js');\n\nconst Contract = require('../../caver-contract');\n\nconst {\n  validateDeployParameterForKIP17,\n  kip17JsonInterface,\n  kip17ByteCode,\n  determineSendParams,\n  formatParamForUint256\n} = require('./kctHelper');\n\nconst {\n  toBuffer,\n  isHexStrict,\n  toHex\n} = require('../../caver-utils/src');\n\nconst {\n  isAddress\n} = require('../../caver-utils/src');\n\nclass KIP17 extends Contract {\n  /**\n   * deploy deploys a KIP-17 token contract to Klaytn network.\n   * `const deployedContract = await caver.klay.KIP17.deploy({\n   *      name: 'TokenName',\n   *      symbol: 'TKN',\n   *  }, '0x{address in hex}')`\n   *\n   * @method deploy\n   * @param {Object} tokenInfo The object that defines the name and symbol of the token to deploy.\n   * @param {String} deployer The address of the account to deploy the KIP-17 token contract.\n   * @return {Object}\n   */\n  static deploy(tokenInfo, deployer) {\n    validateDeployParameterForKIP17(tokenInfo);\n    const {\n      name,\n      symbol\n    } = tokenInfo;\n    const kip17 = new KIP17();\n    return kip17.deploy({\n      data: kip17ByteCode,\n      arguments: [name, symbol]\n    }).send({\n      from: deployer,\n      gas: 6600000,\n      value: 0\n    });\n  }\n\n  constructor(tokenAddress, abi = kip17JsonInterface) {\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`);\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n  }\n\n  clone(tokenAddress = this.options.address) {\n    return new this.constructor(tokenAddress, this.options.jsonInterface);\n  }\n\n  async supportsInterface(interfaceId) {\n    const isSupported = await this.methods.supportsInterface(interfaceId).call();\n    return isSupported;\n  }\n  /**\n   * name returns the name of the token.\n   *\n   * @method name\n   * @return {String}\n   */\n\n\n  async name() {\n    const name = await this.methods.name().call();\n    return name;\n  }\n  /**\n   * symbol returns the symbol of the token.\n   *\n   * @method symbol\n   * @return {String}\n   */\n\n\n  async symbol() {\n    const symbol = await this.methods.symbol().call();\n    return symbol;\n  }\n  /**\n   * tokenURI returns the uri of the token.\n   *\n   * @method tokenURI\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {String}\n   */\n\n\n  async tokenURI(tokenId) {\n    const tokenURI = await this.methods.tokenURI(formatParamForUint256(tokenId)).call();\n    return tokenURI;\n  }\n  /**\n   * totalSupply returns the total amount of tokens stored by the contract.\n   *\n   * @method totalSupply\n   * @return {BigNumber}\n   */\n\n\n  async totalSupply() {\n    const totalSupply = await this.methods.totalSupply().call();\n    return new BigNumber(totalSupply);\n  }\n  /**\n   * tokenOfOwnerByIndex returns the token id at a given index of the tokens list of the requested owner.\n   *\n   * @method tokenOfOwnerByIndex\n   * @param {String} owner The address of the account whose token you want to query.\n   * @param {BigNumber|String|Number} index The index of the token to be searched among the tokens owned by a owner account.\n   * @return {BigNumber}\n   */\n\n\n  async tokenOfOwnerByIndex(owner, index) {\n    const token = await this.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call();\n    return new BigNumber(token);\n  }\n  /**\n   * tokenByIndex returns the token id at a given index of all the tokens in this contract.\n   *\n   * @method tokenByIndex\n   * @param {BigNumber|String|Number} index The index of the token to query.\n   * @return {BigNumber}\n   */\n\n\n  async tokenByIndex(index) {\n    const token = await this.methods.tokenByIndex(formatParamForUint256(index)).call();\n    return new BigNumber(token);\n  }\n  /**\n   * balanceOf returns the balance of the specified address.\n   * The balance of an account in KIP-17 means that the total number of NFT(Non Fungible Token) owned by the account.\n   *\n   * @method balanceOf\n   * @param {String} account The address of the account whose number of tokens you want to see.\n   * @return {BigNumber}\n   */\n\n\n  async balanceOf(account) {\n    const balance = await this.methods.balanceOf(account).call();\n    return new BigNumber(balance);\n  }\n  /**\n   * ownerOf returns the owner of the specified token id.\n   *\n   * @method ownerOf\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {BigNumber}\n   */\n\n\n  async ownerOf(tokenId) {\n    const owner = await this.methods.ownerOf(formatParamForUint256(tokenId)).call();\n    return owner;\n  }\n  /**\n   * getApproved returns the approved address for a token id, or zero if no address set.\n   *\n   * @method getApproved\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {Boolean}\n   */\n\n\n  async getApproved(tokenId) {\n    const isApproved = await this.methods.getApproved(formatParamForUint256(tokenId)).call();\n    return isApproved;\n  }\n  /**\n   * isApprovedForAll returns true if an operator is approved by a given owner.\n   *\n   * @method isApprovedForAll\n   * @param {String} owner The id of the token.\n   * @param {String} operator The id of the token.\n   * @return {Boolean}\n   */\n\n\n  async isApprovedForAll(owner, operator) {\n    const isApprovedForAll = await this.methods.isApprovedForAll(owner, operator).call();\n    return isApprovedForAll;\n  }\n  /**\n   * isMinter returns whether the account is minter or not.\n   *\n   * @method isMinter\n   * @param {String} account The address of the account you want to check minter or not.\n   * @return {Boolean}\n   */\n\n\n  async isMinter(account) {\n    const isMinter = await this.methods.isMinter(account).call();\n    return isMinter;\n  }\n  /**\n   * paused returns whether or not the token contract's transaction is paused.\n   *\n   * @method paused\n   * @return {Boolean}\n   */\n\n\n  async paused() {\n    const isPaused = await this.methods.paused().call();\n    return isPaused;\n  }\n  /**\n   * isPauser returns whether the account is pauser or not.\n   *\n   * @method isPauser\n   * @param {String} account The address of the account you want to check pauser or not.\n   * @return {Boolean}\n   */\n\n\n  async isPauser(account) {\n    const isPauser = await this.methods.isPauser(account).call();\n    return isPauser;\n  }\n  /**\n   * approve sets approval with another address to transfer the given token id.\n   *\n   * @method approve\n   * @param {String} to The address of the account to use on behalf of owner for the tokenId.\n   * @param {BigNumber|String|Number} tokenId The id of token the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async approve(to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.approve(to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * setApprovalForAll sets or unsets the approval of a given operator.\n   * An operator is allowed to transfer all tokens of the sender on their behalf.\n   *\n   * @method setApprovalForAll\n   * @param {String} to The address of an account to allow/forbid for transfer of all tokens owned by the owner on behalf of the owner.\n   * @param {Boolean} approved Whether to allow sending tokens on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async setApprovalForAll(to, approved, sendParam = {}) {\n    const executableObj = this.methods.setApprovalForAll(to, approved);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * transferFrom transfers the ownership of a given token id to another address.\n   *\n   * @method transferFrom\n   * @param {String} from The address of the owner or approved of the given token.\n   * @param {String} to The address of the account to receive the token.\n   * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async transferFrom(from, to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.transferFrom(from, to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * safeTransferFrom safely transfers the ownership of a given token id to another address.\n   *\n   * @method safeTransferFrom\n   * @param {String} from The address of the owner or approved of the given token.\n   * @param {String} to The address of the account to receive the token.\n   * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n   * @param {Buffer|String|Number} data The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async safeTransferFrom(from, to, tokenId, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`);\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data) : this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method addMinter\n   * @param {String} account The address of account to add as minter.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async addMinter(account, sendParam = {}) {\n    const executableObj = this.methods.addMinter(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * renounceMinter renounces privilege of MinterRole.\n   * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n   *\n   * @method renounceMinter\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async renounceMinter(sendParam = {}) {\n    const executableObj = this.methods.renounceMinter();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * mint creates token and assigns them to account, increasing the total supply.\n   *\n   * @method mint\n   * @param {String} to The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} tokenId The id of token to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async mint(to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.mint(to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * mintWithTokenURI creates token with uri and assigns them to account, increasing the total supply.\n   *\n   * @method mintWithTokenURI\n   * @param {String} to The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} tokenId The id of token to mint.\n   * @param {String} tokenURI The uri of token to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async mintWithTokenURI(to, tokenId, tokenURI, sendParam = {}) {\n    const executableObj = this.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * burn destroys a specific KIP-17 token.\n   *\n   * @method burn\n   * @param {BigNumber|String|Number} tokenId The id of token to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async burn(tokenId, sendParam = {}) {\n    const executableObj = this.methods.burn(formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * pause triggers stopped state that stops sending tokens in emergency situation.\n   * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n   *\n   * @method pause\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async pause(sendParam = {}) {\n    const executableObj = this.methods.pause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * unpause sets amount as the allowance of spender over the caller’s tokens.\n   * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n   *\n   * @method unpause\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async unpause(sendParam = {}) {\n    const executableObj = this.methods.unpause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n   * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n   *\n   * @method addPauser\n   * @param {String} account The address of account to add as pauser.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async addPauser(account, sendParam = {}) {\n    const executableObj = this.methods.addPauser(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * renouncePauser renounces privilege of PauserRole.\n   * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n   *\n   * @method renouncePauser\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async renouncePauser(sendParam = {}) {\n    const executableObj = this.methods.renouncePauser();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n\n}\n\nmodule.exports = KIP17;","map":null,"metadata":{},"sourceType":"script"}