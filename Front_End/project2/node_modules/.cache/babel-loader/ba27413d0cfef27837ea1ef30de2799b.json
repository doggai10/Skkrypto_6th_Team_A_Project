{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/react-dapp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar RLP = require(\"eth-lib/lib/rlp\");\n\nvar Bytes = require(\"eth-lib/lib/bytes\");\n\nvar utils = require('../../../../caver-utils');\n\nvar helpers = require('../../../../caver-core-helpers');\n\nconst _helpers$constants = helpers.constants,\n      SMART_CONTRACT_DEPLOY_TYPE_TAG = _helpers$constants.SMART_CONTRACT_DEPLOY_TYPE_TAG,\n      SMART_CONTRACT_EXECUTION_TYPE_TAG = _helpers$constants.SMART_CONTRACT_EXECUTION_TYPE_TAG,\n      FEE_DELEGATED_SMART_CONTRACT_EXECUTION_TYPE_TAG = _helpers$constants.FEE_DELEGATED_SMART_CONTRACT_EXECUTION_TYPE_TAG,\n      FEE_DELEGATED_SMART_CONTRACT_DEPLOY_TYPE_TAG = _helpers$constants.FEE_DELEGATED_SMART_CONTRACT_DEPLOY_TYPE_TAG,\n      FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO_TYPE_TAG,\n      FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO_TYPE_TAG;\n\nfunction rlpEncodeForContractDeploy(transaction) {\n  return RLP.encode([RLP.encode([SMART_CONTRACT_DEPLOY_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data, Bytes.fromNat(transaction.humanReadable === true ? '0x1' : '0x0')]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n}\n\nfunction rlpEncodeForContractExecution(transaction) {\n  return RLP.encode([RLP.encode([SMART_CONTRACT_EXECUTION_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n}\n\nfunction rlpEncodeForFeeDelegatedSmartContractDeploy(transaction) {\n  if (transaction.feePayer) {\n    const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n    const _utils$rlpDecode = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode2 = _slicedToArray(_utils$rlpDecode, 9),\n          nonce = _utils$rlpDecode2[0],\n          gasPrice = _utils$rlpDecode2[1],\n          gas = _utils$rlpDecode2[2],\n          to = _utils$rlpDecode2[3],\n          value = _utils$rlpDecode2[4],\n          from = _utils$rlpDecode2[5],\n          data = _utils$rlpDecode2[6],\n          humanReadable = _utils$rlpDecode2[7],\n          _utils$rlpDecode2$ = _slicedToArray(_utils$rlpDecode2[8], 1),\n          _utils$rlpDecode2$$ = _slicedToArray(_utils$rlpDecode2$[0], 3),\n          v = _utils$rlpDecode2$$[0],\n          r = _utils$rlpDecode2$$[1],\n          s = _utils$rlpDecode2$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_SMART_CONTRACT_DEPLOY_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), data, humanReadable]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  } else {\n    return RLP.encode([RLP.encode([FEE_DELEGATED_SMART_CONTRACT_DEPLOY_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data, Bytes.fromNat(transaction.humanReadable === true ? '0x1' : '0x0')]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  }\n}\n\nfunction rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction) {\n  if (transaction.feePayer) {\n    const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n    const _utils$rlpDecode3 = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode4 = _slicedToArray(_utils$rlpDecode3, 10),\n          nonce = _utils$rlpDecode4[0],\n          gasPrice = _utils$rlpDecode4[1],\n          gas = _utils$rlpDecode4[2],\n          to = _utils$rlpDecode4[3],\n          value = _utils$rlpDecode4[4],\n          from = _utils$rlpDecode4[5],\n          data = _utils$rlpDecode4[6],\n          humanReadable = _utils$rlpDecode4[7],\n          feeRatio = _utils$rlpDecode4[8],\n          _utils$rlpDecode4$ = _slicedToArray(_utils$rlpDecode4[9], 1),\n          _utils$rlpDecode4$$ = _slicedToArray(_utils$rlpDecode4$[0], 3),\n          v = _utils$rlpDecode4$$[0],\n          r = _utils$rlpDecode4$$[1],\n          s = _utils$rlpDecode4$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), data, humanReadable, feeRatio]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  } else {\n    return RLP.encode([RLP.encode([FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data, Bytes.fromNat(transaction.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  }\n}\n\nfunction rlpEncodeForFeeDelegatedSmartContractExecution(transaction) {\n  if (transaction.feePayer) {\n    const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n    const _utils$rlpDecode5 = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode6 = _slicedToArray(_utils$rlpDecode5, 8),\n          nonce = _utils$rlpDecode6[0],\n          gasPrice = _utils$rlpDecode6[1],\n          gas = _utils$rlpDecode6[2],\n          to = _utils$rlpDecode6[3],\n          value = _utils$rlpDecode6[4],\n          from = _utils$rlpDecode6[5],\n          data = _utils$rlpDecode6[6],\n          _utils$rlpDecode6$ = _slicedToArray(_utils$rlpDecode6[7], 1),\n          _utils$rlpDecode6$$ = _slicedToArray(_utils$rlpDecode6$[0], 3),\n          v = _utils$rlpDecode6$$[0],\n          r = _utils$rlpDecode6$$[1],\n          s = _utils$rlpDecode6$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_SMART_CONTRACT_EXECUTION_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), data]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  } else {\n    return RLP.encode([RLP.encode([FEE_DELEGATED_SMART_CONTRACT_EXECUTION_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  }\n}\n\nfunction rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction) {\n  if (transaction.feePayer) {\n    const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n    const _utils$rlpDecode7 = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode8 = _slicedToArray(_utils$rlpDecode7, 9),\n          nonce = _utils$rlpDecode8[0],\n          gasPrice = _utils$rlpDecode8[1],\n          gas = _utils$rlpDecode8[2],\n          to = _utils$rlpDecode8[3],\n          value = _utils$rlpDecode8[4],\n          from = _utils$rlpDecode8[5],\n          data = _utils$rlpDecode8[6],\n          feeRatio = _utils$rlpDecode8[7],\n          _utils$rlpDecode8$ = _slicedToArray(_utils$rlpDecode8[8], 1),\n          _utils$rlpDecode8$$ = _slicedToArray(_utils$rlpDecode8$[0], 3),\n          v = _utils$rlpDecode8$$[0],\n          r = _utils$rlpDecode8$$[1],\n          s = _utils$rlpDecode8$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), data, Bytes.fromNat(feeRatio)]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  } else {\n    return RLP.encode([RLP.encode([FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data, Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  }\n}\n\nmodule.exports = {\n  rlpEncodeForContractDeploy,\n  rlpEncodeForFeeDelegatedSmartContractDeploy,\n  rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\n  rlpEncodeForContractExecution,\n  rlpEncodeForFeeDelegatedSmartContractExecution,\n  rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio\n};","map":null,"metadata":{},"sourceType":"script"}