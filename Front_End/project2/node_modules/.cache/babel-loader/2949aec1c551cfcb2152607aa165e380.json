{"ast":null,"code":"/**\n * Copyright 2018 The caver-js Authors\n * This file is part of the caver-js library.\n *\n * The caver-js library is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The caver-js library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with the go-klayton library. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file index.js\n * @author Hoonil Kim <satoshi.kim@groundx.xyz>\n * @date 2018\n */\nrequire('@babel/polyfill');\n\nglobal.rootRequire = name => require(\"\".concat(__dirname, \"/packages/\").concat(name, \"/src/index.js\"));\n\nconst _require = require('./packages/caver-core'),\n      packageInit = _require.packageInit,\n      providers = _require.providers;\n\nconst Klay = require('./packages/caver-klay');\n\nconst Net = require('./packages/caver-net');\n\nconst Method = require('./packages/caver-core-method');\n\nconst middleware = require('./packages/caver-middleware');\n\nconst utils = require('./packages/caver-utils');\n\nconst formatters = require('./packages/caver-core-helpers').formatters;\n\nconst helpers = require('./packages/caver-core-helpers');\n\nconst _require2 = require('./package.json'),\n      version = _require2.version;\n\nfunction Caver(provider, net) {\n  this.use = middleware.registerMiddleware.bind(middleware); // sets _requestmanager etc\n\n  packageInit(this, [provider, net]);\n  this.version = version;\n  this.utils = utils;\n  this.formatters = formatters;\n  this.helpers = helpers;\n  this.Method = Method; // ex) call `onit.klay.property` || `onit.klay.method(...)`\n\n  this.klay = new Klay(this);\n  this.middleware = middleware; // overwrite package setProvider\n\n  const setProvider = this.setProvider;\n\n  this.setProvider = (provider, net) => {\n    setProvider.apply(this, [provider, net]);\n    this.klay.setProvider(provider, net);\n    return true;\n  };\n}\n\nCaver.providers = providers;\nmodule.exports = Caver;\nmodule.exports.formatters = formatters;","map":null,"metadata":{},"sourceType":"script"}