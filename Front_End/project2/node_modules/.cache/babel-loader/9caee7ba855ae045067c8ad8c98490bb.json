{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../caver-utils');\n\nconst AccountKeyDecoder = require('./accountKey/accountKeyDecoder');\n\nconst AccountKeyLegacy = require('./accountKey/accountKeyLegacy');\n\nconst AccountKeyPublic = require('./accountKey/accountKeyPublic');\n\nconst AccountKeyFail = require('./accountKey/accountKeyFail');\n\nconst AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig');\n\nconst AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased');\n\nconst WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions');\n\nconst WeightedPublicKey = require('./accountKey/weightedPublicKey');\n\nconst {\n  isMultipleKeysFormat,\n  isRoleBasedKeysFormat\n} = require('../../caver-wallet/src/keyring/keyringHelper');\n\nfunction isAccountKeyInstance(accountKey) {\n  if (!(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig) && !(accountKey instanceof AccountKeyRoleBased)) return false;\n  return true;\n}\n/**\n * Representing an Account which includes information for account update.\n * @class\n */\n\n\nclass Account {\n  /**\n   * creates an Account instance\n   *\n   * `caver.account.create('0x${address in hex}', '0x{public key}')`\n   * `caver.account.create('0x${address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1,1] })`\n   * `caver.account.create('0x${address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1,1] }, {}])`\n   *\n   * @param {string} address The address of Account.\n   * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\n   * @param {WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\n   * @return {Account}\n   */\n  static create(address, accountKey, options) {\n    if (_.isString(accountKey)) {\n      if (utils.isValidPublicKey(accountKey)) {\n        return Account.createWithAccountKeyPublic(address, accountKey);\n      }\n\n      return Account.createFromRLPEncoding(address, accountKey);\n    }\n\n    if (isMultipleKeysFormat(accountKey)) {\n      if (accountKey.length === 0) throw new Error(`Empty accountKey array.`);\n      return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options);\n    }\n\n    if (isRoleBasedKeysFormat(accountKey)) {\n      return Account.createWithAccountKeyRoleBased(address, accountKey, options);\n    }\n\n    throw new Error(`Unsupported accountKey type: ${typeof accountKey}`);\n  }\n  /**\n   * creates an Account instance from RLP-encoded account key\n   *\n   * @param {string} address The address of Account.\n   * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\n   * @return {Account}\n   */\n\n\n  static createFromRLPEncoding(address, rlpEncodedKey) {\n    const accountKey = AccountKeyDecoder.decode(rlpEncodedKey);\n    return new Account(address, accountKey);\n  }\n  /**\n   * creates an Account instance which has AccountKeyLegacy as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyLegacy(address) {\n    return new Account(address, new AccountKeyLegacy());\n  }\n  /**\n   * creates an Account instance which has AccountKeyPublic as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @param {string} publicKey The public key string.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyPublic(address, publicKey) {\n    return new Account(address, new AccountKeyPublic(publicKey));\n  }\n  /**\n   * creates an Account instance which has AccountKeyFail as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyFail(address) {\n    return new Account(address, new AccountKeyFail());\n  }\n  /**\n   * creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @param {Array} publicKeyArray The array that includes multiple public key strings.\n   * @param {Object} [options] The object that includes threshold and weight array.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\n    return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options));\n  }\n  /**\n   * creates an Account instance which has AccountKeyRoleBased as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @param {Array} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\n   * @param {Array} [options] An array that contains objects with threshold and weight array defined for each role.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\n    return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options));\n  }\n  /**\n   * Create an account.\n   * @param {string} address - The address of account.\n   * @param {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} accountKey - The accountKey of account.\n   */\n\n\n  constructor(address, accountKey) {\n    this.address = address;\n    this.accountKey = accountKey;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get address() {\n    return this._address;\n  }\n\n  set address(addressInput) {\n    if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`);\n    this._address = utils.addHexPrefix(addressInput);\n  }\n  /**\n   * @type {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased}\n   */\n\n\n  get accountKey() {\n    return this._accountKey;\n  }\n\n  set accountKey(accountKey) {\n    if (!isAccountKeyInstance(accountKey)) throw new Error(`Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased`);\n    this._accountKey = accountKey;\n  }\n  /**\n   * returns RLP-encoded account key string.\n   *\n   * @return {string}\n   */\n\n\n  getRLPEncodingAccountKey() {\n    return this._accountKey.getRLPEncoding();\n  }\n\n}\n\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions;\nAccount.accountKey = {\n  decode: AccountKeyDecoder.decode,\n  accountKeyLegacy: AccountKeyLegacy,\n  accountKeyPublic: AccountKeyPublic,\n  accountKeyFail: AccountKeyFail,\n  accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\n  accountKeyRoleBased: AccountKeyRoleBased,\n  weightedPublicKey: WeightedPublicKey\n};\nmodule.exports = Account;","map":null,"metadata":{},"sourceType":"script"}