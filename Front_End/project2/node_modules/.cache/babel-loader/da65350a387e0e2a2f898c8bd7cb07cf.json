{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n/**\n * Representing an options for AccountKeyWeightedMultiSig.\n * This class will define threshold and weights.\n * @class\n */\n\n\nclass WeightedMultiSigOptions {\n  /**\n   * Creates an instance of WeightedMultiSigOptions.\n   * @param {object} options - An object which defines 'threshold' and 'weights'.\n   * @return {WeightedMultiSigOptions}\n   */\n  static fromObject(options) {\n    // To support the previous options format(threshold and weight)\n    if (options.weight && !options.weights) {\n      options.weights = options.weight;\n      delete options.weight;\n    } // Returns empty WeightedMultiSigOptions if options not define threshold and weights like '{}'\n\n\n    if (options.threshold === undefined && options.weights === undefined) return new WeightedMultiSigOptions();\n    if (options.threshold === undefined || options.weights === undefined) throw new Error(`Invalid object for creating WeightedMultiSigOptions. 'threshold' and 'weights' should be defined.`);\n    return new WeightedMultiSigOptions(options.threshold, options.weights);\n  }\n  /**\n   * Creates an instance of WeightedMultiSigOptions.\n   * @param {number} threshold - a threshold\n   * @param {Array.<number>} weights - an array of weight of key\n   */\n\n\n  constructor(threshold, weights) {\n    if (threshold !== undefined && weights === undefined || threshold === undefined && weights !== undefined) {\n      throw new Error(`For creating an WeightedMultiSigOptions, 'threshold' and 'weights' should be defined.`);\n    }\n\n    if (threshold !== undefined) this.threshold = threshold;\n    if (weights !== undefined) this.weights = weights;\n  }\n  /**\n   * @type {number}\n   */\n\n\n  get threshold() {\n    return this._threshold;\n  }\n\n  set threshold(th) {\n    if (!_.isNumber(th)) throw new Error(`The threshold must be number type.`);\n    if (!validateWeightedSum(th, this.weights)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n    this._threshold = th;\n  }\n  /**\n   * @type {Array.<number>}\n   */\n\n\n  get weights() {\n    return this._weights;\n  }\n\n  set weights(weightArr) {\n    if (!_.isArray(weightArr)) throw new Error(`weight should be an array that stores the weight of each public key.`);\n\n    for (const w of weightArr) {\n      if (!_.isNumber(w)) throw new Error(`The weight of each key must be number type.`);\n    }\n\n    if (!validateWeightedSum(this.threshold, weightArr)) throw new Error('Invalid options for AccountKeyWeightedMultiSig: The sum of weights is less than the threshold.');\n    this._weights = weightArr;\n  }\n  /**\n   * Returns 'true' if WeightedMultiSigOptions is empty.\n   * @return {Boolean}\n   */\n\n\n  isEmpty() {\n    return this.threshold === undefined && this.weights === undefined;\n  }\n\n}\n/**\n * validates threshold and sum of weights.\n * @param {number} threshold - The threshold of the AccountKeyWeightedMultiSig.\n * @param {Array.<number>} weights - An array of weights.\n * @return {Boolean}\n */\n\n\nfunction validateWeightedSum(threshold, weights) {\n  if (threshold === undefined || weights === undefined) return true;\n  let weightSum = 0;\n\n  for (const w of weights) weightSum += w;\n\n  if (threshold > weightSum) return false;\n  return true;\n}\n\nmodule.exports = WeightedMultiSigOptions;","map":null,"metadata":{},"sourceType":"script"}