{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/react-dapp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar RLP = require(\"eth-lib/lib/rlp\");\n\nvar Bytes = require(\"eth-lib/lib/bytes\");\n\nvar utils = require('../../../../caver-utils');\n\nvar helpers = require('../../../../caver-core-helpers');\n\nconst _helpers$constants = helpers.constants,\n      CANCEL_TYPE_TAG = _helpers$constants.CANCEL_TYPE_TAG,\n      FEE_DELEGATED_CANCEL_TYPE_TAG = _helpers$constants.FEE_DELEGATED_CANCEL_TYPE_TAG,\n      FEE_DELEGATED_CANCEL_WITH_RATIO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_CANCEL_WITH_RATIO_TYPE_TAG;\n\nfunction rlpEncodeForCancel(transaction) {\n  return RLP.encode([RLP.encode([CANCEL_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase()]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n}\n\nfunction rlpEncodeForFeeDelegatedCancel(transaction) {\n  if (transaction.feePayer) {\n    const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n    const _utils$rlpDecode = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode2 = _slicedToArray(_utils$rlpDecode, 5),\n          nonce = _utils$rlpDecode2[0],\n          gasPrice = _utils$rlpDecode2[1],\n          gas = _utils$rlpDecode2[2],\n          from = _utils$rlpDecode2[3],\n          _utils$rlpDecode2$ = _slicedToArray(_utils$rlpDecode2[4], 1),\n          _utils$rlpDecode2$$ = _slicedToArray(_utils$rlpDecode2$[0], 3),\n          v = _utils$rlpDecode2$$[0],\n          r = _utils$rlpDecode2$$[1],\n          s = _utils$rlpDecode2$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_CANCEL_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), from.toLowerCase()]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  } else {\n    return RLP.encode([RLP.encode([FEE_DELEGATED_CANCEL_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase()]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  }\n}\n\nfunction rlpEncodeForFeeDelegatedCancelWithRatio(transaction) {\n  if (transaction.feePayer) {\n    const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n    const _utils$rlpDecode3 = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode4 = _slicedToArray(_utils$rlpDecode3, 6),\n          nonce = _utils$rlpDecode4[0],\n          gasPrice = _utils$rlpDecode4[1],\n          gas = _utils$rlpDecode4[2],\n          from = _utils$rlpDecode4[3],\n          feeRatio = _utils$rlpDecode4[4],\n          _utils$rlpDecode4$ = _slicedToArray(_utils$rlpDecode4[5], 1),\n          _utils$rlpDecode4$$ = _slicedToArray(_utils$rlpDecode4$[0], 3),\n          v = _utils$rlpDecode4$$[0],\n          r = _utils$rlpDecode4$$[1],\n          s = _utils$rlpDecode4$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_CANCEL_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), from.toLowerCase(), Bytes.fromNat(feeRatio)]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  } else {\n    return RLP.encode([RLP.encode([FEE_DELEGATED_CANCEL_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || \"0x1\"), \"0x\", \"0x\"]);\n  }\n}\n\nmodule.exports = {\n  rlpEncodeForCancel,\n  rlpEncodeForFeeDelegatedCancel,\n  rlpEncodeForFeeDelegatedCancelWithRatio\n};","map":null,"metadata":{},"sourceType":"script"}