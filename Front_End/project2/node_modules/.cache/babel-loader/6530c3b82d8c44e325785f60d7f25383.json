{"ast":null,"code":"var _toArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/react-dapp/client/node_modules/@babel/runtime/helpers/toArray\");\n\nvar _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/react-dapp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar RLP = require(\"eth-lib/lib/rlp\");\n\nvar utils = require('../../../caver-utils');\n\nconst _require = require('./transactionType'),\n      rlpEncodeForLegacyTransaction = _require.rlpEncodeForLegacyTransaction,\n      rlpEncodeForValueTransfer = _require.rlpEncodeForValueTransfer,\n      rlpEncodeForValueTransferMemo = _require.rlpEncodeForValueTransferMemo,\n      rlpEncodeForFeeDelegatedValueTransferMemoWithRatio = _require.rlpEncodeForFeeDelegatedValueTransferMemoWithRatio,\n      rlpEncodeForFeeDelegatedValueTransfer = _require.rlpEncodeForFeeDelegatedValueTransfer,\n      rlpEncodeForFeeDelegatedValueTransferWithRatio = _require.rlpEncodeForFeeDelegatedValueTransferWithRatio,\n      rlpEncodeForFeeDelegatedValueTransferMemo = _require.rlpEncodeForFeeDelegatedValueTransferMemo,\n      rlpEncodeForAccountCreation = _require.rlpEncodeForAccountCreation,\n      rlpEncodeForAccountUpdate = _require.rlpEncodeForAccountUpdate,\n      rlpEncodeForContractDeploy = _require.rlpEncodeForContractDeploy,\n      rlpEncodeForContractExecution = _require.rlpEncodeForContractExecution,\n      rlpEncodeForFeeDelegatedAccountUpdate = _require.rlpEncodeForFeeDelegatedAccountUpdate,\n      rlpEncodeForFeeDelegatedAccountUpdateWithRatio = _require.rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n      rlpEncodeForFeeDelegatedSmartContractDeploy = _require.rlpEncodeForFeeDelegatedSmartContractDeploy,\n      rlpEncodeForFeeDelegatedSmartContractDeployWithRatio = _require.rlpEncodeForFeeDelegatedSmartContractDeployWithRatio,\n      rlpEncodeForFeeDelegatedSmartContractExecution = _require.rlpEncodeForFeeDelegatedSmartContractExecution,\n      rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio = _require.rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio,\n      rlpEncodeForCancel = _require.rlpEncodeForCancel,\n      rlpEncodeForFeeDelegatedCancel = _require.rlpEncodeForFeeDelegatedCancel,\n      rlpEncodeForFeeDelegatedCancelWithRatio = _require.rlpEncodeForFeeDelegatedCancelWithRatio,\n      rlpEncodeForChainDataAnchoring = _require.rlpEncodeForChainDataAnchoring;\n\nfunction encodeRLPByTxType(transaction) {\n  switch (transaction.type) {\n    case 'ACCOUNT_CREATION':\n      return rlpEncodeForAccountCreation(transaction);\n\n    case 'ACCOUNT_UPDATE':\n      return rlpEncodeForAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      return rlpEncodeForFeeDelegatedAccountUpdate(transaction);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction);\n\n    case 'VALUE_TRANSFER':\n      return rlpEncodeForValueTransfer(transaction);\n\n    case 'VALUE_TRANSFER_MEMO':\n      return rlpEncodeForValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      return rlpEncodeForFeeDelegatedValueTransfer(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      return rlpEncodeForFeeDelegatedValueTransferMemo(transaction);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForFeeDelegatedSmartContractDeploy(transaction);\n\n    case 'SMART_CONTRACT_DEPLOY':\n      return rlpEncodeForContractDeploy(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractDeployWithRatio(transaction);\n\n    case 'SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      return rlpEncodeForFeeDelegatedSmartContractExecution(transaction);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedSmartContractExecutionWithRatio(transaction);\n\n    case 'CANCEL':\n      return rlpEncodeForCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL':\n      return rlpEncodeForFeeDelegatedCancel(transaction);\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      return rlpEncodeForFeeDelegatedCancelWithRatio(transaction);\n\n    case 'CHAIN_DATA_ANCHROING':\n      return rlpEncodeForChainDataAnchoring(transaction);\n\n    case 'LEGACY':\n    default:\n      return rlpEncodeForLegacyTransaction(transaction);\n  }\n} // case1) sig === [v, r, s]\n// case2) sig ===\n\n\nfunction makeRawTransaction(rlpEncoded, sig, transaction) {\n  const decodedValues = RLP.decode(rlpEncoded);\n  let rawTx;\n\n  switch (transaction.type) {\n    case 'VALUE_TRANSFER':\n    case 'VALUE_TRANSFER_MEMO':\n    case 'ACCOUNT_CREATION':\n    case 'ACCOUNT_UPDATE':\n    case 'SMART_CONTRACT_DEPLOY':\n    case 'SMART_CONTRACT_EXECUTION':\n    case 'CANCEL':\n    case 'CHAIN_DATA_ANCHROING':\n      return _combineSenderRawTransaction(rlpEncoded, sig);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode2 = _slicedToArray(_utils$rlpDecode, 7),\n                nonce = _utils$rlpDecode2[0],\n                gasPrice = _utils$rlpDecode2[1],\n                gas = _utils$rlpDecode2[2],\n                to = _utils$rlpDecode2[3],\n                value = _utils$rlpDecode2[4],\n                from = _utils$rlpDecode2[5],\n                _utils$rlpDecode2$ = _slicedToArray(_utils$rlpDecode2[6], 1),\n                _utils$rlpDecode2$$ = _slicedToArray(_utils$rlpDecode2$[0], 3),\n                senderV = _utils$rlpDecode2$$[0],\n                senderR = _utils$rlpDecode2$$[1],\n                senderS = _utils$rlpDecode2$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode3 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode4 = _slicedToArray(_utils$rlpDecode3, 8),\n                nonce = _utils$rlpDecode4[0],\n                gasPrice = _utils$rlpDecode4[1],\n                gas = _utils$rlpDecode4[2],\n                to = _utils$rlpDecode4[3],\n                value = _utils$rlpDecode4[4],\n                from = _utils$rlpDecode4[5],\n                feeRatio = _utils$rlpDecode4[6],\n                _utils$rlpDecode4$ = _slicedToArray(_utils$rlpDecode4[7], 1),\n                _utils$rlpDecode4$$ = _slicedToArray(_utils$rlpDecode4$[0], 3),\n                senderV = _utils$rlpDecode4$$[0],\n                senderR = _utils$rlpDecode4$$[1],\n                senderS = _utils$rlpDecode4$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode5 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode6 = _slicedToArray(_utils$rlpDecode5, 8),\n                nonce = _utils$rlpDecode6[0],\n                gasPrice = _utils$rlpDecode6[1],\n                gas = _utils$rlpDecode6[2],\n                to = _utils$rlpDecode6[3],\n                value = _utils$rlpDecode6[4],\n                from = _utils$rlpDecode6[5],\n                data = _utils$rlpDecode6[6],\n                _utils$rlpDecode6$ = _slicedToArray(_utils$rlpDecode6[7], 1),\n                _utils$rlpDecode6$$ = _slicedToArray(_utils$rlpDecode6$[0], 3),\n                senderV = _utils$rlpDecode6$$[0],\n                senderR = _utils$rlpDecode6$$[1],\n                senderS = _utils$rlpDecode6$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode7 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode8 = _slicedToArray(_utils$rlpDecode7, 9),\n                nonce = _utils$rlpDecode8[0],\n                gasPrice = _utils$rlpDecode8[1],\n                gas = _utils$rlpDecode8[2],\n                to = _utils$rlpDecode8[3],\n                value = _utils$rlpDecode8[4],\n                from = _utils$rlpDecode8[5],\n                data = _utils$rlpDecode8[6],\n                feeRatio = _utils$rlpDecode8[7],\n                _utils$rlpDecode8$ = _slicedToArray(_utils$rlpDecode8[8], 1),\n                _utils$rlpDecode8$$ = _slicedToArray(_utils$rlpDecode8$[0], 3),\n                senderV = _utils$rlpDecode8$$[0],\n                senderR = _utils$rlpDecode8$$[1],\n                senderS = _utils$rlpDecode8$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode9 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode10 = _slicedToArray(_utils$rlpDecode9, 9),\n                nonce = _utils$rlpDecode10[0],\n                gasPrice = _utils$rlpDecode10[1],\n                gas = _utils$rlpDecode10[2],\n                to = _utils$rlpDecode10[3],\n                value = _utils$rlpDecode10[4],\n                from = _utils$rlpDecode10[5],\n                data = _utils$rlpDecode10[6],\n                humanReadable = _utils$rlpDecode10[7],\n                _utils$rlpDecode10$ = _slicedToArray(_utils$rlpDecode10[8], 1),\n                _utils$rlpDecode10$$ = _slicedToArray(_utils$rlpDecode10$[0], 3),\n                senderV = _utils$rlpDecode10$$[0],\n                senderR = _utils$rlpDecode10$$[1],\n                senderS = _utils$rlpDecode10$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode11 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode12 = _slicedToArray(_utils$rlpDecode11, 10),\n                nonce = _utils$rlpDecode12[0],\n                gasPrice = _utils$rlpDecode12[1],\n                gas = _utils$rlpDecode12[2],\n                to = _utils$rlpDecode12[3],\n                value = _utils$rlpDecode12[4],\n                from = _utils$rlpDecode12[5],\n                data = _utils$rlpDecode12[6],\n                humanReadable = _utils$rlpDecode12[7],\n                feeRatio = _utils$rlpDecode12[8],\n                _utils$rlpDecode12$ = _slicedToArray(_utils$rlpDecode12[9], 1),\n                _utils$rlpDecode12$$ = _slicedToArray(_utils$rlpDecode12$[0], 3),\n                senderV = _utils$rlpDecode12$$[0],\n                senderR = _utils$rlpDecode12$$[1],\n                senderS = _utils$rlpDecode12$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_CANCEL':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode13 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode14 = _slicedToArray(_utils$rlpDecode13, 5),\n                nonce = _utils$rlpDecode14[0],\n                gasPrice = _utils$rlpDecode14[1],\n                gas = _utils$rlpDecode14[2],\n                from = _utils$rlpDecode14[3],\n                _utils$rlpDecode14$ = _slicedToArray(_utils$rlpDecode14[4], 1),\n                _utils$rlpDecode14$$ = _slicedToArray(_utils$rlpDecode14$[0], 3),\n                senderV = _utils$rlpDecode14$$[0],\n                senderR = _utils$rlpDecode14$$[1],\n                senderS = _utils$rlpDecode14$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode15 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode16 = _slicedToArray(_utils$rlpDecode15, 6),\n                nonce = _utils$rlpDecode16[0],\n                gasPrice = _utils$rlpDecode16[1],\n                gas = _utils$rlpDecode16[2],\n                from = _utils$rlpDecode16[3],\n                feeRatio = _utils$rlpDecode16[4],\n                _utils$rlpDecode16$ = _slicedToArray(_utils$rlpDecode16[5], 1),\n                _utils$rlpDecode16$$ = _slicedToArray(_utils$rlpDecode16$[0], 3),\n                senderV = _utils$rlpDecode16$$[0],\n                senderR = _utils$rlpDecode16$$[1],\n                senderS = _utils$rlpDecode16$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode17 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode18 = _slicedToArray(_utils$rlpDecode17, 6),\n                nonce = _utils$rlpDecode18[0],\n                gasPrice = _utils$rlpDecode18[1],\n                gas = _utils$rlpDecode18[2],\n                from = _utils$rlpDecode18[3],\n                accountKey = _utils$rlpDecode18[4],\n                _utils$rlpDecode18$ = _slicedToArray(_utils$rlpDecode18[5], 1),\n                _utils$rlpDecode18$$ = _slicedToArray(_utils$rlpDecode18$[0], 3),\n                senderV = _utils$rlpDecode18$$[0],\n                senderR = _utils$rlpDecode18$$[1],\n                senderS = _utils$rlpDecode18$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode19 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode20 = _slicedToArray(_utils$rlpDecode19, 7),\n                nonce = _utils$rlpDecode20[0],\n                gasPrice = _utils$rlpDecode20[1],\n                gas = _utils$rlpDecode20[2],\n                from = _utils$rlpDecode20[3],\n                accountKey = _utils$rlpDecode20[4],\n                feeRatio = _utils$rlpDecode20[5],\n                _utils$rlpDecode20$ = _slicedToArray(_utils$rlpDecode20[6], 1),\n                _utils$rlpDecode20$$ = _slicedToArray(_utils$rlpDecode20$[0], 3),\n                senderV = _utils$rlpDecode20$$[0],\n                senderR = _utils$rlpDecode20$$[1],\n                senderS = _utils$rlpDecode20$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode21 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode22 = _slicedToArray(_utils$rlpDecode21, 8),\n                nonce = _utils$rlpDecode22[0],\n                gasPrice = _utils$rlpDecode22[1],\n                gas = _utils$rlpDecode22[2],\n                to = _utils$rlpDecode22[3],\n                value = _utils$rlpDecode22[4],\n                from = _utils$rlpDecode22[5],\n                data = _utils$rlpDecode22[6],\n                _utils$rlpDecode22$ = _slicedToArray(_utils$rlpDecode22[7], 1),\n                _utils$rlpDecode22$$ = _slicedToArray(_utils$rlpDecode22$[0], 3),\n                senderV = _utils$rlpDecode22$$[0],\n                senderR = _utils$rlpDecode22$$[1],\n                senderS = _utils$rlpDecode22$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode23 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode24 = _slicedToArray(_utils$rlpDecode23, 9),\n                nonce = _utils$rlpDecode24[0],\n                gasPrice = _utils$rlpDecode24[1],\n                gas = _utils$rlpDecode24[2],\n                to = _utils$rlpDecode24[3],\n                value = _utils$rlpDecode24[4],\n                from = _utils$rlpDecode24[5],\n                data = _utils$rlpDecode24[6],\n                feeRatio = _utils$rlpDecode24[7],\n                _utils$rlpDecode24$ = _slicedToArray(_utils$rlpDecode24[8], 1),\n                _utils$rlpDecode24$$ = _slicedToArray(_utils$rlpDecode24$[0], 3),\n                senderV = _utils$rlpDecode24$$[0],\n                senderR = _utils$rlpDecode24$$[1],\n                senderS = _utils$rlpDecode24$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n      {\n        if (transaction.senderRawTransaction) {\n          const typeDetacehdRawTransaction = '0x' + transaction.senderRawTransaction.slice(4);\n\n          const _utils$rlpDecode25 = utils.rlpDecode(typeDetacehdRawTransaction),\n                _utils$rlpDecode26 = _slicedToArray(_utils$rlpDecode25, 9),\n                nonce = _utils$rlpDecode26[0],\n                gasPrice = _utils$rlpDecode26[1],\n                gas = _utils$rlpDecode26[2],\n                to = _utils$rlpDecode26[3],\n                value = _utils$rlpDecode26[4],\n                from = _utils$rlpDecode26[5],\n                data = _utils$rlpDecode26[6],\n                feeRatio = _utils$rlpDecode26[7],\n                _utils$rlpDecode26$ = _slicedToArray(_utils$rlpDecode26[8], 1),\n                _utils$rlpDecode26$$ = _slicedToArray(_utils$rlpDecode26$[0], 3),\n                senderV = _utils$rlpDecode26$$[0],\n                senderR = _utils$rlpDecode26$$[1],\n                senderS = _utils$rlpDecode26$$[2];\n\n          return _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]);\n        }\n\n        return _combineSenderRawTransaction(rlpEncoded, sig);\n      }\n\n    case 'LEGACY':\n    default:\n      rawTx = decodedValues.slice(0, 6).concat(sig);\n      return RLP.encode(rawTx);\n  }\n}\n\nfunction _combineSenderRawTransaction(rlpEncoded, sig) {\n  const decodedValues = RLP.decode(rlpEncoded);\n\n  let _decodedValues = _slicedToArray(decodedValues, 1),\n      data = _decodedValues[0];\n\n  let _RLP$decode = RLP.decode(data),\n      _RLP$decode2 = _toArray(_RLP$decode),\n      txType = _RLP$decode2[0],\n      rawTx = _RLP$decode2.slice(1);\n\n  rawTx = [...rawTx, [sig]];\n  return txType + RLP.encode(rawTx).slice(2);\n}\n\nfunction _combineFeePayerRawTransaction(rlpEncoded, sig, transaction, [senderV, senderR, senderS]) {\n  const decodedValues = RLP.decode(rlpEncoded);\n\n  let _decodedValues2 = _slicedToArray(decodedValues, 1),\n      data = _decodedValues2[0];\n\n  let _RLP$decode3 = RLP.decode(data),\n      _RLP$decode4 = _toArray(_RLP$decode3),\n      txType = _RLP$decode4[0],\n      rawTx = _RLP$decode4.slice(1);\n\n  rawTx = [...rawTx, [[senderV, senderR, senderS]], transaction.feePayer.toLowerCase(), [sig]];\n  return txType + RLP.encode(rawTx).slice(2);\n}\n\nmodule.exports = {\n  encodeRLPByTxType,\n  makeRawTransaction\n};","map":null,"metadata":{},"sourceType":"script"}