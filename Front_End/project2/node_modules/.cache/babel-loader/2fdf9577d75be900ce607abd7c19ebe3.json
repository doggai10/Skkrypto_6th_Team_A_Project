{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n// Changed name to caver.js 2018-10\nvar errors = require('../../../caver-core-helpers').errors;\n/**\n * xhr2\n * xhr2 library는 w3c 규약에 맞는 XMLHttpRequest 구현체 라이브러리이다.\n */\n\n\nvar XHR2 = require('xhr2-cookies').XMLHttpRequest;\n/**\n * HttpProvider should be used to send rpc calls over http\n */\n\n/**\n * @param       {string} host\n * @param       {object} options\n * @constructor\n * host와 options에 있는 값으로 해당 instance의 값을 채워준다.\n * construct 한 후 connecetd는 당연히 (현재 접속이 안되어있기 때문에) false이다.\n * 'host', 'timeout', 'headers', 'connected' property를 가진다.\n */\n\n\nvar HttpProvider = function HttpProvider(host, options) {\n  options = options || {};\n  /**\n   * host를 따로 지정해주지 않으면 localhost 8545포트를 기본으로 host로 잡아준다.\n   */\n\n  this.host = host || 'http://localhost:8545';\n  this.timeout = options.timeout || 0;\n  this.headers = options.headers;\n  this.connected = false;\n};\n/**\n * _prepareRequest\n * 말 그대로 request instance를 만들어주는 역할을 하는 함수이다.\n * 1) XHR2를 통해 xhr request instance를 만들고,\n * 2) 'POST' 메서드로 지정하고, constructor에서 지정된 host값을 host로 사용하고,\n *    async한 send에 대해서 true로 지정해준다.\n * 3) json rpc를 보낼 것이기 때문에, requestHeader를 Content-type 'application/json'으로 해준다.\n * 4) instance에 timeout이 지정되어 있으면서 && 그 값이 1이 아니라면 그 값을 그대로 쓰고,\n *    반대의 경우 0을 timeout으로 한다.\n * 5) instance에 headers가 있으면 각각 돌면서 setRequestHeader로 header name과 header value를 넣어준다.\n * 6) 1~5 과정을 통해 구성된 request instance를 리턴한다.\n */\n\n\nHttpProvider.prototype._prepareRequest = function () {\n  var request = new XHR2();\n  request.open('POST', this.host, true);\n  request.setRequestHeader('Content-Type', 'application/json');\n  request.timeout = this.timeout && this.timeout !== 1 ? this.timeout : 0;\n\n  if (this.headers) {\n    this.headers.forEach(function (header) {\n      request.setRequestHeader(header.name, header.value);\n    });\n  }\n\n  return request;\n};\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\n\n/**\n * 직접적으로 rpc request를 날리는 함수이다.\n * 다음과 같은 기능을 수행하게끔 구성되어 있다.\n * 1) onreadystatechange - request를 보낸 후 response가 왔을 때의 수행할 콜백\n * 2) ontimeout - timeout 상황 발생 시 수행할 콜백\n * 3) send에 대한 try, catch -\n */\n\n\nHttpProvider.prototype.send = function (payload, callback) {\n  var _this = this;\n\n  _this.send(payload, callback);\n};\n\nHttpProvider.prototype.send = function (payload, callback) {\n  var _this = this;\n\n  var request = this._prepareRequest();\n\n  request.onreadystatechange = function () {\n    /**\n     * readystate 값\n     * 0: UNSENT - client가 created되었을 때\n     * 1: OPENED - request가 open 되었을 때\n     * 2: HEADERS_RECEIVED - send가 불리고 headers와 status가 available할 때\n     * 3: LOADING - downloading\n     * 4: DONE - request를 수행하고 response가 왔을 때.\n     * @todo request.timeout !== 1의 의미\n     * @body constructor에서도 그렇고 timeout이 1인 상황을 왜 거부할까? (request.timeout !== 1)\n     */\n    if (request.readyState === 4 && request.timeout !== 1) {\n      /**\n       * response가 날아오면 그 값이 request.responseText에 담기게 된다.\n       */\n      var result = request.responseText;\n      /**\n       * error 값을 null로 초기화 해준다.\n       */\n\n      var error = null;\n      /**\n       * 날아온 responseText(JSON)를 parse한다.\n       * 만약 실패 시 InvalidResponse 메시지를 보여준다.\n       */\n\n      try {\n        result = JSON.parse(result);\n      } catch (e) {\n        error = errors.InvalidResponse(request.responseText);\n      }\n      /**\n       * HttpProvider instnace의 connected property를 true로 해준다.\n       */\n\n\n      _this.connected = true;\n      /**\n       * send하고 난 후 실행 할 콜백(.send 메서드의 parameter로 들어오는)을 수행한다.\n       */\n\n      callback(error, result);\n    }\n  };\n  /**\n   * ontimeout\n   * timeout이 발생하면 HttpProvider instance의 connected를 false로 하고\n   * ConnectionTimeout이라는 error message를 콜백으로 수행한다.\n   */\n\n\n  request.ontimeout = function () {\n    _this.connected = false;\n    callback(errors.ConnectionTimeout(this.timeout));\n  };\n\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    this.connected = false;\n    callback(errors.InvalidConnection(this.host));\n  }\n};\n\nmodule.exports = HttpProvider;","map":null,"metadata":{},"sourceType":"script"}