{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nconst _ = require('lodash');\n\nconst core = require('../../caver-core');\n\nconst {\n  formatters\n} = require('../../caver-core-helpers');\n\nconst Subscriptions = require('../../caver-core-subscriptions').subscriptions;\n\nconst MethodBase = require('../../caver-core-method');\n\nconst utils = require('../../caver-utils');\n\nconst AbstractTransaction = require('../../caver-transaction/src/transactionTypes/abstractTransaction');\n\nclass KlayRPC {\n  constructor(...args) {\n    const _this = this; // sets _requestmanager\n\n\n    core.packageInit(this, args); // overwrite package setRequestManager\n\n    const setRequestManager = this.setRequestManager;\n\n    this.setRequestManager = function (manager) {\n      setRequestManager(manager);\n      return true;\n    }; // overwrite setProvider\n\n\n    const setProvider = this.setProvider;\n\n    this.setProvider = function (...arg) {\n      setProvider.apply(_this, arg);\n\n      _this.setRequestManager(_this._requestManager);\n    };\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    class Method extends MethodBase {\n      constructor(options) {\n        options.outputFormatterDisable = true;\n        super(options);\n      }\n\n    }\n\n    const _klaytnCall = [new Method({\n      name: 'getChainId',\n      call: 'klay_chainID',\n      params: 0\n    }), new Method({\n      name: 'getGasPrice',\n      call: 'klay_gasPrice',\n      params: 0\n    }), new Method({\n      name: 'getTransactionCount',\n      call: 'klay_getTransactionCount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    })];\n    AbstractTransaction._klaytnCall = {};\n\n    _.each(_klaytnCall, function (method) {\n      method = new Method(method);\n      method.attachToObject(AbstractTransaction._klaytnCall);\n      method.setRequestManager(_this._requestManager);\n    });\n\n    const methods = [..._klaytnCall, // Account\n    new Method({\n      name: 'accountCreated',\n      call: 'klay_accountCreated',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getAccounts',\n      call: 'klay_accounts',\n      params: 0\n    }), new Method({\n      name: 'encodeAccountKey',\n      call: 'klay_encodeAccountKey',\n      params: 1,\n      inputFormatter: [formatters.inputAccountKeyFormatter]\n    }), new Method({\n      name: 'decodeAccountKey',\n      call: 'klay_decodeAccountKey',\n      params: 1\n    }), new Method({\n      name: 'getAccount',\n      call: 'klay_getAccount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getAccountKey',\n      call: 'klay_getAccountKey',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getBalance',\n      call: 'klay_getBalance',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCode',\n      call: 'klay_getCode',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'isContractAccount',\n      call: 'klay_isContractAccount',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'sign',\n      call: 'klay_sign',\n      params: 2,\n      inputFormatter: [formatters.inputAddressFormatter, formatters.inputSignFormatter]\n    }), // Block\n    new Method({\n      name: 'getBlockNumber',\n      call: 'klay_blockNumber',\n      params: 0\n    }), new Method({\n      name: 'getBlock',\n      call: 'klay_getBlockByNumber',\n      hexCall: 'klay_getBlockByHash',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }), new Method({\n      name: 'getBlockByNumber',\n      call: 'klay_getBlockByNumber',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }), new Method({\n      name: 'getBlockByHash',\n      call: 'klay_getBlockByHash',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, formatters.toBoolean]\n    }), new Method({\n      name: 'getBlockReceipts',\n      call: 'klay_getBlockReceipts',\n      params: 1\n    }), new Method({\n      name: 'getBlockTransactionCount',\n      call: 'klay_getBlockTransactionCountByNumber',\n      hexCall: 'klay_getBlockTransactionCountByHash',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockTransactionCountByNumber',\n      call: 'klay_getBlockTransactionCountByNumber',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockTransactionCountByHash',\n      call: 'klay_getBlockTransactionCountByHash',\n      params: 1,\n      inputFormatter: [formatters.inputBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockWithConsensusInfo',\n      call: 'klay_getBlockWithConsensusInfoByNumber',\n      hexCall: 'klay_getBlockWithConsensusInfoByHash',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockWithConsensusInfoByNumber',\n      call: 'klay_getBlockWithConsensusInfoByNumber',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getBlockWithConsensusInfoByHash',\n      call: 'klay_getBlockWithConsensusInfoByHash',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCommittee',\n      call: 'klay_getCommittee',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCommitteeSize',\n      call: 'klay_getCommitteeSize',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCouncil',\n      call: 'klay_getCouncil',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getCouncilSize',\n      call: 'klay_getCouncilSize',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getStorageAt',\n      call: 'klay_getStorageAt',\n      params: 3,\n      inputFormatter: [formatters.inputAddressFormatter, utils.numberToHex, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'isMining',\n      call: 'klay_mining',\n      params: 0\n    }), new Method({\n      name: 'isSyncing',\n      call: 'klay_syncing',\n      params: 0\n    }), // Transaction\n    new Method({\n      name: 'call',\n      call: 'klay_call',\n      params: 2,\n      inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'estimateGas',\n      call: 'klay_estimateGas',\n      params: 1,\n      inputFormatter: [formatters.inputCallFormatter]\n    }), new Method({\n      name: 'estimateComputationCost',\n      call: 'klay_estimateComputationCost',\n      params: 2,\n      inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'getTransactionFromBlock',\n      call: 'klay_getTransactionByBlockNumberAndIndex',\n      hexCall: 'klay_getTransactionByBlockHashAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }), new Method({\n      name: 'getTransactionByBlockNumberAndIndex',\n      call: 'klay_getTransactionByBlockNumberAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }), new Method({\n      name: 'getTransactionByBlockHashAndIndex',\n      call: 'klay_getTransactionByBlockHashAndIndex',\n      params: 2,\n      inputFormatter: [formatters.inputBlockNumberFormatter, utils.numberToHex]\n    }), new Method({\n      name: 'getTransaction',\n      call: 'klay_getTransactionByHash',\n      params: 1\n    }), new Method({\n      name: 'getTransactionByHash',\n      call: 'klay_getTransactionByHash',\n      params: 1\n    }), new Method({\n      name: 'getTransactionBySenderTxHash',\n      call: 'klay_getTransactionBySenderTxHash',\n      params: 1\n    }), new Method({\n      name: 'getTransactionReceipt',\n      call: 'klay_getTransactionReceipt',\n      params: 1\n    }), new Method({\n      name: 'getTransactionReceiptBySenderTxHash',\n      call: 'klay_getTransactionReceiptBySenderTxHash',\n      params: 1\n    }), new Method({\n      name: 'sendRawTransaction',\n      call: 'klay_sendRawTransaction',\n      params: 1\n    }), new Method({\n      name: 'submitTransaction',\n      call: 'klay_sendRawTransaction',\n      params: 1\n    }), new Method({\n      name: 'sendTransaction',\n      call: 'klay_sendTransaction',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }), new Method({\n      name: 'sendTransactionAsFeePayer',\n      call: 'klay_sendTransactionAsFeePayer',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }), new Method({\n      name: 'signTransaction',\n      call: 'klay_signTransaction',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }), new Method({\n      name: 'signTransactionAsFeePayer',\n      call: 'klay_signTransactionAsFeePayer',\n      params: 1,\n      inputFormatter: [formatters.inputTransactionFormatter]\n    }), new Method({\n      name: 'getDecodedAnchoringTransactionByHash',\n      call: 'klay_getDecodedAnchoringTransactionByHash',\n      params: 1\n    }), // Configuration\n    new Method({\n      name: 'getClientVersion',\n      call: 'klay_clientVersion',\n      params: 0\n    }), new Method({\n      name: 'getGasPriceAt',\n      call: 'klay_gasPriceAt',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), new Method({\n      name: 'isParallelDBWrite',\n      call: 'klay_isParallelDBWrite',\n      params: 0\n    }), new Method({\n      name: 'isSenderTxHashIndexingEnabled',\n      call: 'klay_isSenderTxHashIndexingEnabled',\n      params: 0\n    }), new Method({\n      name: 'getProtocolVersion',\n      call: 'klay_protocolVersion',\n      params: 0\n    }), new Method({\n      name: 'getRewardbase',\n      call: 'klay_rewardbase',\n      params: 0\n    }), new Method({\n      name: 'isWriteThroughCaching',\n      call: 'klay_writeThroughCaching',\n      params: 0\n    }), // Filter\n    new Method({\n      name: 'getFilterChanges',\n      call: 'klay_getFilterChanges',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }), new Method({\n      name: 'getFilterLogs',\n      call: 'klay_getFilterLogs',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }), new Method({\n      name: 'getLogs',\n      call: 'klay_getLogs',\n      params: 1,\n      inputFormatter: [formatters.inputLogFormatter]\n    }), new Method({\n      name: 'newBlockFilter',\n      call: 'klay_newBlockFilter',\n      params: 0\n    }), new Method({\n      name: 'newFilter',\n      call: 'klay_newFilter',\n      params: 1,\n      inputFormatter: [formatters.inputLogFormatter]\n    }), new Method({\n      name: 'newPendingTransactionFilter',\n      call: 'klay_newPendingTransactionFilter',\n      params: 0\n    }), new Method({\n      name: 'uninstallFilter',\n      call: 'klay_uninstallFilter',\n      params: 1,\n      inputFormatter: [utils.numberToHex]\n    }), // Misc\n    new Method({\n      name: 'sha3',\n      call: 'klay_sha3',\n      params: 1\n    }), new Method({\n      name: 'getCypressCredit',\n      call: 'klay_getCypressCredit',\n      params: 1,\n      inputFormatter: [formatters.inputDefaultBlockNumberFormatter]\n    }), // subscriptions\n    new Subscriptions({\n      name: 'subscribe',\n      type: 'klay',\n      subscriptions: {\n        newBlockHeaders: {\n          subscriptionName: 'newHeads',\n          // replace subscription with this name\n          params: 0\n        },\n        pendingTransactions: {\n          subscriptionName: 'newPendingTransactions',\n          // replace subscription with this name\n          params: 0\n        },\n        logs: {\n          params: 1,\n          inputFormatter: [formatters.inputLogFormatter],\n          subscriptionHandler: function (output) {\n            this.emit('data', output);\n\n            if (_.isFunction(this.callback)) {\n              this.callback(null, output, this);\n            }\n          }\n        },\n        syncing: {\n          params: 0,\n          subscriptionHandler: function (output) {\n            const _this = this;\n            /* eslint-disable-line no-shadow */\n            // fire TRUE at start\n\n\n            if (this._isSyncing !== true) {\n              this._isSyncing = true;\n              this.emit('changed', _this._isSyncing);\n\n              if (_.isFunction(this.callback)) {\n                this.callback(null, _this._isSyncing, this);\n              }\n\n              setTimeout(function () {\n                _this.emit('data', output);\n\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, output, _this);\n                }\n              }, 0); // fire sync status\n            } else {\n              this.emit('data', output);\n\n              if (_.isFunction(_this.callback)) {\n                this.callback(null, output, this);\n              } // wait for some time before fireing the FALSE\n\n\n              clearTimeout(this._isSyncingTimeout);\n              this._isSyncingTimeout = setTimeout(function () {\n                if (output.currentBlock > output.highestBlock - 200) {\n                  _this._isSyncing = false;\n\n                  _this.emit('changed', _this._isSyncing);\n\n                  if (_.isFunction(_this.callback)) {\n                    _this.callback(null, _this._isSyncing, _this);\n                  }\n                }\n              }, 500);\n            }\n          }\n        }\n      }\n    })];\n    methods.forEach(function (method) {\n      method.attachToObject(_this);\n      method.setRequestManager(_this._requestManager);\n    });\n  }\n\n}\n\nmodule.exports = KlayRPC;","map":null,"metadata":{},"sourceType":"script"}