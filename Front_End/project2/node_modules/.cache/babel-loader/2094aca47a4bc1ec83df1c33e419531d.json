{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-helpers/src/errors.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\nconst constants = require('./constants');\n\nconst hasErrorMessage = result => !!result && !!result.error && !!result.error.message;\n\nconst txErrorTable = {\n  '0x2': 'VM error occurs while running smart contract',\n  '0x3': 'max call depth exceeded',\n  '0x4': 'contract address collision',\n  '0x5': 'contract creation code storage out of gas',\n  '0x6': 'evm: max code size exceeded',\n  '0x7': 'out of gas',\n  '0x8': 'evm: write protection',\n  '0x9': 'evm: execution reverted',\n  '0xa': 'reached the opcode count limit',\n  '0xb': 'account already exists',\n  '0xc': 'not a program account (e.g., an account having code and storage)',\n  '0xd': 'Human-readable address is not supported now',\n  '0xe': 'fee ratio is out of range [1, 99]',\n  '0xf': 'AccountKeyFail is not updatable',\n  '0x10': 'different account key type',\n  '0x11': 'AccountKeyNil cannot be initialized to an account',\n  '0x12': 'public key is not on curve',\n  '0x13': 'key weight is zero',\n  '0x14': 'key is not serializable',\n  '0x15': 'duplicated key',\n  '0x16': 'weighted sum overflow',\n  '0x17': 'unsatisfiable threshold. Weighted sum of keys is less than the threshold.',\n  '0x18': 'length is zero',\n  '0x19': 'length too long',\n  '0x1a': 'nested role-based key',\n  '0x1b': 'a legacy transaction must be with a legacy account key',\n  '0x1c': 'deprecated feature',\n  '0x1d': 'not supported',\n  '0x1e': 'smart contract code format is invalid'\n};\nmodule.exports = {\n  InvalidConnection: host => new Error(`CONNECTION ERROR: Couldn't connect to node ${host}.`),\n  RequestFailed: err => new Error(`Request failed: ${err}`),\n  ConnectionTimeout: ms => new Error(`CONNECTION TIMEOUT: timeout of ${ms}ms achived`),\n  ConnectionNotOpenError: event => {\n    const error = new Error('connection not open on send()');\n\n    if (event) {\n      error.code = event.code;\n      error.reason = event.reason;\n    }\n\n    return error;\n  },\n  InvalidProvider: () => new Error('Provider not set or invalid'),\n  InvalidNumberOfParams: (got, expected, method) => new Error(`\n    Invalid number of parameters for \"${method}\". Got ${got} expected ${expected}!\n    `),\n  ErrorResponse: result => {\n    const message = hasErrorMessage(result) ? result.error.message : JSON.stringify(result);\n    return new Error(`Returned error: ${message}`);\n  },\n  InvalidResponse: result => {\n    if (result === null) return new Error('Invalid response: null');\n    const message = hasErrorMessage(result) ? result.error.message : `Invalid JSON RPC response: ${JSON.stringify(result)}`;\n    return new Error(message);\n  },\n  needNameCallPropertyToCreateMethod: new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.'),\n  blockHashNull: new Error('blockHash null'),\n  contractCouldntBeStored: new Error(\"The contract code couldn't be stored, please check your gas limit.\"),\n  receiptDidntContainContractAddress: new Error(\"The transaction receipt didn't contain a contract address.\"),\n  transactionReverted: receiptJSON => new Error(`Transaction has been reverted by the EVM:\\n${receiptJSON}`),\n  transactionRanOutOfGas: receiptJSON => new Error(`Transaction ran out of gas. Please provide more gas:\\n${receiptJSON}`),\n  invalidGasPrice: () => new Error(`Invalid gas price. Please provide valid gas price: ${constants.VALID_GAS_PRICE}`),\n  invalidGasLimit: () => new Error('Invalid gas limit. Please provide valid gas.'),\n  invalidData: () => new Error('Invalid data. Please provide valid hex-strict data.'),\n  notAllowedZeroGas: () => new Error(\"gas can't be 0. Please provide more gas.\"),\n  txErrorTable\n};","map":null,"metadata":{},"sourceType":"script"}