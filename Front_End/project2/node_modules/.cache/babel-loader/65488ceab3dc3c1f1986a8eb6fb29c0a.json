{"ast":null,"code":"/*\n    Copyright 2019 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst AccountKeyEnum = require('./accountKeyEnum').AccountKeyEnum;\n\nconst MAX_MULTISIG_KEY_LENGTH = 10;\n\nclass AccountKeyMultiSig {\n  constructor(keys) {\n    if (keys instanceof AccountKeyMultiSig) keys = keys.keys;\n    if (!Array.isArray(keys)) throw new Error('To create AccountKeyMultiSig, an array of private key strings is required.');\n    if (keys.length === 0) throw new Error('Empty array.');\n    if (keys.length > MAX_MULTISIG_KEY_LENGTH) throw new Error(\"The maximum number of keys is \".concat(MAX_MULTISIG_KEY_LENGTH, \".\"));\n    if (isDuple(keys)) throw new Error('There is a duplicate key.');\n    this._keys = keys;\n    this.type = AccountKeyEnum.ACCOUNT_KEY_MULTISIG;\n  }\n\n  get defaultKey() {\n    return this._keys[0];\n  }\n\n  get keys() {\n    return this._keys;\n  }\n\n  get transactionKey() {\n    return this._keys;\n  }\n\n  get updateKey() {\n    return this._keys;\n  }\n\n  get feePayerKey() {\n    return this._keys;\n  }\n\n  toPublicKey(toPublicKeyFunc) {\n    const keys = [];\n\n    for (let i = 0; i < this._keys.length; i++) {\n      const key = this._keys[i];\n      keys.push(toPublicKeyFunc(key));\n    }\n\n    return keys;\n  }\n\n  update(keys) {\n    this._keys = keys.keys;\n  }\n\n}\n\nfunction isDuple(keys) {\n  const map = new Map();\n\n  for (const key of keys) {\n    if (map.get(key) !== undefined) return true;\n    map.set(key, true);\n  }\n\n  return false;\n}\n\nmodule.exports = AccountKeyMultiSig;","map":null,"metadata":{},"sourceType":"script"}