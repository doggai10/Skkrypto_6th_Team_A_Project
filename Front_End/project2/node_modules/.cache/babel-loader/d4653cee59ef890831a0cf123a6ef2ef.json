{"ast":null,"code":"/* eslint-disable class-methods-use-this */\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst lodash = require('lodash');\n\nconst fs = require('fs');\n\nconst IPFSAPI = require('ipfs-api');\n\nconst multihash = require('multihashes');\n/**\n * Representing a class for uploading and loading files to IPFS.\n * @class\n */\n\n\nclass IPFS {\n  /**\n   * Create an IPFS.\n   * @param {string} host The host url.\n   * @param {number} port The port number to use.\n   * @param {boolean} ssl With or without SSL.\n   */\n  constructor(host, port, ssl) {\n    if (host !== undefined && port !== undefined && ssl !== undefined) {\n      this.setIPFSNode(host, port, ssl);\n    }\n  }\n  /**\n   * sets a IPFS Node\n   *\n   * @param {string} host The host url.\n   * @param {number} port The port number to use.\n   * @param {boolean} ssl With or without SSL.\n   * @return {void}\n   */\n\n\n  setIPFSNode(host, port, ssl) {\n    const protocol = ssl ? 'https' : 'http';\n    this.ipfs = new IPFSAPI({\n      host,\n      port,\n      protocol\n    });\n  }\n  /**\n   * adds a file to IPFS\n   *\n   * @param {string|Buffer} data The file path string or file contents.\n   * @return {string}\n   */\n\n\n  async add(data) {\n    if (!this.ipfs) throw new Error(\"Please set IPFS Node through 'caver.ipfs.setIPFSNode'.\"); // Read file\n\n    if (lodash.isString(data)) data = fs.readFileSync(data);\n    if (!lodash.isBuffer(data)) throw new Error(\"Invalid data: \".concat(data));\n    const ret = await this.ipfs.add(data);\n    return ret[0].hash;\n  }\n  /**\n   * gets a file from IPFS\n   *\n   * @param {string} hash The file hash string.\n   * @return {Buffer}\n   */\n\n\n  async get(hash) {\n    if (!this.ipfs) throw new Error(\"Please set IPFS Node through 'caver.ipfs.setIPFSNode'.\");\n    const ret = await this.ipfs.cat(hash);\n    return ret;\n  }\n  /**\n   * converts a hash to hex format.\n   *\n   * @param {string} hash The file hash string.\n   * @return {string}\n   */\n\n\n  toHex(hash) {\n    const buf = multihash.fromB58String(hash);\n    return \"0x\".concat(multihash.toHexString(buf));\n  }\n  /**\n   * converts from a hex format.\n   *\n   * @param {string} hash The file hash string in hex format.\n   * @return {string}\n   */\n\n\n  fromHex(contentHash) {\n    const hex = contentHash.substring(2);\n    const buf = multihash.fromHexString(hex);\n    return multihash.toB58String(buf);\n  }\n\n}\n\nmodule.exports = IPFS;","map":null,"metadata":{},"sourceType":"script"}