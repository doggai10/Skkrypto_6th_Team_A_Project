{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/react-dapp/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/**\n * Copyright 2018 The caver-js Authors\n * This file is part of the caver-js library.\n *\n * The caver-js library is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The caver-js library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with the go-klayton library. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @file caver-rtm.js\n * @author Hoonil Kim <satoshi.kim@groundx.xyz>\n * @date 2018\n * @description rpc to method.\n */\nconst _ = require('underscore');\n\nconst Method = require('../../caver-core-method');\n\nconst formatters = require('../../caver-core-helpers').formatters;\n\nconst payloadTransformer = require('../../caver-core-helpers').payloadTransformer; // For indexing\n\n\nlet rpcCallToMethodAsObject = {}; // Wrap rpc json through 'Method'\n\nconst rpcCallToMethod = require('../../../rpc.json').map(rpcCall => {\n  rpcCall.inputFormatter = rpcCall.inputFormatter && _.map(rpcCall.inputFormatter, formatterStr => formatters[formatterStr]);\n  rpcCall.outputFormatter = formatters[rpcCall.outputFormatter];\n  rpcCall.transformPayload = payloadTransformer[rpcCall.transformPayload];\n\n  const _rpcCall$call$split = rpcCall.call.split('_'),\n        _rpcCall$call$split2 = _slicedToArray(_rpcCall$call$split, 2),\n        callLabel = _rpcCall$call$split2[0],\n        callName = _rpcCall$call$split2[1];\n\n  if (callName) {\n    if (!rpcCallToMethodAsObject[callLabel]) {\n      rpcCallToMethodAsObject[callLabel] = {};\n    }\n\n    rpcCallToMethodAsObject[callLabel][rpcCall.name] = new Method(rpcCall);\n  }\n\n  if (!rpcCallToMethodAsObject[rpcCall.name]) {\n    return rpcCallToMethodAsObject[rpcCall.name] = new Method(rpcCall);\n  }\n}).filter(a => !!a);\n\nmodule.exports = rpcCallToMethod;\nmodule.exports.rpc = rpcCallToMethodAsObject;","map":null,"metadata":{},"sourceType":"script"}