{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst AbstractKeyring = require('./abstractKeyring');\n\nconst utils = require('../../../caver-utils');\n\nconst PrivateKey = require('./privateKey');\n\nconst _require = require('./keyringHelper'),\n      KEY_ROLE = _require.KEY_ROLE;\n\nconst Account = require('../../../caver-account');\n\nconst _require2 = require('../../../caver-account/src/accountKey/accountKeyHelper'),\n      fillWeightedMultiSigOptionsForMultiSig = _require2.fillWeightedMultiSigOptionsForMultiSig;\n\nconst _require3 = require('./keyringHelper'),\n      validateForSigning = _require3.validateForSigning,\n      validateIndexWithKeys = _require3.validateIndexWithKeys,\n      encryptKey = _require3.encryptKey,\n      formatEncrypted = _require3.formatEncrypted;\n/**\n * representing a Keyring which includes `address` and `private keys`.\n * @class\n */\n\n\nclass MultipleKeyring extends AbstractKeyring {\n  /**\n   * creates a MultipleKeyring.\n   * @param {string} address - The address of keyring.\n   * @param {Array.<string>|Array.<PrivateKey>} keys - The keys to use in MultipleKeyring.\n   */\n  constructor(address, keys) {\n    super(address);\n    this.keys = keys;\n  }\n  /**\n   * @type {Array.<PrivateKey>}\n   */\n\n\n  get keys() {\n    return this._keys;\n  }\n\n  set keys(keyInput) {\n    if (keyInput === null) {\n      this._key = null;\n      return;\n    }\n\n    this._keys = formattingForKeyInKeyring(keyInput);\n  }\n  /**\n   * returns public key strings.\n   *\n   * @return {Array.<string>}\n   */\n\n\n  getPublicKey() {\n    const publicKeys = [];\n\n    for (let i = 0; i < this.keys.length; i++) {\n      publicKeys.push(this.keys[i].getPublicKey());\n    }\n\n    return publicKeys;\n  }\n  /**\n   * returns a copied multipleKeyring instance\n   *\n   * @return {MultipleKeyring}\n   */\n\n\n  copy() {\n    return new MultipleKeyring(this.address, this.keys);\n  }\n  /**\n   * signs with transactionHash with key and returns signature(s).\n   *\n   * @param {string} transactionHash The hash of transaction.\n   * @param {string|number} chainId The chainId specific to the network.\n   * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n   * @param {number} [index] The index of the key to be used. If index is undefined, all private keys in keyring will be used.\n   * @return {Array.<string>|Array.<Array.<string>>}\n   */\n\n\n  sign(transactionHash, chainId, role, index) {\n    validateForSigning(transactionHash, chainId);\n    const keys = this.getKeyByRole(role);\n\n    if (index !== undefined) {\n      validateIndexWithKeys(index, keys.length);\n      return keys[index].sign(transactionHash, chainId);\n    }\n\n    const signatures = [];\n\n    for (const k of keys) {\n      signatures.push(k.sign(transactionHash, chainId));\n    }\n\n    return signatures;\n  }\n  /**\n   * signs with hashed message and returns result object that includes `signatures`, `message` and `messageHash`\n   *\n   * @param {string} message The message string to sign.\n   * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n   * @param {number} [index] The index of the key to be used.\n   * @return {object}\n   */\n\n\n  signMessage(message, role, index) {\n    if (role === undefined) throw new Error(\"role should be defined for signMessage. Please use 'caver.wallet.keyring.role'.\");\n    const messageHash = utils.hashMessage(message);\n    const keys = this.getKeyByRole(role);\n    const signatures = [];\n\n    if (index !== undefined) {\n      validateIndexWithKeys(index, keys.length);\n      signatures.push(keys[index].signMessage(messageHash));\n    } else {\n      for (const k of keys) {\n        signatures.push(k.signMessage(messageHash));\n      }\n    }\n\n    return {\n      messageHash,\n      signatures,\n      message\n    };\n  }\n  /**\n   * returns keys by role. If the key of the role passed as parameter is empty, the default key is returned.\n   *\n   * @param {number} role A number indicating the role of the key. You can use `caver.wallet.keyring.role`.\n   * @return {Array.<PrivateKey>}\n   */\n\n\n  getKeyByRole(role) {\n    if (role === undefined) throw new Error(\"role should be defined.\");\n    if (role >= KEY_ROLE.roleLast || role < 0) throw new Error(\"Invalid role number: \".concat(role));\n    return this.keys;\n  }\n  /**\n   * returns an instance of Account.\n   *\n   * @param {WeightedMultiSigOptions} [options] The options that includes 'threshold' and 'weight'. This is only necessary when keyring use multiple private keys.\n   * @return {Account}\n   */\n\n\n  toAccount(options) {\n    if (_.isArray(options)) throw new Error(\"For AccountKeyWeightedMultiSig, options cannot be defined as an array of WeightedMultiSigOptions.\");\n    options = fillWeightedMultiSigOptionsForMultiSig(this.keys.length, options);\n    const publicKeys = this.getPublicKey();\n    return Account.createWithAccountKeyWeightedMultiSig(this.address, publicKeys, options);\n  }\n  /**\n   * encrypts a keyring and returns a keystore v4 object.\n   *\n   * @param {string} password The password to be used for encryption. The encrypted key store can be decrypted with this password.\n   * @param {object} options The options to use when encrypt a keyring. Also address can be defined specifically in options object.\n   * @return {object}\n   */\n\n  /**\n   * options can include below\n   * {\n   *   salt: ...,\n   *   iv: ...,\n   *   kdf: ...,\n   *   dklen: ...,\n   *   c: ...,\n   *   n: ...,\n   *   r: ...,\n   *   p: ...,\n   *   cipher: ...,\n   *   uuid: ...,\n   *   cipher: ...,\n   * }\n   */\n\n\n  encrypt(password, options = {}) {\n    let keyring = [];\n    keyring = encryptKey(this.keys, password, options);\n    return formatEncrypted(4, this.address, keyring, options);\n  }\n\n}\n\nmodule.exports = MultipleKeyring;\n/**\n * Format the key parameters passed by the user to create a keyring instance.\n * @param {Array.<string|PrivateKey>} keyInput The input parameter for key variable in Keyring.\n * @return {Array.<PrivateKey>}\n */\n\nfunction formattingForKeyInKeyring(keyInput) {\n  if (!_.isArray(keyInput)) {\n    throw new Error(\"Invalid parameter. The private keys to add should be defined as an array.\");\n  }\n\n  const keys = [];\n\n  for (let i = 0; i < keyInput.length; i++) {\n    keys.push(keyInput[i] instanceof PrivateKey ? keyInput[i] : new PrivateKey(keyInput[i]));\n  }\n\n  return keys;\n}","map":null,"metadata":{},"sourceType":"script"}