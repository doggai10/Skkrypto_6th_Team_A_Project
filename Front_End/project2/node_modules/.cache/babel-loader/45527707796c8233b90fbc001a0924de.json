{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-providers-http/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2015\n */\nconst XHR2 = require('xhr2-cookies').XMLHttpRequest;\n\nconst errors = require('../../../caver-core-helpers').errors;\n/**\n * HttpProvider should be used to send rpc calls over http\n */\n\n/**\n * @param       {string} host\n * @param       {object} options\n * @constructor\n */\n\n\nconst HttpProvider = function HttpProvider(host, options) {\n  options = options || {};\n  this.host = host || 'http://localhost:8545';\n  this.timeout = options.timeout || 0;\n  this.headers = options.headers;\n  this.connected = false;\n};\n/**\n * _prepareRequest create request instance\n */\n\n\nHttpProvider.prototype._prepareRequest = function () {\n  const request = new XHR2();\n  request.open('POST', this.host, true);\n  request.setRequestHeader('Content-Type', 'application/json');\n  request.timeout = this.timeout && this.timeout !== 1 ? this.timeout : 0;\n\n  if (this.headers) {\n    this.headers.forEach(function (header) {\n      request.setRequestHeader(header.name, header.value);\n    });\n  } // Set https default port\n\n\n  if (request._url.port === null && this.host.slice(0, 5) === 'https') request._url.port = 443;\n  return request;\n};\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\n\n\nHttpProvider.prototype.send = function (payload, callback) {\n  const _this = this;\n\n  const request = this._prepareRequest();\n\n  const host = this.host;\n  let timer;\n\n  request.onreadystatechange = function () {\n    /**\n     * readystate value\n     * 0: UNSENT - When client is created\n     * 1: OPENED - When request is opened\n     * 2: HEADERS_RECEIVED - When \"send\" is called and headers and status are available\n     * 3: LOADING - downloading\n     * 4: DONE - When receive response after operating request\n     */\n    if (request.readyState === 2) {\n      clearTimeout(timer);\n    }\n\n    if (request.readyState === 4 && request.timeout !== 1) {\n      let result = request.responseText;\n      let error = null;\n\n      if (request.response === null) {\n        error = errors.InvalidResponse(request.response);\n        clearTimeout(timer);\n      } else {\n        try {\n          result = JSON.parse(result);\n        } catch (e) {\n          if (request.responseText === '') {\n            error = errors.RequestFailed(request.statusText);\n          } else {\n            console.error(\"Invalid JSON RPC response: \".concat(JSON.stringify(request.responseText)));\n            error = errors.InvalidResponse(request.responseText);\n          }\n        }\n      }\n\n      _this.connected = true;\n      callback(error, result);\n    }\n  };\n\n  request.ontimeout = function () {\n    console.error(\"CONNECTION TIMEOUT: timeout of \".concat(this.timeout, \"ms achived\"));\n    _this.connected = false;\n    clearTimeout(timer);\n    callback(errors.ConnectionTimeout(this.timeout));\n  };\n\n  try {\n    // Set timeout for connection\n    if (request.timeout !== 0) {\n      timer = setTimeout(function () {\n        if (request.status < 4) {\n          console.error(\"CONNECTION ERROR: Couldn't connect to node \".concat(host));\n          request.abort();\n          callback(errors.InvalidConnection(host));\n        }\n      }, request.timeout);\n    }\n\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    console.error(\"CONNECTION ERROR: Couldn't connect to node \".concat(this.host));\n    this.connected = false;\n    clearTimeout(timer);\n    callback(errors.InvalidConnection(this.host));\n  }\n};\n\nHttpProvider.prototype.supportsSubscriptions = function () {\n  return false;\n};\n\nmodule.exports = HttpProvider;","map":null,"metadata":{},"sourceType":"script"}