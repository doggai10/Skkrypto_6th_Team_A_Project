{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\n/**\n * Modified function structure to ES6 arrow function. 2018-07\n * Added `(backtick) with ${} symbol. 2018-07\n * Wrapped finding result.message logic as a hasErrorMessage function. 2018-07\n * Changed name to caver.js 2018-10\n */\nconst constants = require('./constants');\n\nconst hasErrorMessage = result => !!result && !!result.error && !!result.error.message;\n\nmodule.exports = {\n  InvalidConnection: host => new Error(\"CONNECTION ERROR: Couldn't connect to node \".concat(host, \".\")),\n  ConnectionTimeout: ms => new Error(\"CONNECTION TIMEOUT: timeout of \".concat(ms, \"ms achived\")),\n  InvalidProvider: () => new Error('Provider not set or invalid'),\n  InvalidNumberOfParams: (got, expected, method) => new Error(\"\\n    Invalid number of parameters for \\\"\".concat(method, \"\\\". Got \").concat(got, \" expected \").concat(expected, \"!\\n    \")),\n  ErrorResponse: result => {\n    const message = hasErrorMessage(result) ? result.error.message : JSON.stringify(result);\n    return new Error(\"Returned error: \".concat(message));\n  },\n  InvalidResponse: result => {\n    const message = hasErrorMessage(result) ? result.error.message : \"Invalid JSON RPC response: \".concat(JSON.stringify(result));\n    return new Error(message);\n  },\n  needNameCallPropertyToCreateMethod: new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.'),\n  blockHashNull: new Error('blockHash null'),\n  contractCouldntBeStored: new Error('The contract code couldn\\'t be stored, please check your gas limit.'),\n  receiptDidntContainContractAddress: new Error('The transaction receipt didn\\'t contain a contract address.'),\n  transactionReverted: receiptJSON => new Error(\"Transaction has been reverted by the EVM:\\n\" + receiptJSON),\n  transactionRanOutOfGas: receiptJSON => new Error(\"Transaction ran out of gas. Please provide more gas:\\n\" + receiptJSON),\n  invalidGasPrice: () => new Error(\"Invalid gas price. Please provide valid gas price: \".concat(constants.VALID_GAS_PRICE)),\n  invalidGasLimit: () => new Error(\"Invalid gas limit. Please provide valid gas.\"),\n  invalidData: () => new Error(\"Invalid data. Please provide valid hex-strict data.\"),\n  notAllowedZeroGas: () => new Error(\"gas can't be 0. Please provide more gas.\")\n};","map":null,"metadata":{},"sourceType":"script"}