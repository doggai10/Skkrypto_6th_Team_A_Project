{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/project 2/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst _require = require('../../transactionHelper/transactionHelper'),\n      TX_TYPE_STRING = _require.TX_TYPE_STRING,\n      TX_TYPE_TAG = _require.TX_TYPE_TAG,\n      CODE_FORMAT = _require.CODE_FORMAT,\n      getCodeFormatTag = _require.getCodeFormatTag;\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy)) throw new Error(\"Cannot decode to FeeDelegatedSmartContractDeploy. The prefix must be \".concat(TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy, \": \").concat(rlpEncoded));\n  const typeDettached = \"0x\".concat(rlpEncoded.slice(4));\n\n  const _RLP$decode = RLP.decode(typeDettached),\n        _RLP$decode2 = _slicedToArray(_RLP$decode, 12),\n        nonce = _RLP$decode2[0],\n        gasPrice = _RLP$decode2[1],\n        gas = _RLP$decode2[2],\n        to = _RLP$decode2[3],\n        value = _RLP$decode2[4],\n        from = _RLP$decode2[5],\n        input = _RLP$decode2[6],\n        humanReadable = _RLP$decode2[7],\n        codeFormat = _RLP$decode2[8],\n        signatures = _RLP$decode2[9],\n        feePayer = _RLP$decode2[10],\n        feePayerSignatures = _RLP$decode2[11];\n\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    from,\n    input,\n    humanReadable: humanReadable === '0x1',\n    codeFormat,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated smart contract deploy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedsmartcontractdeploy to see more detail.\n * @class\n */\n\n\nclass FeeDelegatedSmartContractDeploy extends AbstractFeeDelegatedTransaction {\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedSmartContractDeploy transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated smart contract deploy transaction.\n   * @return {FeeDelegatedSmartContractDeploy}\n   */\n  static decode(rlpEncoded) {\n    return new FeeDelegatedSmartContractDeploy(_decode(rlpEncoded));\n  }\n  /**\n   * Creates a fee delegated smart contract deploy transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedSmartContractDeploy transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `to`, `value`, `input`, `humanReadable`, `codeForamt`,\n   *                               `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy, createTxObj);\n    this.to = createTxObj.to || '0x';\n    this.value = createTxObj.value || '0x0';\n    if (createTxObj.input && createTxObj.data) throw new Error(\"'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.\");\n    this.input = createTxObj.input || createTxObj.data;\n    this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false;\n    this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (address !== '0x') throw new Error(\"Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.\");\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(\"Invalid input data \".concat(input));\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get data() {\n    return this._input;\n  }\n\n  set data(data) {\n    this._input = data;\n  }\n  /**\n   * @type {boolean}\n   */\n\n\n  get humanReadable() {\n    return this._humanReadable;\n  }\n\n  set humanReadable(hr) {\n    if (!_.isBoolean(hr)) throw new Error(\"Invalid humanReadable \".concat(hr));\n    this._humanReadable = hr;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get codeFormat() {\n    return this._codeFormat;\n  }\n\n  set codeFormat(cf) {\n    this._codeFormat = getCodeFormatTag(cf);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedSmartContractDeploy, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat)]);\n  }\n\n}\n\nmodule.exports = FeeDelegatedSmartContractDeploy;","map":null,"metadata":{},"sourceType":"script"}