{"ast":null,"code":"var _slicedToArray = require(\"/Users/heeje/Desktop/Projcet_A/Front_End/project 2/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst utils = require('../../../../caver-utils');\n\nconst helpers = require('../../../../caver-core-helpers');\n\nconst _helpers$constants = helpers.constants,\n      VALUE_TRANFSER_TYPE_TAG = _helpers$constants.VALUE_TRANFSER_TYPE_TAG,\n      VALUE_TRANSFER_MEMO_TYPE_TAG = _helpers$constants.VALUE_TRANSFER_MEMO_TYPE_TAG,\n      FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG = _helpers$constants.FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG,\n      FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG,\n      FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG,\n      FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG = _helpers$constants.FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG;\n\nfunction rlpEncodeForValueTransfer(transaction) {\n  return RLP.encode([RLP.encode([VALUE_TRANFSER_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase()]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n} // TODO:\n\n\nfunction rlpEncodeForValueTransferMemo(transaction) {\n  return RLP.encode([RLP.encode([VALUE_TRANSFER_MEMO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransfer(transaction) {\n  if (transaction.senderRawTransaction) {\n    // fee payer rlp encoding.\n    const typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    const _utils$rlpDecode = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode2 = _slicedToArray(_utils$rlpDecode, 7),\n          nonce = _utils$rlpDecode2[0],\n          gasPrice = _utils$rlpDecode2[1],\n          gas = _utils$rlpDecode2[2],\n          to = _utils$rlpDecode2[3],\n          value = _utils$rlpDecode2[4],\n          from = _utils$rlpDecode2[5],\n          _utils$rlpDecode2$ = _slicedToArray(_utils$rlpDecode2[6], 1),\n          _utils$rlpDecode2$$ = _slicedToArray(_utils$rlpDecode2$[0], 3),\n          v = _utils$rlpDecode2$$[0],\n          r = _utils$rlpDecode2$$[1],\n          s = _utils$rlpDecode2$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase()]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase()]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferWithRatio(transaction) {\n  if (transaction.senderRawTransaction) {\n    // fee payer rlp encoding.\n    const typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    const _utils$rlpDecode3 = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode4 = _slicedToArray(_utils$rlpDecode3, 8),\n          nonce = _utils$rlpDecode4[0],\n          gasPrice = _utils$rlpDecode4[1],\n          gas = _utils$rlpDecode4[2],\n          to = _utils$rlpDecode4[3],\n          value = _utils$rlpDecode4[4],\n          from = _utils$rlpDecode4[5],\n          feeRatio = _utils$rlpDecode4[6],\n          _utils$rlpDecode4$ = _slicedToArray(_utils$rlpDecode4[7], 1),\n          _utils$rlpDecode4$$ = _slicedToArray(_utils$rlpDecode4$[0], 3),\n          v = _utils$rlpDecode4$$[0],\n          r = _utils$rlpDecode4$$[1],\n          s = _utils$rlpDecode4$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), feeRatio]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferMemo(transaction) {\n  if (transaction.senderRawTransaction) {\n    // fee payer rlp encoding.\n    const typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    const _utils$rlpDecode5 = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode6 = _slicedToArray(_utils$rlpDecode5, 8),\n          nonce = _utils$rlpDecode6[0],\n          gasPrice = _utils$rlpDecode6[1],\n          gas = _utils$rlpDecode6[2],\n          to = _utils$rlpDecode6[3],\n          value = _utils$rlpDecode6[4],\n          from = _utils$rlpDecode6[5],\n          data = _utils$rlpDecode6[6],\n          _utils$rlpDecode6$ = _slicedToArray(_utils$rlpDecode6[7], 1),\n          _utils$rlpDecode6$$ = _slicedToArray(_utils$rlpDecode6$[0], 3),\n          v = _utils$rlpDecode6$$[0],\n          r = _utils$rlpDecode6$$[1],\n          s = _utils$rlpDecode6$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), data]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_MEMO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedValueTransferMemoWithRatio(transaction) {\n  if (transaction.senderRawTransaction) {\n    // fee payer rlp encoding.\n    const typeDetacehdRawTransaction = \"0x\".concat(transaction.senderRawTransaction.slice(4)); // eslint-disable-next-line no-unused-vars\n\n    const _utils$rlpDecode7 = utils.rlpDecode(typeDetacehdRawTransaction),\n          _utils$rlpDecode8 = _slicedToArray(_utils$rlpDecode7, 9),\n          nonce = _utils$rlpDecode8[0],\n          gasPrice = _utils$rlpDecode8[1],\n          gas = _utils$rlpDecode8[2],\n          to = _utils$rlpDecode8[3],\n          value = _utils$rlpDecode8[4],\n          from = _utils$rlpDecode8[5],\n          data = _utils$rlpDecode8[6],\n          feeRatio = _utils$rlpDecode8[7],\n          _utils$rlpDecode8$ = _slicedToArray(_utils$rlpDecode8[8], 1),\n          _utils$rlpDecode8$$ = _slicedToArray(_utils$rlpDecode8$[0], 3),\n          v = _utils$rlpDecode8$$[0],\n          r = _utils$rlpDecode8$$[1],\n          s = _utils$rlpDecode8$$[2];\n\n    return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), to.toLowerCase(), Bytes.fromNat(value), from.toLowerCase(), data, Bytes.fromNat(feeRatio)]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  return RLP.encode([RLP.encode([FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.from.toLowerCase(), transaction.data, Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nmodule.exports = {\n  rlpEncodeForValueTransfer,\n  rlpEncodeForValueTransferMemo,\n  rlpEncodeForFeeDelegatedValueTransfer,\n  rlpEncodeForFeeDelegatedValueTransferWithRatio,\n  rlpEncodeForFeeDelegatedValueTransferMemo,\n  rlpEncodeForFeeDelegatedValueTransferMemoWithRatio\n};","map":null,"metadata":{},"sourceType":"script"}