{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Destructured Manager, BacthManager from requestmanager file. 2018-07\n * Removed addProviders function. 2018-07\n * Refactored preventing `setProvider` overwritng logic. 2018-07\n * Changed name to caver.js 2018-10\n */\nconst _require = require('../../caver-core-requestmanager'),\n      Manager = _require.Manager,\n      BatchManager = _require.BatchManager;\n\nconst formatters = require('../../caver-core-helpers').formatters;\n\nconst Method = require('../../caver-core-method');\n\nconst utils = require('../../caver-utils'); // extend\n\n\nconst extend = pkg => {\n  const ex = extension => {\n    let extendedObject = pkg;\n\n    if (extension.property) {\n      extendedObject = pkg[extension.property] = pkg[extension.property] || {};\n    }\n\n    if (extension.methods) {\n      extension.methods.forEach(method => {\n        if (!(method instanceof Method)) {\n          method = new Method(method);\n        }\n\n        method.attachToObject(extendedObject);\n        method.setRequestManager(pkg._requestManager);\n      });\n    }\n\n    return pkg;\n  };\n\n  ex.formatters = formatters;\n  ex.utils = utils;\n  ex.Method = Method;\n  return ex;\n};\n\nmodule.exports = {\n  packageInit: function (pkg, [provider, net]) {\n    if (!pkg) throw new Error('You need to instantiate using the \"new\" keyword.');\n\n    if (provider && provider._requestManager) {\n      pkg._requestManager = new Manager(provider.currentProvider); // set requestmanager on package\n    } else {\n      pkg._requestManager = new Manager(provider, net);\n    }\n\n    pkg.providers = Manager.providers;\n    pkg._provider = pkg._requestManager.provider;\n    pkg.currentProvider = pkg._provider; // add SETPROVIDER function (don't overwrite if already existing)\n\n    if (!pkg.setProvider) {\n      pkg.setProvider = (provider, net) => pkg._provider = pkg._requestManager.setProvider(provider, net).provider;\n    } // attach batch request creation\n\n\n    pkg.BatchRequest = BatchManager.bind(null, pkg._requestManager);\n  },\n  providers: Manager.providers\n};","map":null,"metadata":{},"sourceType":"script"}