{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of the web3.js library.\n\n    The web3.js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The web3.js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the web3.js. If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\nglobal.rootRequire = name => require(\"\".concat(__dirname, \"/packages/\").concat(name, \"/src/index.js\"));\n\nconst _require = require('./packages/caver-core'),\n      packageInit = _require.packageInit,\n      providers = _require.providers;\n\nconst Klay = require('./packages/caver-klay');\n\nconst Account = require('./packages/caver-account');\n\nconst KeyringContainer = require('./packages/caver-wallet');\n\nconst Keyring = require('./packages/caver-wallet/src/keyring/keyringFactory');\n\nconst Transaction = require('./packages/caver-transaction');\n\nconst RPC = require('./packages/caver-rpc');\n\nconst abi = require('./packages/caver-abi');\n\nconst BaseContract = require('./packages/caver-contract');\n\nconst KCT = require('./packages/caver-kct');\n\nconst core = require('./packages/caver-core');\n\nconst Method = require('./packages/caver-core-method');\n\nconst middleware = require('./packages/caver-middleware');\n\nconst utils = require('./packages/caver-utils');\n\nconst formatters = require('./packages/caver-core-helpers').formatters;\n\nconst helpers = require('./packages/caver-core-helpers');\n\nconst IPFS = require('./packages/caver-ipfs');\n\nconst _require2 = require('./package.json'),\n      version = _require2.version;\n\nfunction Caver(provider, net) {\n  const _this = this;\n\n  this.use = middleware.registerMiddleware.bind(middleware); // sets _requestmanager etc\n\n  packageInit(this, [provider, net]);\n  this.version = version;\n  this.utils = utils;\n  this.abi = abi;\n  this.formatters = formatters;\n  this.helpers = helpers;\n  this.Method = Method;\n  this.account = Account;\n  this.wallet = new KeyringContainer();\n  this.wallet.keyring = Keyring;\n  this.transaction = Transaction; // ex) call `caver.klay.property` || `caver.klay.method(...)`\n\n  this.kct = new KCT(this);\n  this.klay = new Klay(this);\n  this.rpc = new RPC(this);\n  this.middleware = middleware;\n  this.ipfs = new IPFS(); // overwrite package setProvider\n\n  const setProvider = this.setProvider;\n\n  this.setProvider = (p, n) => {\n    setProvider.apply(this, [p, n]);\n\n    _this.klay.setRequestManager(_this._requestManager);\n\n    _this.rpc.setRequestManager(_this._requestManager);\n\n    _this.kct.setRequestManager(_this._requestManager);\n\n    _this.contract._requestManager = _this._requestManager;\n    _this.contract.currentProvider = _this._provider;\n    return true;\n  };\n\n  const self = this;\n\n  const Contract = function Contract() {\n    BaseContract.apply(this, arguments); // when caver.setProvider is called, call 'packageInit' all contract instances instantiated via this Caver instances.\n    // This will update the currentProvider for the contract instances\n\n    const _this = this; // eslint-disable-line no-shadow\n\n\n    const setProvider = self.setProvider; // eslint-disable-line no-shadow\n\n    self.setProvider = function () {\n      setProvider.apply(self, arguments);\n      core.packageInit(_this, [self]);\n    };\n\n    this.setKeyrings(self.wallet);\n  };\n\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  };\n\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract;\n  this.contract = Contract;\n  this.contract._requestManager = this._requestManager;\n  this.contract.currentProvider = this._requestManager.provider;\n}\n\nCaver.utils = utils;\nCaver.abi = abi;\nCaver.providers = providers;\nmodule.exports = Caver;\nmodule.exports.formatters = formatters;","map":null,"metadata":{},"sourceType":"script"}