{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst BigNumber = require('bignumber.js');\n\nconst Contract = require('../../caver-contract');\n\nconst _require = require('./kctHelper'),\n      validateDeployParameterForKIP7 = _require.validateDeployParameterForKIP7,\n      determineSendParams = _require.determineSendParams,\n      kip7JsonInterface = _require.kip7JsonInterface,\n      kip7ByteCode = _require.kip7ByteCode,\n      formatParamForUint256 = _require.formatParamForUint256;\n\nconst _require2 = require('../../caver-utils'),\n      isAddress = _require2.isAddress,\n      toBuffer = _require2.toBuffer,\n      isHexStrict = _require2.isHexStrict,\n      toHex = _require2.toHex;\n\nclass KIP7 extends Contract {\n  /**\n   * deploy deploys a KIP-7 token contract to Klaytn network.\n   * `const deployedContract = await caver.klay.KIP7.deploy({\n   *      name: 'TokenName',\n   *      symbol: 'TKN',\n   *      decimals: 18,\n   *      initialSupply: new BigNumber(1000000000000000000),\n   *  }, '0x{address in hex}')`\n   *\n   * @method deploy\n   * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n   * @param {String} privateKey The address of the account to deploy the KIP-7 token contract.\n   * @return {Object}\n   */\n  static deploy(tokenInfo, deployer) {\n    validateDeployParameterForKIP7(tokenInfo);\n    const name = tokenInfo.name,\n          symbol = tokenInfo.symbol,\n          decimals = tokenInfo.decimals,\n          initialSupply = tokenInfo.initialSupply;\n    const kip7 = new KIP7();\n    return kip7.deploy({\n      data: kip7ByteCode,\n      arguments: [name, symbol, decimals, initialSupply]\n    }).send({\n      from: deployer,\n      gas: 4000000,\n      value: 0\n    });\n  }\n\n  constructor(tokenAddress, abi = kip7JsonInterface) {\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n  }\n  /**\n   * clone copies a KIP7 instance with the new address parameter set to the target contract address.\n   *\n   * @method clone\n   * @param {String} tokenAddress The address of the token contract.\n   * @return {Object}\n   */\n\n\n  clone(tokenAddress = this.options.address) {\n    return new this.constructor(tokenAddress, this.options.jsonInterface);\n  }\n  /**\n   * supportsInterface checks whether interface is supported or not.\n   *\n   * @method supportsInterface\n   * @return {Boolean}\n   */\n\n\n  async supportsInterface(interfaceId) {\n    const supported = await this.methods.supportsInterface(interfaceId).call();\n    return supported;\n  }\n  /**\n   * name returns the name of the token.\n   *\n   * @method name\n   * @return {String}\n   */\n\n\n  async name() {\n    const name = await this.methods.name().call();\n    return name;\n  }\n  /**\n   * symbol returns the symbol of the token.\n   *\n   * @method symbol\n   * @return {String}\n   */\n\n\n  async symbol() {\n    const symbol = await this.methods.symbol().call();\n    return symbol;\n  }\n  /**\n   * decimals returns the decimals of the token.\n   *\n   * @method symbol\n   * @return {Number}\n   */\n\n\n  async decimals() {\n    const decimals = await this.methods.decimals().call();\n    return Number(decimals);\n  }\n  /**\n   * totalSupply returns the total supply of the token.\n   *\n   * @method totalSupply\n   * @return {BigNumber}\n   */\n\n\n  async totalSupply() {\n    const totalSupply = await this.methods.totalSupply().call();\n    return new BigNumber(totalSupply);\n  }\n  /**\n   * balanceOf returns the balance of the account.\n   *\n   * @method balanceOf\n   * @param {String} account The address of the account for which you want to see balance.\n   * @return {BigNumber}\n   */\n\n\n  async balanceOf(account) {\n    const balance = await this.methods.balanceOf(account).call();\n    return new BigNumber(balance);\n  }\n  /**\n   * allowance returns the amount the spender is allowed to use on behalf of the owner.\n   *\n   * @method allowance\n   * @param {String} owner The address of the account that set the spender to use the money on behalf of the owner.\n   * @param {String} spender The address of the account that received the approve amount that can be used on behalf of the owner.\n   * @return {BigNumber}\n   */\n\n\n  async allowance(owner, spender) {\n    const allowance = await this.methods.allowance(owner, spender).call();\n    return new BigNumber(allowance);\n  }\n  /**\n   * isMinter returns whether the account is minter or not.\n   *\n   * @method isMinter\n   * @param {String} account The address of the account you want to check minter or not.\n   * @return {Boolean}\n   */\n\n\n  async isMinter(account) {\n    const isMinter = await this.methods.isMinter(account).call();\n    return isMinter;\n  }\n  /**\n   * isPauser returns whether the account is pauser or not.\n   *\n   * @method isPauser\n   * @param {String} account The address of the account you want to check pauser or not.\n   * @return {Boolean}\n   */\n\n\n  async isPauser(account) {\n    const isPauser = await this.methods.isPauser(account).call();\n    return isPauser;\n  }\n  /**\n   * paused returns whether or not the token contract's transaction is paused.\n   *\n   * @method paused\n   * @return {Boolean}\n   */\n\n\n  async paused() {\n    const isPaused = await this.methods.paused().call();\n    return isPaused;\n  }\n  /**\n   * approve sets amount as the allowance of spender over the caller’s tokens.\n   *\n   * @method approve\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async approve(spender, amount, sendParam = {}) {\n    const executableObj = this.methods.approve(spender, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * transfer moves amount tokens from the caller’s account to recipient.\n   *\n   * @method transfer\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async transfer(recipient, amount, sendParam = {}) {\n    const executableObj = this.methods.transfer(recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * transferFrom moves amount tokens from sender to recipient using the allowance mechanism.\n   * amount is then deducted from the caller’s allowance.\n   *\n   * @method transferFrom\n   * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async transferFrom(sender, recipient, amount, sendParam = {}) {\n    const executableObj = this.methods.transferFrom(sender, recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * safeTransfer safely transfers tokens to another address.\n   *\n   * @method safeTransfer\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Buffer|String|Number} data The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async safeTransfer(recipient, amount, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(\"Invalid parameters\");\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransfer(recipient, formatParamForUint256(amount), data) : this.methods.safeTransfer(recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * safeTransferFrom safely transfers tokens to another address.\n   *\n   * @method safeTransferFrom\n   * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Buffer|String|Number} data The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async safeTransferFrom(sender, recipient, amount, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(\"Invalid parameters\");\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount), data) : this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * mint creates amount tokens and assigns them to account, increasing the total supply.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method mint\n   * @param {String} account The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} amount The amount of tokens to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async mint(account, amount, sendParam = {}) {\n    const executableObj = this.methods.mint(account, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method addMinter\n   * @param {String} account The address of account to add as minter.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async addMinter(account, sendParam = {}) {\n    const executableObj = this.methods.addMinter(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * renounceMinter renounces privilege of MinterRole.\n   * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n   *\n   * @method renounceMinter\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async renounceMinter(sendParam = {}) {\n    const executableObj = this.methods.renounceMinter();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * burn destroys amount tokens from the caller.\n   *\n   * @method burn\n   * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async burn(amount, sendParam = {}) {\n    const executableObj = this.methods.burn(formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * burnFrom destroys amount tokens from account is then deducted from the caller’s allowance.\n   *\n   * @method burnFrom\n   * @param {String} account The address of the account that owns the token to be burned with allowance mechanism.\n   * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async burnFrom(account, amount, sendParam = {}) {\n    const executableObj = this.methods.burnFrom(account, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n   * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n   *\n   * @method addPauser\n   * @param {String} account The address of account to add as pauser.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async addPauser(account, sendParam = {}) {\n    const executableObj = this.methods.addPauser(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * pause triggers stopped state that stops sending tokens in emergency situation.\n   * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n   *\n   * @method pause\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async pause(sendParam = {}) {\n    const executableObj = this.methods.pause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * unpause sets amount as the allowance of spender over the caller’s tokens.\n   * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n   *\n   * @method unpause\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async unpause(sendParam = {}) {\n    const executableObj = this.methods.unpause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * renouncePauser renounces privilege of PauserRole.\n   * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n   *\n   * @method renouncePauser\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async renouncePauser(sendParam = {}) {\n    const executableObj = this.methods.renouncePauser();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options.from);\n    return executableObj.send(sendParam);\n  }\n\n}\n\nmodule.exports = KIP7;","map":null,"metadata":{},"sourceType":"script"}